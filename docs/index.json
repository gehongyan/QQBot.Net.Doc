{
  "api/QQBot.AccessEnvironment.html": {
    "href": "api/QQBot.AccessEnvironment.html",
    "title": "Enum AccessEnvironment | QQBot.Net 文档",
    "keywords": "Enum AccessEnvironment Namespace QQBot Assembly QQBot.Net.Core.dll 表示接入 QQ API 的环境。 public enum AccessEnvironment Fields Production = 0 正式环境。 Sandbox = 1 沙箱环境。"
  },
  "api/QQBot.AlphaColor.html": {
    "href": "api/QQBot.AlphaColor.html",
    "title": "Struct AlphaColor | QQBot.Net 文档",
    "keywords": "Struct AlphaColor Namespace QQBot Assembly QQBot.Net.Core.dll 表示 QQBot 中使用的带有不透明度通道的颜色。 public readonly struct AlphaColor Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors AlphaColor(byte, Color) 使用指定的 Color 及不透明度初始化一个 AlphaColor 结构的新实例。 public AlphaColor(byte alpha, Color baseColor) Parameters alpha byte 不透明度。 baseColor Color 基础颜色。 Examples 创建 #FF607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = new AlphaColor(new Color(0x607D8B), (byte)0xFF); AlphaColor(byte, byte, byte, byte) 使用指定的 ARGB 通道值初始化一个 AlphaColor 结构的新实例。 public AlphaColor(byte a, byte r, byte g, byte b) Parameters a byte 不透明度通道的强度。 r byte 红色通道的强度。 g byte 绿色通道的强度。 b byte 蓝色通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = new AlphaColor((byte)0xFF, (byte)0x60, (byte)0x7D, (byte)0x8B); AlphaColor(int, int, int, int) 使用指定的 ARGB 通道值初始化一个 AlphaColor 结构的新实例。 public AlphaColor(int a, int r, int g, int b) Parameters a int 不透明度通道的强度。 r int 红色通道的强度。 g int 绿色通道的强度。 b int 蓝色通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = new AlphaColor(255, 96, 125, 139); AlphaColor(float, float, float, float) 使用指定的 ARGB 通道值初始化一个 AlphaColor 结构的新实例。 public AlphaColor(float a, float r, float g, float b) Parameters a float 不透明度通道的强度。 r float 红色通道的强度。 g float 绿色通道的强度。 b float 蓝色通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = new AlphaColor(1.00f, 0.38f, 0.49f, 0.55f); AlphaColor(uint) 使用指定的 32 位无符号整型值初始化一个 AlphaColor 结构的新实例。 public AlphaColor(uint rawValue) Parameters rawValue uint 颜色的 32 位无符号整型原始值。 Examples 创建 #FF607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = new AlphaColor(0xFF607D8B); Fields Default 获取默认颜色。 public static readonly AlphaColor Default Field Value AlphaColor MaxDecimalValue 获取一个 QQBot 中带有不透明度通道的颜色的最大值的原始值。 public const uint MaxDecimalValue = 4294967295 Field Value uint Properties A 获取此颜色的不透明度通道的强度。 public byte A { get; } Property Value byte B 获取此颜色的蓝色通道的强度。 public byte B { get; } Property Value byte BaseColor 获取此颜色不带有不透明度通道的基础颜色。 public Color BaseColor { get; } Property Value Color G 获取此颜色的绿色通道的强度。 public byte G { get; } Property Value byte R 获取此颜色的红色通道的强度。 public byte R { get; } Property Value byte RawValue 获取此颜色的原始值。 public uint RawValue { get; } Property Value uint Remarks 颜色以 32 位无符号整型值 ARGB 格式进行编码，由高至低的每 8 位分别表示不透明度、红色、绿色和蓝色通道的强度。 Methods Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() 获取此颜色带有 # 前缀的 ARGB 十六进制字符串表示形式（例如 #FF000CCC）。 public override string ToString() Returns string 此颜色带有 # 前缀的 ARGB 十六进制字符串表示形式（例如 #FF000CCC）。 Operators operator ==(AlphaColor, AlphaColor) 判定两个 AlphaColor 是否相等。 public static bool operator ==(AlphaColor lhs, AlphaColor rhs) Parameters lhs AlphaColor rhs AlphaColor Returns bool 如果两个 AlphaColor 相等，则为 true；否则为 false。 explicit operator Color(AlphaColor) 获取此颜色不带有不透明度通道的基础颜色。 public static explicit operator Color(AlphaColor color) Parameters color AlphaColor Returns Color Remarks warning 此转换会丢失不透明度通道的信息。 explicit operator AlphaColor(Color) 将由 .NET 定义的 Color 颜色转换为由 QQBot.Net 定义的 AlphaColor 颜色。 public static explicit operator AlphaColor(Color color) Parameters color Color 要进行转换的 .NET Color 颜色。 Returns AlphaColor 与该 .NET Color 颜色具有相同色值的 AlphaColor 颜色。 implicit operator Color(AlphaColor) 将由 QQBot.Net 定义的 AlphaColor 颜色转换为由 .NET 定义的 Color 颜色。 public static implicit operator Color(AlphaColor color) Parameters color AlphaColor 要进行转换的 AlphaColor 颜色。 Returns Color 与该 AlphaColor 颜色具有相同色值的 .NET Color 颜色。 implicit operator uint(AlphaColor) 获取此颜色的原始值。 public static implicit operator uint(AlphaColor color) Parameters color AlphaColor Returns uint Remarks 颜色以 32 位无符号整型值 ARGB 格式进行编码，由高至低的每 8 位分别表示不透明度、红色、绿色和蓝色通道的强度。 implicit operator AlphaColor(Color) 将由 QQBot.Net 定义的 Color 颜色转换为 QQBot.Net 定义的 AlphaColor 颜色。 public static implicit operator AlphaColor(Color color) Parameters color Color 要进行转换的 QQBot.Net 定义的 Color 颜色。 Returns AlphaColor 与该 QQBot.Net 定义的 Color 颜色具有相同色值的 AlphaColor 颜色。 implicit operator AlphaColor(uint) 使用指定的 32 位无符号整型值初始化一个 AlphaColor 结构的新实例。 public static implicit operator AlphaColor(uint rawValue) Parameters rawValue uint 颜色的 32 位无符号整型原始值。 Returns AlphaColor Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色，且其完全不透明： AlphaColor darkGrey = 0xFF607D8B; operator !=(AlphaColor, AlphaColor) 判定两个 AlphaColor 是否不相等。 public static bool operator !=(AlphaColor lhs, AlphaColor rhs) Parameters lhs AlphaColor rhs AlphaColor Returns bool 如果两个 AlphaColor 不相等，则为 true；否则为 false。"
  },
  "api/QQBot.AnnouncementType.html": {
    "href": "api/QQBot.AnnouncementType.html",
    "title": "Enum AnnouncementType | QQBot.Net 文档",
    "keywords": "Enum AnnouncementType Namespace QQBot Assembly QQBot.Net.Core.dll 表示公告类型。 public enum AnnouncementType Fields Member = 0 成员公告。 Welcome = 1 欢迎公告。"
  },
  "api/QQBot.Ark.html": {
    "href": "api/QQBot.Ark.html",
    "title": "Class Ark | QQBot.Net 文档",
    "keywords": "Class Ark Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个模板。 public class Ark : IArk, IEquatable<Ark> Inheritance object Ark Implements IArk IEquatable<Ark> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Parameters 获取模板的参数。 public IReadOnlyDictionary<string, IArkParameter> Parameters { get; } Property Value IReadOnlyDictionary<string, IArkParameter> TemplateId 获取模板的 ID。 public int TemplateId { get; } Property Value int Methods Equals(Ark?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Ark? other) Parameters other Ark An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(Ark?, Ark?) 确定两个 Ark 实例是否相等。 public static bool operator ==(Ark? left, Ark? right) Parameters left Ark 要比较的第一个实例。 right Ark 要比较的第二个实例。 Returns bool 如果两个实例相等，则为 true；否则为 false。 operator !=(Ark?, Ark?) 确定两个 Ark 实例是否不相等。 public static bool operator !=(Ark? left, Ark? right) Parameters left Ark 要比较的第一个实例。 right Ark 要比较的第二个实例。 Returns bool 如果两个实例不相等，则为 true；否则为 false。"
  },
  "api/QQBot.ArkBuilder.html": {
    "href": "api/QQBot.ArkBuilder.html",
    "title": "Class ArkBuilder | QQBot.Net 文档",
    "keywords": "Class ArkBuilder Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个模板构建器。 public class ArkBuilder : IEquatable<ArkBuilder> Inheritance object ArkBuilder Implements IEquatable<ArkBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArkBuilder(int, Dictionary<string, IArkParameterBuilder>?) 初始化一个 ArkBuilder 类的新实例。 public ArkBuilder(int templateId, Dictionary<string, IArkParameterBuilder>? parameters = null) Parameters templateId int 模板的 ID。 parameters Dictionary<string, IArkParameterBuilder> 参数构建器。 Properties Parameters 获取或设置参数。 public Dictionary<string, IArkParameterBuilder> Parameters { get; set; } Property Value Dictionary<string, IArkParameterBuilder> TemplateId 获取模板的 ID。 public int TemplateId { get; } Property Value int Methods AddParameter(string, IArkParameterBuilder) 设置一个参数。 public void AddParameter(string key, IArkParameterBuilder value) Parameters key string 参数的键。 value IArkParameterBuilder 参数值构建器。 AddParameter(string, IEnumerable<IReadOnlyDictionary<string, string>>) 设置一个参数。 public void AddParameter(string key, IEnumerable<IReadOnlyDictionary<string, string>> values) Parameters key string 参数的键。 values IEnumerable<IReadOnlyDictionary<string, string>> 多字典参数的值。 AddParameter(string, params IReadOnlyDictionary<string, string>[]) 设置一个参数。 public void AddParameter(string key, params IReadOnlyDictionary<string, string>[] values) Parameters key string 参数的键。 values IReadOnlyDictionary<string, string>[] 多字典参数的值。 AddParameter(string, string) 设置一个参数。 public void AddParameter(string key, string value) Parameters key string 参数的键。 value string 单值参数的值。 AddParameter<T>(string, Action<T>) 设置一个参数。 public void AddParameter<T>(string key, Action<T> action) where T : IArkParameterBuilder, new() Parameters key string 参数的键。 action Action<T> 一个包含对要添加的新创建的参数进行配置的操作的委托。 Type Parameters T 参数值构建器的类型。 Build() 将此构建器构建为 Ark 实例。 public Ark Build() Returns Ark 构建的模板实例。 Equals(ArkBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ArkBuilder? other) Parameters other ArkBuilder An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ArkBuilder?, ArkBuilder?) 确定两个 ArkBuilder 实例是否相等。 public static bool operator ==(ArkBuilder? left, ArkBuilder? right) Parameters left ArkBuilder 要比较的第一个实例。 right ArkBuilder 要比较的第二个实例。 Returns bool 如果两个实例相等，则为 true；否则为 false。 operator !=(ArkBuilder?, ArkBuilder?) 确定两个 ArkBuilder 实例是否不相等。 public static bool operator !=(ArkBuilder? left, ArkBuilder? right) Parameters left ArkBuilder 要比较的第一个实例。 right ArkBuilder 要比较的第二个实例。 Returns bool 如果两个实例不相等，则为 true；否则为 false。"
  },
  "api/QQBot.ArkMultiDictionaryParameter.html": {
    "href": "api/QQBot.ArkMultiDictionaryParameter.html",
    "title": "Struct ArkMultiDictionaryParameter | QQBot.Net 文档",
    "keywords": "Struct ArkMultiDictionaryParameter Namespace QQBot Assembly QQBot.Net.Core.dll 表示模板中的一个多字典列表参数。 public readonly record struct ArkMultiDictionaryParameter : IArkParameter, IEquatable<ArkMultiDictionaryParameter> Implements IArkParameter IEquatable<ArkMultiDictionaryParameter> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Value 获取参数值。 public IReadOnlyCollection<IReadOnlyDictionary<string, string>> Value { get; } Property Value IReadOnlyCollection<IReadOnlyDictionary<string, string>>"
  },
  "api/QQBot.ArkMultiDictionaryParameterBuilder.html": {
    "href": "api/QQBot.ArkMultiDictionaryParameterBuilder.html",
    "title": "Class ArkMultiDictionaryParameterBuilder | QQBot.Net 文档",
    "keywords": "Class ArkMultiDictionaryParameterBuilder Namespace QQBot Assembly QQBot.Net.Core.dll 用于构建 ArkMultiDictionaryParameter 的构建器。 public class ArkMultiDictionaryParameterBuilder : IArkParameterBuilder, IEquatable<ArkMultiDictionaryParameterBuilder> Inheritance object ArkMultiDictionaryParameterBuilder Implements IArkParameterBuilder IEquatable<ArkMultiDictionaryParameterBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArkMultiDictionaryParameterBuilder(IEnumerable<IReadOnlyDictionary<string, string>>?) 初始化一个 ArkMultiDictionaryParameterBuilder 类的新实例。 public ArkMultiDictionaryParameterBuilder(IEnumerable<IReadOnlyDictionary<string, string>>? values = null) Parameters values IEnumerable<IReadOnlyDictionary<string, string>> Properties Values 获取或设置参数值。 public List<IReadOnlyDictionary<string, string>> Values { get; set; } Property Value List<IReadOnlyDictionary<string, string>> Methods AddValue(IReadOnlyDictionary<string, string>) 设置参数值。 public ArkMultiDictionaryParameterBuilder AddValue(IReadOnlyDictionary<string, string> value) Parameters value IReadOnlyDictionary<string, string> 要设置的参数值。 Returns ArkMultiDictionaryParameterBuilder 当前构建器。 Build() 构建 ArkSingleParameter 实例。 public ArkMultiDictionaryParameter Build() Returns ArkMultiDictionaryParameter 构建的 ArkSingleParameter 实例。 Equals(ArkMultiDictionaryParameterBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ArkMultiDictionaryParameterBuilder? other) Parameters other ArkMultiDictionaryParameterBuilder An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ArkMultiDictionaryParameterBuilder?, ArkMultiDictionaryParameterBuilder?) 比较两个 ArkMultiDictionaryParameterBuilder 是否相等。 public static bool operator ==(ArkMultiDictionaryParameterBuilder? left, ArkMultiDictionaryParameterBuilder? right) Parameters left ArkMultiDictionaryParameterBuilder 要比较的第一个 ArkMultiDictionaryParameterBuilder。 right ArkMultiDictionaryParameterBuilder 要比较的第二个 ArkMultiDictionaryParameterBuilder。 Returns bool 如果两个 ArkMultiDictionaryParameterBuilder 相等，则为 true；否则为 false。 operator !=(ArkMultiDictionaryParameterBuilder?, ArkMultiDictionaryParameterBuilder?) 比较两个 ArkMultiDictionaryParameterBuilder 是否不相等。 public static bool operator !=(ArkMultiDictionaryParameterBuilder? left, ArkMultiDictionaryParameterBuilder? right) Parameters left ArkMultiDictionaryParameterBuilder 要比较的第一个 ArkMultiDictionaryParameterBuilder。 right ArkMultiDictionaryParameterBuilder 要比较的第二个 ArkMultiDictionaryParameterBuilder。 Returns bool 如果两个 ArkMultiDictionaryParameterBuilder 不相等，则为 true；否则为 false。"
  },
  "api/QQBot.ArkSingleParameter.html": {
    "href": "api/QQBot.ArkSingleParameter.html",
    "title": "Struct ArkSingleParameter | QQBot.Net 文档",
    "keywords": "Struct ArkSingleParameter Namespace QQBot Assembly QQBot.Net.Core.dll 表示模板中的一个单值参数。 public readonly record struct ArkSingleParameter : IArkParameter, IEquatable<ArkSingleParameter> Implements IArkParameter IEquatable<ArkSingleParameter> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Value 获取参数值。 public string Value { get; } Property Value string"
  },
  "api/QQBot.ArkSingleParameterBuilder.html": {
    "href": "api/QQBot.ArkSingleParameterBuilder.html",
    "title": "Class ArkSingleParameterBuilder | QQBot.Net 文档",
    "keywords": "Class ArkSingleParameterBuilder Namespace QQBot Assembly QQBot.Net.Core.dll 用于构建 ArkSingleParameter 的构建器。 public class ArkSingleParameterBuilder : IArkParameterBuilder, IEquatable<ArkSingleParameterBuilder> Inheritance object ArkSingleParameterBuilder Implements IArkParameterBuilder IEquatable<ArkSingleParameterBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Value 获取或设置参数值。 public string? Value { get; set; } Property Value string Methods Build() 构建 ArkSingleParameter 实例。 public ArkSingleParameter Build() Returns ArkSingleParameter 构建的 ArkSingleParameter 实例。 Equals(ArkSingleParameterBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ArkSingleParameterBuilder? other) Parameters other ArkSingleParameterBuilder An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithValue(string) 设置参数值。 public ArkSingleParameterBuilder WithValue(string value) Parameters value string 要设置的参数值。 Returns ArkSingleParameterBuilder 当前构建器。 Operators operator ==(ArkSingleParameterBuilder?, ArkSingleParameterBuilder?) 比较两个 ArkSingleParameterBuilder 是否相等。 public static bool operator ==(ArkSingleParameterBuilder? left, ArkSingleParameterBuilder? right) Parameters left ArkSingleParameterBuilder 要比较的第一个 ArkSingleParameterBuilder。 right ArkSingleParameterBuilder 要比较的第二个 ArkSingleParameterBuilder。 Returns bool 如果两个 ArkSingleParameterBuilder 相等，则为 true；否则为 false。 operator !=(ArkSingleParameterBuilder?, ArkSingleParameterBuilder?) 比较两个 ArkSingleParameterBuilder 是否不相等。 public static bool operator !=(ArkSingleParameterBuilder? left, ArkSingleParameterBuilder? right) Parameters left ArkSingleParameterBuilder 要比较的第一个 ArkSingleParameterBuilder。 right ArkSingleParameterBuilder 要比较的第二个 ArkSingleParameterBuilder。 Returns bool 如果两个 ArkSingleParameterBuilder 不相等，则为 true；否则为 false。"
  },
  "api/QQBot.AsyncEnumerableExtensions.html": {
    "href": "api/QQBot.AsyncEnumerableExtensions.html",
    "title": "Class AsyncEnumerableExtensions | QQBot.Net 文档",
    "keywords": "Class AsyncEnumerableExtensions Namespace QQBot Assembly QQBot.Net.Core.dll 提供用于展开其异步可枚举成员是嵌套的 IEnumerable<T> 可枚举对象的 IAsyncEnumerable<T> 的扩展方法。 public static class AsyncEnumerableExtensions Inheritance object AsyncEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) public static Task<IEnumerable<T>> FlattenAsync<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters source IAsyncEnumerable<IEnumerable<T>> Returns Task<IEnumerable<T>> Type Parameters T Flatten<T>(IAsyncEnumerable<IEnumerable<T>>) 获取异步可枚举对象 source 的所有 IEnumerable<T> 成员，并将这些可枚举对象 IEnumerable<T> 中的所有成员迭代返回为一个 IEnumerable<T>。 public static IAsyncEnumerable<T> Flatten<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters source IAsyncEnumerable<IEnumerable<T>> Returns IAsyncEnumerable<T> Type Parameters T"
  },
  "api/QQBot.AttachmentType.html": {
    "href": "api/QQBot.AttachmentType.html",
    "title": "Enum AttachmentType | QQBot.Net 文档",
    "keywords": "Enum AttachmentType Namespace QQBot Assembly QQBot.Net.Core.dll 表示附件的类型。 public enum AttachmentType Fields Audio = 3 语音。 File = 4 文件。 Image = 1 图片。 Video = 2 视频。"
  },
  "api/QQBot.AudioStatus.html": {
    "href": "api/QQBot.AudioStatus.html",
    "title": "Enum AudioStatus | QQBot.Net 文档",
    "keywords": "Enum AudioStatus Namespace QQBot Assembly QQBot.Net.Core.dll 表示音频状态。 public enum AudioStatus Fields Pause = 1 暂停播放操作。 Resume = 2 继续播放操作。 Start = 0 开始播放操作。 Stop = 3 停止播放操作。"
  },
  "api/QQBot.BotGateway.html": {
    "href": "api/QQBot.BotGateway.html",
    "title": "Class BotGateway | QQBot.Net 文档",
    "keywords": "Class BotGateway Namespace QQBot Assembly QQBot.Net.Core.dll Stores the gateway information related to the current bot. public class BotGateway Inheritance object BotGateway Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SessionStartLimit Gets the SessionStartLimit that contains the information about the current session start limit. public SessionStartLimit SessionStartLimit { get; } Property Value SessionStartLimit Shards Gets the recommended number of shards to use when connecting. public int Shards { get; } Property Value int Url Gets the WSS URL that can be used for connecting to the gateway. public string Url { get; } Property Value string"
  },
  "api/QQBot.Cacheable-2.html": {
    "href": "api/QQBot.Cacheable-2.html",
    "title": "Struct Cacheable<TEntity, TId> | QQBot.Net 文档",
    "keywords": "Struct Cacheable<TEntity, TId> Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个可延迟加载的缓存实体。 public readonly struct Cacheable<TEntity, TId> where TEntity : IEntity<TId> where TId : IEquatable<TId> Type Parameters TEntity 可延迟加载的缓存实体的类型。 TId 可延迟加载的缓存实体的 ID 的类型。 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue 获取此实体是否已缓存。 public bool HasValue { get; } Property Value bool Id 获取此实体的唯一标识符。 public TId Id { get; } Property Value TId Value 如果可以从缓存中获取实体，则获取该实体。 public TEntity? Value { get; } Property Value TEntity Remarks 此属性不保证非空；在无法从缓存中拉取实体的情况下，此属性返回 null。 Methods DownloadAsync() 将此实体下载到缓存中。 public Task<TEntity?> DownloadAsync() Returns Task<TEntity> 一个表示异步下载操作的任务。任务结果包含下载的实体；如果无法通过 API 请求下载实体，或下载的实体无法转换为 TEntity，则为 null。 GetOrDownloadAsync() 如果实体已存在于缓存中，则返回该实体；否则下载该实体并返回。 public Task<TEntity?> GetOrDownloadAsync() Returns Task<TEntity> 一个表示异步获取或下载操作的任务。任务结果包含所获取或下载的实体；如果无法通过 API 请求下载实体，或下载的实体无法转换为 TEntity，则为 null。"
  },
  "api/QQBot.Cacheable-4.html": {
    "href": "api/QQBot.Cacheable-4.html",
    "title": "Struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> | QQBot.Net 文档",
    "keywords": "Struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个可延迟加载的缓存实体。 public readonly struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> where TCachedEntity : IEntity<TId>, TRelationship where TDownloadableEntity : IEntity<TId>, TRelationship where TId : IEquatable<TId> Type Parameters TCachedEntity 可延迟加载的缓存实体的类型。 TDownloadableEntity 可从 API 请求下载的实体的类型。 TRelationship 由 TCachedEntity 和 TDownloadableEntity 共同继承或实现的类型。 TId 可延迟加载的缓存实体的 ID 的类型。 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue 获取此实体是否已缓存。 public bool HasValue { get; } Property Value bool Id 获取此实体的唯一标识符。 public TId Id { get; } Property Value TId Value 如果可以从缓存中获取实体，则获取该实体。 public TCachedEntity? Value { get; } Property Value TCachedEntity Remarks 此属性不保证非空；在无法从缓存中拉取实体的情况下，此属性返回 null。 Methods DownloadAsync() 将此实体下载到缓存中。 public Task<TDownloadableEntity?> DownloadAsync() Returns Task<TDownloadableEntity> 一个表示异步下载操作的任务。任务结果包含下载的实体；如果无法通过 API 请求下载实体，或下载的实体无法转换为 TDownloadableEntity，则为 null。 GetOrDownloadAsync() 如果实体已存在于缓存中，则返回该实体；否则下载该实体并返回。 public Task<TRelationship?> GetOrDownloadAsync() Returns Task<TRelationship> 一个表示异步获取或下载操作的任务。任务结果包含所获取或下载的实体；如果无法通过 API 请求下载实体，或下载的实体无法转换为 TDownloadableEntity，则为 null。"
  },
  "api/QQBot.ChannelApplication.html": {
    "href": "api/QQBot.ChannelApplication.html",
    "title": "Enum ChannelApplication | QQBot.Net 文档",
    "keywords": "Enum ChannelApplication Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个应用子频道的应用类型。 public enum ChannelApplication Fields CallOfDutyMobile = 1000070 CoDM（使命召唤手游）开黑大厅。 GameForPeace = 1010000 和平精英开黑大厅。 HonorOfKings = 1000000 王者荣耀开黑大厅。 InteractiveMiniGames = 1000001 互动小游戏。 ScheduleReminder = 1000050 日程提醒。 SpeedDrifters = 1000051 飞车开黑大厅。 TencentVote = 1000002 腾讯投票。"
  },
  "api/QQBot.ChannelExtensions.html": {
    "href": "api/QQBot.ChannelExtensions.html",
    "title": "Class ChannelExtensions | QQBot.Net 文档",
    "keywords": "Class ChannelExtensions Namespace QQBot Assembly QQBot.Net.Core.dll 提供用于各种频道实体的扩展方法。 public static class ChannelExtensions Inheritance object ChannelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetChannelType(IChannel) 尝试基于频道所实现的接口类型获取频道的实际类型。 public static ChannelType? GetChannelType(this IChannel channel) Parameters channel IChannel 要获取其类型的频道。 Returns ChannelType? 如果此频道的实际类型已知，则返回其类型；否则，返回 null。"
  },
  "api/QQBot.ChannelPermission.html": {
    "href": "api/QQBot.ChannelPermission.html",
    "title": "Enum ChannelPermission | QQBot.Net 文档",
    "keywords": "Enum ChannelPermission Namespace QQBot Assembly QQBot.Net.Core.dll 表示可以为角色或用户设置的频道级别的权限。 [Flags] public enum ChannelPermission : uint Fields AddReactions = 262144 添加回应。 AttachFiles = 16384 上传文件。 Connect = 32768 语音连接。 CreateInvites = 8 创建邀请。 DeafenMembers = 16777216 服务器静音。 ManageChannels = 32 频道管理。 ManageMessages = 8192 消息管理。 ManageRoles = 1024 管理角色权限。 ManageVoice = 65536 语音管理。 MentionEveryone = 131072 提及全体成员、在线成员和所有角色。 MuteMembers = 33554432 服务器闭麦。 PassiveConnect = 1048576 被动连接语音频道。 PlaySoundtrack = 134217728 共享计算机音频。 SendMessages = 4096 发送文字消息。 ShareScreen = 268435456 屏幕分享。 Speak = 8388608 发言。 UseVoiceActivity = 4194304 使用自由麦。 ViewChannel = 2048 查看文字与语音频道。"
  },
  "api/QQBot.ChannelPermissions.html": {
    "href": "api/QQBot.ChannelPermissions.html",
    "title": "Struct ChannelPermissions | QQBot.Net 文档",
    "keywords": "Struct ChannelPermissions Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个频道的权限集。 public struct ChannelPermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChannelPermissions(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) 使用指定的权限位信息创建一个 ChannelPermissions 结构的新实例。 public ChannelPermissions(bool? createInvites = false, bool? manageChannels = false, bool? manageRoles = false, bool? viewChannel = false, bool? sendMessages = false, bool? manageMessages = false, bool? attachFiles = false, bool? connect = false, bool? manageVoice = false, bool? mentionEveryone = false, bool? addReactions = false, bool? passiveConnect = false, bool? useVoiceActivity = false, bool? speak = false, bool? deafenMembers = false, bool? muteMembers = false, bool? playSoundtrack = false, bool? shareScreen = false) Parameters createInvites bool? 创建邀请。 manageChannels bool? 频道管理。 manageRoles bool? 管理角色权限。 viewChannel bool? 查看文字与语音频道。 sendMessages bool? 发送文字消息。 manageMessages bool? 消息管理。 attachFiles bool? 上传文件。 connect bool? 语音连接。 manageVoice bool? 语音管理。 mentionEveryone bool? 提及全体成员、在线成员和所有角色。 addReactions bool? 添加回应。 passiveConnect bool? 被动连接语音频道。 useVoiceActivity bool? 使用自由麦。 speak bool? 发言。 deafenMembers bool? 服务器静音。 muteMembers bool? 服务器闭麦。 playSoundtrack bool? 共享计算机音频。 shareScreen bool? 屏幕分享。 ChannelPermissions(ulong) 使用指定的权限原始值创建一个 ChannelPermissions 结构的新实例。 public ChannelPermissions(ulong rawValue) Parameters rawValue ulong 权限原始值。 Fields Category 获取一个包含所有可以为分组频道设置的权限的 ChannelPermissions。 public static readonly ChannelPermissions Category Field Value ChannelPermissions DM 获取一个包含所有可以为私聊频道设置的权限的 ChannelPermissions。 public static readonly ChannelPermissions DM Field Value ChannelPermissions None 获取一个空的 ChannelPermissions，不包含任何权限。 public static readonly ChannelPermissions None Field Value ChannelPermissions Text 获取一个包含所有可以为文字频道设置的权限的 ChannelPermissions。 public static readonly ChannelPermissions Text Field Value ChannelPermissions Voice 获取一个包含所有可以为语音频道设置的权限的 ChannelPermissions。 public static readonly ChannelPermissions Voice Field Value ChannelPermissions Properties AddReactions 获取此权限集是否允许相关用户添加回应。 public bool AddReactions { get; } Property Value bool AttachFiles 获取此权限集是否允许相关用户上传文件。 public bool AttachFiles { get; } Property Value bool Connect 获取此权限集是否允许相关用户连接语音。 public bool Connect { get; } Property Value bool CreateInvites 获取此权限集是否允许相关用户创建邀请。 public bool CreateInvites { get; } Property Value bool DeafenMembers 获取此权限集是否允许相关用户使其他用户被服务器静音。 public bool DeafenMembers { get; } Property Value bool ManageChannels 获取此权限集是否允许相关用户管理频道。 public bool ManageChannels { get; } Property Value bool ManageMessages 获取此权限集是否允许相关用户管理消息。 public bool ManageMessages { get; } Property Value bool ManageRoles 获取此权限集是否允许相关用户管理角色。 public bool ManageRoles { get; } Property Value bool ManageVoice 获取此权限集是否允许相关用户管理语音频道。 public bool ManageVoice { get; } Property Value bool MentionEveryone 获取此权限集是否允许相关用户提及全体成员、在线成员和所有角色。 public bool MentionEveryone { get; } Property Value bool MuteMembers 获取此权限集是否允许相关用户使其他用户被服务器闭麦。 public bool MuteMembers { get; } Property Value bool PassiveConnect 获取此权限集是否允许相关用户被动连接到语音频道。 public bool PassiveConnect { get; } Property Value bool PlaySoundtrack 获取此权限集是否允许相关用户共享计算机音频。 public bool PlaySoundtrack { get; } Property Value bool RawValue 获取此权限集的原始值。 public readonly ulong RawValue { get; } Property Value ulong SendMessages 获取此权限集是否允许相关用户发送文字消息。 public bool SendMessages { get; } Property Value bool ShareScreen 获取此权限集是否允许相关用户共享计算机画面。 public bool ShareScreen { get; } Property Value bool Speak 获取此权限集是否允许相关用户在语音频道中发言。 public bool Speak { get; } Property Value bool UseVoiceActivity 获取此权限集是否允许相关用户使用自由麦。 public bool UseVoiceActivity { get; } Property Value bool ViewChannel 获取此权限集是否允许相关用户查看文字与语音频道。 public bool ViewChannel { get; } Property Value bool Methods All(IChannel) 为指定的频道根据其类型获取一个包含所有权限的 ChannelPermissions。 public static ChannelPermissions All(IChannel channel) Parameters channel IChannel 要获取其包含所有权限的频道。 Returns ChannelPermissions 一个包含所有该频道可以拥有的权限的 ChannelPermissions。 Exceptions ArgumentException 未知的频道类型。 Has(ChannelPermission) 获取当前权限集是否包含指定的权限。 public bool Has(ChannelPermission permission) Parameters permission ChannelPermission 要检查的权限。 Returns bool 如果当前权限集包含了所有指定的权限信息，则为 true；否则为 false。 Modify(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) 以当前权限集为基础，更改指定的权限，返回一个 ChannelPermissions 结构的新实例。 public ChannelPermissions Modify(bool? createInvites = null, bool? manageChannels = null, bool? manageRoles = null, bool? viewChannel = null, bool? sendMessages = null, bool? manageMessages = null, bool? attachFiles = null, bool? connect = null, bool? manageVoice = null, bool? mentionEveryone = null, bool? addReactions = null, bool? passiveConnect = null, bool? useVoiceActivity = null, bool? speak = null, bool? deafenMembers = null, bool? muteMembers = null, bool? playSoundtrack = null, bool? shareScreen = null) Parameters createInvites bool? 创建邀请。 manageChannels bool? 频道管理。 manageRoles bool? 管理角色权限。 viewChannel bool? 查看文字与语音频道。 sendMessages bool? 发送文字消息。 manageMessages bool? 消息管理。 attachFiles bool? 上传文件。 connect bool? 语音连接。 manageVoice bool? 语音管理。 mentionEveryone bool? 提及全体成员、在线成员和所有角色。 addReactions bool? 添加回应。 passiveConnect bool? 被动连接语音频道。 useVoiceActivity bool? 使用自由麦。 speak bool? 发言。 deafenMembers bool? 服务器静音。 muteMembers bool? 服务器闭麦。 playSoundtrack bool? 共享计算机音频。 shareScreen bool? 屏幕分享。 Returns ChannelPermissions 更改了指定权限的新的权限集。 ToList() 获取一个包含当前权限集所包含的所有已设置的 ChannelPermission 独立位标志枚举值的集合。 public List<ChannelPermission> ToList() Returns List<ChannelPermission> 一个包含当前权限集所包含的所有已设置的 ChannelPermission 独立位标志枚举值的集合；如果当前权限集未包含任何已设置的权限位，则会返回一个空集合。 ToString() 获取此权限集原始值的字符串表示。 public override string ToString() Returns string 此权限集原始值的字符串表示。"
  },
  "api/QQBot.ChannelPrivateType.html": {
    "href": "api/QQBot.ChannelPrivateType.html",
    "title": "Enum ChannelPrivateType | QQBot.Net 文档",
    "keywords": "Enum ChannelPrivateType Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个子频道的私密类型。 public enum ChannelPrivateType Fields Administrators = 1 群主及管理员可见 。 Public = 0 公开频道。 SpecifiedMembers = 2 群主、管理员、及指定成员可见。"
  },
  "api/QQBot.ChannelSubType.html": {
    "href": "api/QQBot.ChannelSubType.html",
    "title": "Enum ChannelSubType | QQBot.Net 文档",
    "keywords": "Enum ChannelSubType Namespace QQBot Assembly QQBot.Net.Core.dll 表示文字子频道的二级分类。 public enum ChannelSubType Fields Announcement = 1 公告。 Guide = 2 攻略。 Talk = 0 闲聊。 TeamUp = 3 开黑。"
  },
  "api/QQBot.ChannelType.html": {
    "href": "api/QQBot.ChannelType.html",
    "title": "Enum ChannelType | QQBot.Net 文档",
    "keywords": "Enum ChannelType Namespace QQBot Assembly QQBot.Net.Core.dll 表示子频道类型。 public enum ChannelType Fields Application = 10006 应用子频道。 Category = 4 分组子频道。 Forum = 10007 论坛子频道。 LiveStream = 10005 直播子频道。 Text = 0 文字子频道。 Unspecified = -1 未指定。 Voice = 2 语音子频道。"
  },
  "api/QQBot.Color.html": {
    "href": "api/QQBot.Color.html",
    "title": "Struct Color | QQBot.Net 文档",
    "keywords": "Struct Color Namespace QQBot Assembly QQBot.Net.Core.dll 表示 QQBot 中使用的颜色。 public readonly struct Color Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Color(byte, byte, byte) 使用指定的 RGB 通道值初始化一个 Color 结构的新实例。 public Color(byte r, byte g, byte b) Parameters r byte 红色通道的强度。 g byte 绿色通道的强度。 b byte 蓝色通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色： Color darkGrey = new Color((byte)0x60, (byte)0x7D, (byte)0x8B); Exceptions ArgumentException 所提供的三个通道的强度值所组成的颜色的原始值超过了 MaxDecimalValue。 Color(int, int, int) 使用指定的 RGB 通道值初始化一个 Color 结构的新实例。 public Color(int r, int g, int b) Parameters r int 红色通道的强度。 g int 绿色通道的强度。 b int 蓝色通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色： Color darkGrey = new Color(96, 125, 139); Exceptions ArgumentException 所提供的三个通道的强度值所组成的颜色的原始值超过了 MaxDecimalValue。 Color(float, float, float) 使用指定的 RGB 通道值初始化一个 Color 结构的新实例。 public Color(float r, float g, float b) Parameters r float 红色通道的强度。 g float 绿色通道的强度。 b float 蓝色通道的强度。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色： Color darkGrey = new Color(0.38f, 0.49f, 0.55f); Exceptions ArgumentException 所提供的三个通道的强度值所组成的颜色的原始值超过了 MaxDecimalValue。 Color(uint) 使用指定的 24 位无符号整型值初始化一个 Color 结构的新实例。 public Color(uint rawValue) Parameters rawValue uint 颜色的 24 位无符号整型原始值。 Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色： Color darkGrey = new Color(0x607D8B); Exceptions ArgumentException 颜色原始值超过了 MaxDecimalValue。 Fields Blue 获取天蓝色。 public static readonly Color Blue Field Value Color Remarks 天蓝色 #3498DB（http://www.color-hex.com/color/3498db）。 DarkBlue 获取深蓝色。 public static readonly Color DarkBlue Field Value Color Remarks 深蓝色 #206694（http://www.color-hex.com/color/206694）。 DarkGreen 获取深绿色。 public static readonly Color DarkGreen Field Value Color Remarks 深绿色 #1F8B4C（http://www.color-hex.com/color/1f8b4c）。 DarkGrey 获取钢蓝色。 public static readonly Color DarkGrey Field Value Color Remarks 钢蓝色 #607D8B（http://www.color-hex.com/color/607d8b）。 DarkMagenta 获取深粉色。 public static readonly Color DarkMagenta Field Value Color Remarks 深粉色 #AD1457（http://www.color-hex.com/color/ad1457）。 DarkOrange 获取深橙色。 public static readonly Color DarkOrange Field Value Color Remarks 深橙色 #A84300（http://www.color-hex.com/color/a84300）。 DarkPurple 获取深紫色。 public static readonly Color DarkPurple Field Value Color Remarks 深紫色 #71368A（http://www.color-hex.com/color/71368a）。 DarkRed 获取深红色。 public static readonly Color DarkRed Field Value Color Remarks 深红色 #992D22（http://www.color-hex.com/color/992d22）。 DarkTeal 获取深青绿色。 public static readonly Color DarkTeal Field Value Color Remarks 深青绿色 #11806A（http://www.color-hex.com/color/11806a）。 DarkerGrey 获取深青色。 public static readonly Color DarkerGrey Field Value Color Remarks 深青色 #3A4B53（http://www.color-hex.com/color/3a4b53）。 Default 获取默认颜色。 public static readonly Color Default Field Value Color Gold 获取金黄色。 public static readonly Color Gold Field Value Color Remarks 金黄色 #F1C40F（http://www.color-hex.com/color/f1c40f）。 Green 获取绿色。 public static readonly Color Green Field Value Color Remarks 绿色 #2ECC71（http://www.color-hex.com/color/2ecc71）。 Grey 获取暗灰色。 public static readonly Color Grey Field Value Color Remarks 暗灰色 #666D71（http://www.color-hex.com/color/666d71）。 LightGrey 获取浅灰色。 public static readonly Color LightGrey Field Value Color Remarks 浅灰色 #95A5A6（http://www.color-hex.com/color/95a5a6）。 LightOrange 获取褐橙色。 public static readonly Color LightOrange Field Value Color Remarks 褐橙色 #C27C0E（http://www.color-hex.com/color/c27c0e）。 Magenta 获取玫瑰红。 public static readonly Color Magenta Field Value Color Remarks 玫瑰红 #E91E63（http://www.color-hex.com/color/e91e63）。 MaxDecimalValue 获取一个 QQBot 颜色的最大值的原始值。 public const uint MaxDecimalValue = 16777215 Field Value uint Orange 获取橙色。 public static readonly Color Orange Field Value Color Remarks 橙色 #E67E22（http://www.color-hex.com/color/e67e22）。 Purple 获取紫色。 public static readonly Color Purple Field Value Color Remarks 紫色 #9B59B6（http://www.color-hex.com/color/9b59b6）。 Red 获取猩红色。 public static readonly Color Red Field Value Color Remarks 猩红色 #E74C3C（http://www.color-hex.com/color/e74c3c）。 Teal 获取青绿色。 public static readonly Color Teal Field Value Color Remarks 青绿色 #1ABC9C（http://www.color-hex.com/color/1abc9c）。 Properties B 获取此颜色的蓝色通道的强度。 public byte B { get; } Property Value byte G 获取此颜色的绿色通道的强度。 public byte G { get; } Property Value byte R 获取此颜色的红色通道的强度。 public byte R { get; } Property Value byte RawValue 获取此颜色的原始值。 public uint RawValue { get; } Property Value uint Remarks 颜色以 24 位无符号整型值 RGB 格式进行编码，由高至低的每 8 位分别表示红色、绿色和蓝色通道的强度。 Methods Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Parse(string) 将颜色的字符串表示形式转换为颜色对象。 public static Color Parse(string rawValue) Parameters rawValue string 要解析为颜色的字符串。 Returns Color 颜色对象。 Exceptions ArgumentOutOfRangeException 值必须是有效长度的数字。 ToString() 获取此颜色带有 # 前缀的 RGB 十六进制字符串表示形式（例如 #000CCC）。 public override string ToString() Returns string 此颜色带有 # 前缀的 RGB 十六进制字符串表示形式（例如 #000CCC）。 TryParse(string, out Color) 将颜色的字符串表示形式转换为颜色对象。 public static bool TryParse(string rawValue, out Color color) Parameters rawValue string 要解析为颜色的字符串。 color Color 如果转换成功，则为颜色对象；否则为默认颜色。 Returns bool 如果转换成功，则为 true；否则为 false。 Operators operator ==(Color, Color) 判定两个 Color 是否相等。 public static bool operator ==(Color lhs, Color rhs) Parameters lhs Color rhs Color Returns bool 如果两个 Color 相等，则为 true；否则为 false。 explicit operator Color(Color) 将由 .NET 定义的 Color 颜色转换为由 QQBot.Net 定义的 Color 颜色。 public static explicit operator Color(Color color) Parameters color Color 要进行转换的 .NET Color 颜色。 Returns Color 与该 .NET Color 颜色具有相同色值的 Color 颜色。 implicit operator Color(Color) 将由 QQBot.Net 定义的 Color 颜色转换为由 .NET 定义的 Color 颜色。 public static implicit operator Color(Color color) Parameters color Color 要进行转换的 Color 颜色。 Returns Color 与该 Color 颜色具有相同色值的 .NET Color 颜色。 implicit operator uint(Color) 获取此颜色的原始值。 public static implicit operator uint(Color color) Parameters color Color Returns uint Remarks 颜色以 24 位无符号整型值 RGB 格式进行编码，由高至低的每 8 位分别表示红色、绿色和蓝色通道的强度。 implicit operator Color(uint) 使用指定的 24 位无符号整型值初始化一个 Color 结构的新实例。 public static implicit operator Color(uint rawValue) Parameters rawValue uint 颜色的 24 位无符号整型原始值。 Returns Color Examples 创建 #607D8B（http://www.color-hex.com/color/607d8b）所表示的颜色： Color darkGrey = 0x607D8B; Exceptions ArgumentException 颜色原始值超过了 MaxDecimalValue。 operator !=(Color, Color) 判定两个 Color 是否不相等。 public static bool operator !=(Color lhs, Color rhs) Parameters lhs Color rhs Color Returns bool 如果两个 Color 不相等，则为 true；否则为 false。"
  },
  "api/QQBot.ConnectionState.html": {
    "href": "api/QQBot.ConnectionState.html",
    "title": "Enum ConnectionState | QQBot.Net 文档",
    "keywords": "Enum ConnectionState Namespace QQBot Assembly QQBot.Net.Core.dll 指定客户端的连接状态。 public enum ConnectionState : byte Fields Connected = 2 客户端已连接到 QQ。 Connecting = 1 客户端正在连接到 QQ。 Disconnected = 0 客户端已断开与 QQ 的连接。 Disconnecting = 3 客户端正在断开与 QQ 的连接。"
  },
  "api/QQBot.CreateAttachmentMode.html": {
    "href": "api/QQBot.CreateAttachmentMode.html",
    "title": "Enum CreateAttachmentMode | QQBot.Net 文档",
    "keywords": "Enum CreateAttachmentMode Namespace QQBot Assembly QQBot.Net.Core.dll 指示 FileAttachment 如何创建附件。 public enum CreateAttachmentMode Fields FilePath = 0 通过本地文件路径创建附件。 MediaFileInfo = 3 通过富媒体文件信息创建附件。 Stream = 1 通过 Stream 流的实例创建附件。 Uri = 2 通过网络地址创建附件。"
  },
  "api/QQBot.Direction.html": {
    "href": "api/QQBot.Direction.html",
    "title": "Enum Direction | QQBot.Net 文档",
    "keywords": "Enum Direction Namespace QQBot Assembly QQBot.Net.Core.dll 表示获取数据的方向。 public enum Direction Fields After = 1 以指定的参考项目为基准，向后获取。 Before = 0 以指定的参考项目为基准，向前获取。"
  },
  "api/QQBot.Embed.html": {
    "href": "api/QQBot.Embed.html",
    "title": "Class Embed | QQBot.Net 文档",
    "keywords": "Class Embed Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个嵌入式消息。 public class Embed : IEmbed, IEquatable<Embed> Inheritance object Embed Implements IEmbed IEquatable<Embed> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Fields 获取此嵌入式消息的字段。 public IReadOnlyCollection<EmbedField> Fields { get; } Property Value IReadOnlyCollection<EmbedField> Prompt 获取此嵌入式消息的弹窗内容。 public string? Prompt { get; } Property Value string Thumbnail 获取此嵌入式消息的缩略图。 public EmbedThumbnail? Thumbnail { get; } Property Value EmbedThumbnail? Title 获取此嵌入式消息的标题。 public string? Title { get; } Property Value string Methods Equals(Embed?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Embed? other) Parameters other Embed An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(Embed?, Embed?) 确定两个 Embed 实例是否相等。 public static bool operator ==(Embed? left, Embed? right) Parameters left Embed 要比较的第一个实例。 right Embed 要比较的第二个实例。 Returns bool 如果两个实例相等，则为 true；否则为 false。 operator !=(Embed?, Embed?) 确定两个 Embed 实例是否不相等。 public static bool operator !=(Embed? left, Embed? right) Parameters left Embed 要比较的第一个实例。 right Embed 要比较的第二个实例。 Returns bool 如果两个实例不相等，则为 true；否则为 false。"
  },
  "api/QQBot.EmbedBuilder.html": {
    "href": "api/QQBot.EmbedBuilder.html",
    "title": "Class EmbedBuilder | QQBot.Net 文档",
    "keywords": "Class EmbedBuilder Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个用于构建 Embed 的构建器类。 public class EmbedBuilder : IEquatable<EmbedBuilder> Inheritance object EmbedBuilder Implements IEquatable<EmbedBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Fields 获取或设置要为嵌入式消息设置的字段。 public List<EmbedFieldBuilder> Fields { get; } Property Value List<EmbedFieldBuilder> Prompt 获取或设置要为嵌入式消息设置的弹窗内容。 public string? Prompt { get; set; } Property Value string ThumbnailUrl 获取或设置要为嵌入式消息设置的缩略图 URL。 public string? ThumbnailUrl { get; set; } Property Value string Title 获取或设置要为嵌入式消息设置的标题。 public string? Title { get; set; } Property Value string Methods AddField(EmbedFieldBuilder) 添加一个字段到 Embed。 public EmbedBuilder AddField(EmbedFieldBuilder field) Parameters field EmbedFieldBuilder 要添加的字段。 Returns EmbedBuilder 当前构建器。 AddField(Action<EmbedFieldBuilder>) 添加一个字段到 Embed。 public EmbedBuilder AddField(Action<EmbedFieldBuilder> action) Parameters action Action<EmbedFieldBuilder> 一个委托，用于配置字段构建器。 Returns EmbedBuilder 当前构建器。 AddField(string) 添加一个字段到 Embed。 public EmbedBuilder AddField(string name) Parameters name string 字段的名称。 Returns EmbedBuilder 当前构建器。 Build() 将此构建器构建为 Embed 实例。 public Embed Build() Returns Embed 构建的嵌入式消息。 Equals(EmbedBuilder?) Determines whether the specified EmbedBuilder is equal to the current EmbedBuilder public bool Equals(EmbedBuilder? embedBuilder) Parameters embedBuilder EmbedBuilder The EmbedBuilder to compare with the current EmbedBuilder Returns bool Equals(object?) Determines whether the specified object is equal to the current EmbedBuilder. public override bool Equals(object? obj) Parameters obj object The object to compare with the current EmbedBuilder Returns bool Remarks If the object passes is an EmbedBuilder, Equals(EmbedBuilder?) will be called to compare the 2 instances GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithPrompt(string) 设置嵌入式消息的弹窗内容。 public EmbedBuilder WithPrompt(string prompt) Parameters prompt string 要设置的弹窗内容。 Returns EmbedBuilder 当前构建器。 WithThumbnailUrl(string) 设置嵌入式消息的缩略图 URL。 public EmbedBuilder WithThumbnailUrl(string thumbnailUrl) Parameters thumbnailUrl string 要设置的缩略图 URL。 Returns EmbedBuilder 当前构建器。 WithTitle(string) 设置嵌入式消息的标题。 public EmbedBuilder WithTitle(string title) Parameters title string 要设置的标题。 Returns EmbedBuilder 当前构建器。 Operators operator ==(EmbedBuilder?, EmbedBuilder?) 比较两个 EmbedBuilder 是否相等。 public static bool operator ==(EmbedBuilder? left, EmbedBuilder? right) Parameters left EmbedBuilder 要比较的第一个 EmbedBuilder。 right EmbedBuilder 要比较的第二个 EmbedBuilder。 Returns bool 如果两个 EmbedBuilder 相等，则为 true；否则为 false。 operator !=(EmbedBuilder?, EmbedBuilder?) 比较两个 EmbedBuilder 是否不相等。 public static bool operator !=(EmbedBuilder? left, EmbedBuilder? right) Parameters left EmbedBuilder 要比较的第一个 EmbedBuilder。 right EmbedBuilder 要比较的第二个 EmbedBuilder。 Returns bool 如果两个 EmbedBuilder 不相等，则为 true；否则为 false。"
  },
  "api/QQBot.EmbedField.html": {
    "href": "api/QQBot.EmbedField.html",
    "title": "Struct EmbedField | QQBot.Net 文档",
    "keywords": "Struct EmbedField Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个 IEmbed 的字段。 public readonly record struct EmbedField : IEquatable<EmbedField> Implements IEquatable<EmbedField> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Name 获取此字段的名称。 public string? Name { get; } Property Value string"
  },
  "api/QQBot.EmbedFieldBuilder.html": {
    "href": "api/QQBot.EmbedFieldBuilder.html",
    "title": "Class EmbedFieldBuilder | QQBot.Net 文档",
    "keywords": "Class EmbedFieldBuilder Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个用于构建 EmbedField 的构建器类。 public class EmbedFieldBuilder : IEquatable<EmbedFieldBuilder> Inheritance object EmbedFieldBuilder Implements IEquatable<EmbedFieldBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name 获取或设置字段名称。 public string? Name { get; set; } Property Value string Methods Build() 构建此字段构建器为 EmbedField 类。 public EmbedField Build() Returns EmbedField 构建的字段。 Equals(EmbedFieldBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(EmbedFieldBuilder? embedFieldBuilder) Parameters embedFieldBuilder EmbedFieldBuilder Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithName(string) 设置字段的名称。 public EmbedFieldBuilder WithName(string name) Parameters name string 要设置的名称。 Returns EmbedFieldBuilder 当前构建器。 Operators operator ==(EmbedFieldBuilder?, EmbedFieldBuilder?) 比较两个 EmbedFieldBuilder 是否相等。 public static bool operator ==(EmbedFieldBuilder? left, EmbedFieldBuilder? right) Parameters left EmbedFieldBuilder 要比较的第一个 EmbedFieldBuilder。 right EmbedFieldBuilder 要比较的第二个 EmbedFieldBuilder。 Returns bool 如果两个 EmbedFieldBuilder 相等，则为 true；否则为 false。 operator !=(EmbedFieldBuilder?, EmbedFieldBuilder?) 比较两个 EmbedFieldBuilder 是否不相等。 public static bool operator !=(EmbedFieldBuilder? left, EmbedFieldBuilder? right) Parameters left EmbedFieldBuilder 要比较的第一个 EmbedFieldBuilder。 right EmbedFieldBuilder 要比较的第二个 EmbedFieldBuilder。 Returns bool 如果两个 EmbedFieldBuilder 不相等，则为 true；否则为 false。"
  },
  "api/QQBot.EmbedThumbnail.html": {
    "href": "api/QQBot.EmbedThumbnail.html",
    "title": "Struct EmbedThumbnail | QQBot.Net 文档",
    "keywords": "Struct EmbedThumbnail Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个 IEmbed 的缩略图。 public readonly record struct EmbedThumbnail : IEquatable<EmbedThumbnail> Implements IEquatable<EmbedThumbnail> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Url 获取缩略图的 URL。 public string? Url { get; } Property Value string"
  },
  "api/QQBot.EmojiType.html": {
    "href": "api/QQBot.EmojiType.html",
    "title": "Enum EmojiType | QQBot.Net 文档",
    "keywords": "Enum EmojiType Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个表情方式的类型。 public enum EmojiType Fields Emoji = 2 Emoji 表情。 System = 1 系统表情。"
  },
  "api/QQBot.FileAttachment.html": {
    "href": "api/QQBot.FileAttachment.html",
    "title": "Struct FileAttachment | QQBot.Net 文档",
    "keywords": "Struct FileAttachment Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个文件附件。 public struct FileAttachment : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FileAttachment(Stream, string?, AttachmentType) 通过流创建附件。 public FileAttachment(Stream stream, string? filename = null, AttachmentType type = AttachmentType.Image) Parameters stream Stream 创建附件所使用的流。 filename string 文件名。 type AttachmentType 附件的类型。 FileAttachment(MediaFileInfo?, MediaFileInfo?, string?) 通过富媒体文件信息创建附件。 public FileAttachment(MediaFileInfo? userMediaFileInfo, MediaFileInfo? groupMediaFileInfo, string? filename = null) Parameters userMediaFileInfo MediaFileInfo? 用于单聊的富媒体文件信息。 groupMediaFileInfo MediaFileInfo? 用于群聊的富媒体文件信息。 filename string 文件名。 FileAttachment(string, string?, AttachmentType) 通过文件路径创建附件。 public FileAttachment(string filePath, string? filename = null, AttachmentType type = AttachmentType.Image) Parameters filePath string 文件的路径。 filename string 文件名。 type AttachmentType 附件的类型。 Remarks 此构造函数不会校验文件路径的格式，filePath 的值将会直接传递给 OpenRead(string) 方法。 See Also OpenRead(string) FileAttachment(Uri, string?, AttachmentType) 通过 URL 创建附件。 public FileAttachment(Uri uri, string? filename = null, AttachmentType type = AttachmentType.Image) Parameters uri Uri 文件的 URL。 filename string 文件名。 type AttachmentType 附件的类型。 See Also Validate(string) Properties FilePath 获取此附件的文件路径。 public readonly string? FilePath { get; } Property Value string Filename 获取此附件的文件名。 public readonly string? Filename { get; } Property Value string GroupMediaFileInfo 获取用于群聊的富媒体文件信息。 public readonly MediaFileInfo? GroupMediaFileInfo { get; } Property Value MediaFileInfo? Mode 获取创建此文件附件的方式。 public readonly CreateAttachmentMode Mode { get; } Property Value CreateAttachmentMode Stream 获取包含文件内容的流。 public readonly Stream? Stream { get; } Property Value Stream Type 获取此附件的类型。 public readonly AttachmentType Type { get; } Property Value AttachmentType Uri 获取指向文件的 URL。 public Uri? Uri { readonly get; set; } Property Value Uri UserMediaFileInfo 获取用于单聊的富媒体文件信息。 public readonly MediaFileInfo? UserMediaFileInfo { get; } Property Value MediaFileInfo? Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/QQBot.Format.html": {
    "href": "api/QQBot.Format.html",
    "title": "Class Format | QQBot.Net 文档",
    "keywords": "Class Format Namespace QQBot Assembly QQBot.Net.Core.dll 提供有关格式化的方法。 public static class Format Inheritance object Format Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BlockQuote(string) 获取一个 Markdown 格式的块引用。 public static string BlockQuote(string text) Parameters text string 要格式化的文本。 Returns string 获取格式化后的块引用。 Bold(string?, bool) 返回一个使用粗体格式的 Markdown 格式化字符串。 public static string Bold(string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 * 字符转义为 *。 BoldItalics(string?, bool) 返回一个使用粗斜体格式的 Markdown 格式化字符串。 public static string BoldItalics(string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 * 字符转义为 *。 H1(string) 返回格式化为 Markdown 一级标题的字符串。 public static string H1(string text) Parameters text string 要格式化的文本。 Returns string 获取格式化后的文本。 H2(string) 返回格式化为 Markdown 二级标题的字符串。 public static string H2(string text) Parameters text string 要格式化的文本。 Returns string 获取格式化后的文本。 HorizontalRule() 获取一个 Markdown 格式的水平分割线。 public static string HorizontalRule() Returns string 获取格式化后的块引用。 Image(FileAttachment, Size?) 获取一个 Markdown 格式的图片。 public static string Image(FileAttachment attachment, Size? size = null) Parameters attachment FileAttachment 图片的附件信息。 size Size? 图片的尺寸。 Returns string 获取格式化后的图片。 Image(string) 获取一个 Markdown 格式的图片。 public static string Image(string url) Parameters url string 图片的 URL。 Returns string 获取格式化后的图片。 Image(string, string, Size?) 获取一个 Markdown 格式的图片。 public static string Image(string url, string alternative, Size? size = null) Parameters url string 图片的 URL。 alternative string 图片的替代文本。 size Size? 图片的尺寸。 Returns string 获取格式化后的图片。 Image(Uri) 获取一个 Markdown 格式的图片。 public static string Image(Uri uri) Parameters uri Uri Returns string 获取格式化后的图片。 Image(Uri, string, Size?) 获取一个 Markdown 格式的图片。 public static string Image(Uri uri, string alternative, Size? size = null) Parameters uri Uri alternative string 图片的替代文本。 size Size? 图片的尺寸。 Returns string 获取格式化后的图片。 Italics(string?, bool) 返回一个使用斜体格式的 Markdown 格式化字符串。 public static string Italics(string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 * 字符转义为 *。 NewLine(int) 获取一个 Markdown 格式的多行换行符。 public static string NewLine(int count = 1) Parameters count int 要获取的换行数量。 Returns string 获取多行换行符。 OrderedList(IEnumerable<string>, int) 获取有序列表的 Markdown 格式化字符串。 public static string OrderedList(IEnumerable<string> items, int indentLevel = 0) Parameters items IEnumerable<string> 要格式化的列表项。 indentLevel int 列表项的缩进级别。 Returns string 获取格式化后的列表。 Sanitize(string?, params string[]) 转义字符串，安全地转义任何 Markdown 序列。 public static string? Sanitize(this string? text, params string[] sensitiveCharacters) Parameters text string 要转义的文本。 sensitiveCharacters string[] 要转义的字符。 Returns string 获取转义后的文本。 Remarks 如果未指定要转移的字符，则将使用默认的转义字符列表。默认的待转义字符包括： </code>、*、~、`、:、-、]、)、>、#。 Strikethrough(string?, bool) 返回一个使用删除线格式的 Markdown 格式化字符串。 public static string Strikethrough(string? text, bool sanitize = true) Parameters text string 要格式化的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的文本。 Remarks 设置 sanitize 为 true 将会对文本中出现的所有 ~ 字符转义为 ~。 UnorderedList(IEnumerable<string>, int) 获取无序列表的 Markdown 格式化字符串。 public static string UnorderedList(IEnumerable<string> items, int indentLevel = 0) Parameters items IEnumerable<string> 要格式化的列表项。 indentLevel int 列表项的缩进级别。 Returns string 获取格式化后的列表。 Url(string, bool) 返回格式化为 Markdown 链接的字符串。 public static string Url(string url, bool sanitize = true) Parameters url string 要链接到的 URL。 sanitize bool 是否要先对 url 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的链接文本。 Remarks 设置 sanitize 为 true，将会对 URL 中出现的所有 < 和 > 字符分别转义为 &lt; 和 &gt;。 Url(string, string, bool) 返回格式化为 Markdown 链接的字符串。 public static string Url(string url, string text, bool sanitize = true) Parameters url string 要链接到的 URL。 text string 要格式化的文本。 sanitize bool 是否要先对 text 与 url 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的链接文本。 Remarks 设置 sanitize 为 true，将会对文本中出现的所有 [ 和 ] 字符分别转义为 [ 和 ]，并对 URL 中出现的所有 ( 和 ) 字符分别转义为 ( 和 )。 Url(Uri, bool) 返回格式化为 Markdown 链接的字符串。 public static string Url(Uri url, bool sanitize = true) Parameters url Uri 要链接到的 URL。 sanitize bool 是否要先对 url 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的链接文本。 Remarks 设置 sanitize 为 true，将会对 URL 中出现的所有 < 和 > 字符分别转义为 &lt; 和 &gt;。 Url(Uri, string, bool) 返回格式化为 Markdown 链接的字符串。 public static string Url(Uri url, string text, bool sanitize = true) Parameters url Uri 要链接到的 URL。 text string 要格式化的文本。 sanitize bool 是否要先对 text 与 url 中与当前格式化操作有冲突的字符进行转义。 Returns string 获取格式化后的链接文本。 Remarks 设置 sanitize 为 true，将会对文本中出现的所有 [ 和 ] 字符分别转义为 [ 和 ]，并对 URL 中出现的所有 ( 和 ) 字符分别转义为 ( 和 )。"
  },
  "api/QQBot.GatewayIntents.html": {
    "href": "api/QQBot.GatewayIntents.html",
    "title": "Enum GatewayIntents | QQBot.Net 文档",
    "keywords": "Enum GatewayIntents Namespace QQBot Assembly QQBot.Net.Core.dll 表示网关意图 [Flags] public enum GatewayIntents Fields All = GuildMessages | ForumsEvent | AllPublicDomain 此网关意图包括所有事件 AllPublicDomain = Guilds | GuildMembers | GuildMessageReactions | DirectMessages | OpenForumsEvent | AudioOrLiveChannelMember | GroupAndC2CEvent | Interaction | MessageAudit | AudioAction | PublicGuildMessages 此网关意图包括所有公域机器人可以订阅的事件 AudioAction = 536870912 此网关意图包括 AUDIO_START, AUDIO_FINISH, AUDIO_ON_MIC, AUDIO_OFF_MIC AudioOrLiveChannelMember = 524288 此网关意图包括 AUDIO_OR_LIVE_CHANNEL_MEMBER_ENTER, AUDIO_OR_LIVE_CHANNEL_MEMBER_EXIT DirectMessages = 4096 此网关意图包括 DIRECT_MESSAGE_CREATE, DIRECT_MESSAGE_DELETE ForumsEvent = 268435456 此网关意图包括 FORUM_THREAD_CREATE, FORUM_THREAD_UPDATE, FORUM_THREAD_DELETE, FORUM_POST_CREATE, FORUM_POST_DELETE, FORUM_REPLY_CREATE, FORUM_REPLY_DELETE, FORUM_PUBLISH_AUDIT_RESULT GroupAndC2CEvent = 33554432 此网关意图包括 C2C_MESSAGE_CREATE, FRIEND_ADD, FRIEND_DEL, C2C_MSG_REJECT, C2C_MSG_RECEIVE, GROUP_AT_MESSAGE_CREATE, GROUP_ADD_ROBOT, GROUP_DEL_ROBOT, GROUP_MSG_REJECT, GROUP_MSG_RECEIVE GuildMembers = 2 此网关意图包括 GUILD_MEMBER_ADD, GUILD_MEMBER_UPDATE, GUILD_MEMBER_REMOVE GuildMessageReactions = 1024 此网关意图包括 MESSAGE_REACTION_ADD, MESSAGE_REACTION_REMOVE GuildMessages = 512 此网关意图包括 MESSAGE_CREATE, MESSAGE_DELETE Guilds = 1 此网关意图包括 GUILD_CREATE, GUILD_UPDATE, GUILD_DELETE, CHANNEL_CREATE, CHANNEL_UPDATE, CHANNEL_DELETE Interaction = 67108864 此网关意图包括 INTERACTION_CREATE MessageAudit = 134217728 此网关意图包括 MESSAGE_AUDIT_PASS, MESSAGE_AUDIT_REJECT None = 0 此网关意图不包括任何事件 OpenForumsEvent = 262144 此网关意图包括 OPEN_FORUM_THREAD_CREATE, OPEN_FORUM_THREAD_UPDATE, OPEN_FORUM_THREAD_DELETE, OPEN_FORUM_POST_CREATE, OPEN_FORUM_POST_DELETE, OPEN_FORUM_REPLY_CREATE, OPEN_FORUM_REPLY_DELETE PublicGuildMessages = 1073741824 此网关意图包括 AT_MESSAGE_CREATE, PUBLIC_MESSAGE_DELETE"
  },
  "api/QQBot.GuildPermission.html": {
    "href": "api/QQBot.GuildPermission.html",
    "title": "Enum GuildPermission | QQBot.Net 文档",
    "keywords": "Enum GuildPermission Namespace QQBot Assembly QQBot.Net.Core.dll 表示可以为角色或用户设置的频道级别的服务器权限。 [Flags] public enum GuildPermission : uint Fields AddReactions = 262144 添加回应。 Administrator = 1 管理员。 AttachFiles = 16384 上传文件。 BanMembers = 128 加入服务器黑名单。 ChangeNickname = 512 修改昵称。 Connect = 32768 语音连接。 CreateInvites = 8 创建邀请。 DeafenMembers = 16777216 服务器静音。 FollowReactions = 524288 跟随添加回应。 KickMembers = 64 踢出成员。 ManageChannels = 32 频道管理。 ManageEmojis = 256 管理自定义表情。 ManageGuild = 2 管理服务器。 ManageInvites = 16 管理邀请。 ManageMessages = 8192 消息管理。 ManageNicknames = 67108864 修改他人昵称。 ManageRoles = 1024 管理角色权限。 ManageVoice = 65536 语音管理。 MentionEveryone = 131072 提及全体成员、在线成员和所有角色。 MuteMembers = 33554432 服务器闭麦。 OnlyPushToTalk = 2097152 仅使用按键说话。 PassiveConnect = 1048576 被动连接语音频道。 PlaySoundtrack = 134217728 共享计算机音频。 SendMessages = 4096 发送文字消息。 ShareScreen = 268435456 屏幕分享。 Speak = 8388608 发言。 UseVoiceActivity = 4194304 使用自由麦。 ViewAuditLog = 4 查看管理日志。 ViewChannel = 2048 查看文字与语音频道。"
  },
  "api/QQBot.GuildPermissions.html": {
    "href": "api/QQBot.GuildPermissions.html",
    "title": "Struct GuildPermissions | QQBot.Net 文档",
    "keywords": "Struct GuildPermissions Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个服务器的权限集。 public struct GuildPermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GuildPermissions(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) 使用指定的权限位信息创建一个 GuildPermissions 结构的新实例。 public GuildPermissions(bool administrator = false, bool manageGuild = false, bool viewAuditLog = false, bool createInvites = false, bool manageInvites = false, bool manageChannels = false, bool kickMembers = false, bool banMembers = false, bool manageEmojis = false, bool changeNickname = false, bool manageRoles = false, bool viewChannel = false, bool sendMessages = false, bool manageMessages = false, bool attachFiles = false, bool connect = false, bool manageVoice = false, bool mentionEveryone = false, bool addReactions = false, bool followReactions = false, bool passiveConnect = false, bool onlyPushToTalk = false, bool useVoiceActivity = false, bool speak = false, bool deafenMembers = false, bool muteMembers = false, bool manageNicknames = false, bool playSoundtrack = false, bool shareScreen = false) Parameters administrator bool 管理员。 manageGuild bool 管理服务器。 viewAuditLog bool 查看管理日志。 createInvites bool 创建邀请。 manageInvites bool 管理邀请。 manageChannels bool 频道管理。 kickMembers bool 踢出成员。 banMembers bool 加入服务器黑名单。 manageEmojis bool 管理自定义表情。 changeNickname bool 修改昵称。 manageRoles bool 管理角色权限。 viewChannel bool 查看文字与语音频道。 sendMessages bool 发送文字消息。 manageMessages bool 消息管理。 attachFiles bool 上传文件。 connect bool 语音连接。 manageVoice bool 语音管理。 mentionEveryone bool 提及全体成员、在线成员和所有角色。 addReactions bool 添加回应。 followReactions bool 跟随添加回应。 passiveConnect bool 被动连接语音频道。 onlyPushToTalk bool 仅使用按键说话。 useVoiceActivity bool 使用自由麦。 speak bool 发言。 deafenMembers bool 服务器静音。 muteMembers bool 服务器闭麦。 manageNicknames bool 修改他人昵称。 playSoundtrack bool 共享计算机音频。 shareScreen bool 屏幕分享。 GuildPermissions(ulong) 使用指定的权限原始值创建一个 GuildPermissions 结构的新实例。 public GuildPermissions(ulong rawValue) Parameters rawValue ulong 权限原始值。 Fields All 获取一个包含所有可以为服务器设置的权限的 GuildPermissions。 public static readonly GuildPermissions All Field Value GuildPermissions None 获取一个空的 GuildPermissions，不包含任何权限。 public static readonly GuildPermissions None Field Value GuildPermissions Properties AddReactions 获取此权限集是否允许相关用户添加回应。 public bool AddReactions { get; } Property Value bool Administrator 获取此权限集的相关用户是否为服务器管理员。 public bool Administrator { get; } Property Value bool AttachFiles 获取此权限集是否允许相关用户上传文件。 public bool AttachFiles { get; } Property Value bool BanMembers 获取此权限集是否允许相关用户封禁其他用户。 public bool BanMembers { get; } Property Value bool ChangeNickname 获取此权限集是否允许相关用户修改昵称。 public bool ChangeNickname { get; } Property Value bool Connect 获取此权限集是否允许相关用户连接语音。 public bool Connect { get; } Property Value bool CreateInvites 获取此权限集是否允许相关用户创建邀请。 public bool CreateInvites { get; } Property Value bool DeafenMembers 获取此权限集是否允许相关用户使其他用户被服务器静音。 public bool DeafenMembers { get; } Property Value bool FollowReactions 获取此权限集是否允许相关用户跟随添加回应。 public bool FollowReactions { get; } Property Value bool KickMembers 获取此权限集是否允许相关用户踢出其他用户。 public bool KickMembers { get; } Property Value bool ManageChannels 获取此权限集是否允许相关用户管理频道。 public bool ManageChannels { get; } Property Value bool ManageEmojis 获取此权限集是否允许相关用户管理自定义表情。 public bool ManageEmojis { get; } Property Value bool ManageGuild 获取此权限集是否允许相关用户管理服务器。 public bool ManageGuild { get; } Property Value bool ManageInvites 获取此权限集是否允许相关用户管理邀请。 public bool ManageInvites { get; } Property Value bool ManageMessages 获取此权限集是否允许相关用户管理消息。 public bool ManageMessages { get; } Property Value bool ManageNicknames 获取此权限集是否允许相关用户修改他人昵称。 public bool ManageNicknames { get; } Property Value bool ManageRoles 获取此权限集是否允许相关用户管理角色。 public bool ManageRoles { get; } Property Value bool ManageVoice 获取此权限集是否允许相关用户管理语音频道。 public bool ManageVoice { get; } Property Value bool MentionEveryone 获取此权限集是否允许相关用户提及全体成员、在线成员和所有角色。 public bool MentionEveryone { get; } Property Value bool MuteMembers 获取此权限集是否允许相关用户使其他用户被服务器闭麦。 public bool MuteMembers { get; } Property Value bool OnlyPushToTalk 获取此权限集是否要求相关用户仅可使用按键说话。 public bool OnlyPushToTalk { get; } Property Value bool PassiveConnect 获取此权限集是否允许相关用户被动连接到语音频道。 public bool PassiveConnect { get; } Property Value bool PlaySoundtrack 获取此权限集是否允许相关用户共享计算机音频。 public bool PlaySoundtrack { get; } Property Value bool RawValue 获取此权限集的原始值。 public readonly ulong RawValue { get; } Property Value ulong SendMessages 获取此权限集是否允许相关用户发送文字消息。 public bool SendMessages { get; } Property Value bool ShareScreen 获取此权限集是否允许相关用户共享计算机画面。 public bool ShareScreen { get; } Property Value bool Speak 获取此权限集是否允许相关用户在语音频道中发言。 public bool Speak { get; } Property Value bool UseVoiceActivity 获取此权限集是否允许相关用户使用自由麦。 public bool UseVoiceActivity { get; } Property Value bool ViewAuditLog 获取此权限集是否允许相关用户查看管理日志。 public bool ViewAuditLog { get; } Property Value bool ViewChannel 获取此权限集是否允许相关用户查看文字与语音频道。 public bool ViewChannel { get; } Property Value bool Methods Has(GuildPermission) 获取当前权限集是否包含指定的权限。 public bool Has(GuildPermission permission) Parameters permission GuildPermission 要检查的权限。 Returns bool 如果当前权限集包含了所有指定的权限信息，则为 true；否则为 false。 Modify(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) 以当前权限集为基础，更改指定的权限，返回一个 GuildPermissions 结构的新实例。 public GuildPermissions Modify(bool? administrator = null, bool? manageGuild = null, bool? viewAuditLog = null, bool? createInvites = null, bool? manageInvites = null, bool? manageChannels = null, bool? kickMembers = null, bool? banMembers = null, bool? manageEmojis = null, bool? changeNickname = null, bool? manageRoles = null, bool? viewChannel = null, bool? sendMessages = null, bool? manageMessages = null, bool? attachFiles = null, bool? connect = null, bool? manageVoice = null, bool? mentionEveryone = null, bool? addReactions = null, bool? followReactions = null, bool? passiveConnect = null, bool? onlyPushToTalk = null, bool? useVoiceActivity = null, bool? speak = null, bool? deafenMembers = null, bool? muteMembers = null, bool? manageNicknames = null, bool? playSoundtrack = null, bool? shareScreen = null) Parameters administrator bool? 管理员。 manageGuild bool? 管理服务器。 viewAuditLog bool? 查看管理日志。 createInvites bool? 创建邀请。 manageInvites bool? 管理邀请。 manageChannels bool? 频道管理。 kickMembers bool? 踢出成员。 banMembers bool? 加入服务器黑名单。 manageEmojis bool? 管理自定义表情。 changeNickname bool? 修改昵称。 manageRoles bool? 管理角色权限。 viewChannel bool? 查看文字与语音频道。 sendMessages bool? 发送文字消息。 manageMessages bool? 消息管理。 attachFiles bool? 上传文件。 connect bool? 语音连接。 manageVoice bool? 语音管理。 mentionEveryone bool? 提及全体成员、在线成员和所有角色。 addReactions bool? 添加回应。 followReactions bool? 跟随添加回应。 passiveConnect bool? 被动连接语音频道。 onlyPushToTalk bool? 仅使用按键说话。 useVoiceActivity bool? 使用自由麦。 speak bool? 发言。 deafenMembers bool? 服务器静音。 muteMembers bool? 服务器闭麦。 manageNicknames bool? 修改他人昵称。 playSoundtrack bool? 共享计算机音频。 shareScreen bool? 屏幕分享。 Returns GuildPermissions 更改了指定权限的新的权限集。 ToList() 获取一个包含当前权限集所包含的所有已设置的 GuildPermission 独立位标志枚举值的集合。 public List<GuildPermission> ToList() Returns List<GuildPermission> 一个包含当前权限集所包含的所有已设置的 GuildPermission 独立位标志枚举值的集合；如果当前权限集未包含任何已设置的权限位，则会返回一个空集合。 ToString() 获取此权限集原始值的字符串表示。 public override string ToString() Returns string 此权限集原始值的字符串表示。"
  },
  "api/QQBot.IApplicationChannel.html": {
    "href": "api/QQBot.IApplicationChannel.html",
    "title": "Interface IApplicationChannel | QQBot.Net 文档",
    "keywords": "Interface IApplicationChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个应用子频道。 public interface IApplicationChannel : INestedChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inherited Members INestedChannel.CategoryId INestedChannel.PrivateType INestedChannel.SpeakPermission INestedChannel.Permission IGuildChannel.Id IGuildChannel.Guild IGuildChannel.Name IGuildChannel.GuildId IGuildChannel.Type IGuildChannel.Position IGuildChannel.CreatorId IUpdateable.UpdateAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties ApplicationType 获取此子频道的应用类型。 ChannelApplication? ApplicationType { get; } Property Value ChannelApplication?"
  },
  "api/QQBot.IArk.html": {
    "href": "api/QQBot.IArk.html",
    "title": "Interface IArk | QQBot.Net 文档",
    "keywords": "Interface IArk Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的模板。 public interface IArk Properties Parameters 获取模板的参数。 IReadOnlyDictionary<string, IArkParameter> Parameters { get; } Property Value IReadOnlyDictionary<string, IArkParameter> TemplateId 获取模板的 ID。 int TemplateId { get; } Property Value int"
  },
  "api/QQBot.IArkParameter.html": {
    "href": "api/QQBot.IArkParameter.html",
    "title": "Interface IArkParameter | QQBot.Net 文档",
    "keywords": "Interface IArkParameter Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个 Ark 模板参数。 public interface IArkParameter"
  },
  "api/QQBot.IArkParameterBuilder.html": {
    "href": "api/QQBot.IArkParameterBuilder.html",
    "title": "Interface IArkParameterBuilder | QQBot.Net 文档",
    "keywords": "Interface IArkParameterBuilder Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的用于构建 IArkParameter 实例的构建器。 public interface IArkParameterBuilder Methods Build() 构建 IArkParameter 实例。 IArkParameter Build() Returns IArkParameter 构建的 IArkParameter 实例。"
  },
  "api/QQBot.IAttachment.html": {
    "href": "api/QQBot.IAttachment.html",
    "title": "Interface IAttachment | QQBot.Net 文档",
    "keywords": "Interface IAttachment Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个消息内的附件。 public interface IAttachment Properties Content 获取此附件的文本内容。 string? Content { get; } Property Value string ContentType 获取此附件的内容类型。 string? ContentType { get; } Property Value string Filename 获取此附件的文件名。 string? Filename { get; } Property Value string Height 如果此附件表示的内容包含画面，则获取其高度。 int? Height { get; } Property Value int? Size 获取此附件的文件大小。 int? Size { get; } Property Value int? Type 获取此附件的类型。 AttachmentType Type { get; } Property Value AttachmentType Url 获取此附件的 URL。 string Url { get; } Property Value string Width 如果此附件表示的内容包含画面，则获取其宽度。 int? Width { get; } Property Value int?"
  },
  "api/QQBot.ICategoryChannel.html": {
    "href": "api/QQBot.ICategoryChannel.html",
    "title": "Interface ICategoryChannel | QQBot.Net 文档",
    "keywords": "Interface ICategoryChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个分组子频道。 public interface ICategoryChannel : IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inherited Members IGuildChannel.Id IGuildChannel.Guild IGuildChannel.Name IGuildChannel.GuildId IGuildChannel.Type IGuildChannel.Position IGuildChannel.CreatorId IUpdateable.UpdateAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/QQBot.IChannel.html": {
    "href": "api/QQBot.IChannel.html",
    "title": "Interface IChannel | QQBot.Net 文档",
    "keywords": "Interface IChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个频道。 public interface IChannel : IEntity<string> Inherited Members IEntity<string>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/QQBot.IDMChannel.html": {
    "href": "api/QQBot.IDMChannel.html",
    "title": "Interface IDMChannel | QQBot.Net 文档",
    "keywords": "Interface IDMChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个子频道内用户的私聊频道。 public interface IDMChannel : IMessageChannel, IPrivateChannel, IChannel, IEntity<string> Inherited Members IMessageChannel.SendMessageAsync(string, IMarkdownContent, FileAttachment?, Embed, Ark, MessageReference, IUserMessage, RequestOptions) IPrivateChannel.Recipients Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Id 获取此子频道内用户私聊频道的唯一标识符。 ulong Id { get; } Property Value ulong Recipient 获取参与到此私聊频道的另外一位用户。 IUser Recipient { get; } Property Value IUser"
  },
  "api/QQBot.IEmbed.html": {
    "href": "api/QQBot.IEmbed.html",
    "title": "Interface IEmbed | QQBot.Net 文档",
    "keywords": "Interface IEmbed Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的嵌入式消息。 public interface IEmbed Properties Fields 获取此嵌入式消息的字段。 IReadOnlyCollection<EmbedField> Fields { get; } Property Value IReadOnlyCollection<EmbedField> Prompt 获取此嵌入式消息的弹窗内容。 string? Prompt { get; } Property Value string Thumbnail 获取此嵌入式消息的缩略图。 EmbedThumbnail? Thumbnail { get; } Property Value EmbedThumbnail? Title 获取此嵌入式消息的标题。 string? Title { get; } Property Value string"
  },
  "api/QQBot.IEntity-1.html": {
    "href": "api/QQBot.IEntity-1.html",
    "title": "Interface IEntity<TId> | QQBot.Net 文档",
    "keywords": "Interface IEntity<TId> Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的具有唯一标识符的实体。 public interface IEntity<TId> where TId : IEquatable<TId> Type Parameters TId 唯一标识符的类型。 Properties Id 获取此实体的唯一标识符。 TId Id { get; } Property Value TId"
  },
  "api/QQBot.IForumChannel.html": {
    "href": "api/QQBot.IForumChannel.html",
    "title": "Interface IForumChannel | QQBot.Net 文档",
    "keywords": "Interface IForumChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个论坛子频道。 public interface IForumChannel : INestedChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inherited Members INestedChannel.CategoryId INestedChannel.PrivateType INestedChannel.SpeakPermission INestedChannel.Permission IGuildChannel.Id IGuildChannel.Guild IGuildChannel.Name IGuildChannel.GuildId IGuildChannel.Type IGuildChannel.Position IGuildChannel.CreatorId IUpdateable.UpdateAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/QQBot.IGroupChannel.html": {
    "href": "api/QQBot.IGroupChannel.html",
    "title": "Interface IGroupChannel | QQBot.Net 文档",
    "keywords": "Interface IGroupChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个群组频道，即 QQ 群。 public interface IGroupChannel : IMessageChannel, IChannel, IEntity<string>, IEntity<Guid> Inherited Members IMessageChannel.SendMessageAsync(string, IMarkdownContent, FileAttachment?, Embed, Ark, MessageReference, IUserMessage, RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Id 获取此群组频道的唯一标识符。 Guid Id { get; } Property Value Guid"
  },
  "api/QQBot.IGuild.html": {
    "href": "api/QQBot.IGuild.html",
    "title": "Interface IGuild | QQBot.Net 文档",
    "keywords": "Interface IGuild Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个频道. public interface IGuild : IEntity<ulong> Inherited Members IEntity<ulong>.Id Properties Description 获取此频道的描述。 string Description { get; } Property Value string IsAvailable 确定此服务器实体是否已准备就绪以供用户代码访问。 bool IsAvailable { get; } Property Value bool Remarks note 此属性仅对基于网关连接的客户端有意义。 此属性为 true 表示，此服务器实体已完整缓存基础数据，并与网关同步。 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。 IsOwner 获取当前用户是否是此频道的创建者。 bool IsOwner { get; } Property Value bool JoinedAt 获取当前用户加入此频道的时间。 DateTimeOffset JoinedAt { get; } Property Value DateTimeOffset MaxMembers 获取可以加入到此频道的最大成员数量。 int MaxMembers { get; } Property Value int MemberCount 获取此频道的成员数量。 int MemberCount { get; } Property Value int Name 获取此频道的名称。 string Name { get; } Property Value string OwnerId 获取此频道创建者用户的 ID。 ulong OwnerId { get; } Property Value ulong"
  },
  "api/QQBot.IGuildChannel.html": {
    "href": "api/QQBot.IGuildChannel.html",
    "title": "Interface IGuildChannel | QQBot.Net 文档",
    "keywords": "Interface IGuildChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个频道内的子频道。 public interface IGuildChannel : IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inherited Members IUpdateable.UpdateAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CreatorId 获取创建此频道的用户的 ID。 ulong? CreatorId { get; } Property Value ulong? Guild 获取此频道所属的服务器。 IGuild Guild { get; } Property Value IGuild GuildId 获取与此频道所属的服务器的 ID。 ulong GuildId { get; } Property Value ulong Id 获取此频道的唯一标识符。 ulong Id { get; } Property Value ulong Name 获取此频道的名称。 string Name { get; } Property Value string Position 获取此子频道在子频道列表中的位置。 int Position { get; } Property Value int Remarks 更小的数值表示更靠近列表顶部的位置。 Type 获取此子频道的类型。 ChannelType Type { get; } Property Value ChannelType"
  },
  "api/QQBot.IGuildMember.html": {
    "href": "api/QQBot.IGuildMember.html",
    "title": "Interface IGuildMember | QQBot.Net 文档",
    "keywords": "Interface IGuildMember Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个频道内用户 public interface IGuildMember : IGuildUser, IUser, IEntity<string>, IMentionable, IEntity<ulong> Inherited Members IGuildUser.Id IGuildUser.Username IGuildUser.Avatar IGuildUser.IsBot IGuildUser.UnionOpenId IGuildUser.UnionUserAccount IMentionable.Mention Properties JoinedAt 获取此用户加入该频道的时间。 DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? Nickname 获取此用户的昵称。 string? Nickname { get; } Property Value string RoleIds 获取此用户在该频道内拥有的所有身份组的 ID。 IReadOnlyCollection<uint>? RoleIds { get; } Property Value IReadOnlyCollection<uint>"
  },
  "api/QQBot.IGuildUser.html": {
    "href": "api/QQBot.IGuildUser.html",
    "title": "Interface IGuildUser | QQBot.Net 文档",
    "keywords": "Interface IGuildUser Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的频道内用户。 public interface IGuildUser : IUser, IEntity<string>, IMentionable, IEntity<ulong> Inherited Members IMentionable.Mention Properties Avatar 获取此用户的头像图像的 URL。 string? Avatar { get; } Property Value string Id 获取此用户的唯一标识符。 ulong Id { get; } Property Value ulong IsBot 获取此用户是否为 Bot。 bool? IsBot { get; } Property Value bool? UnionOpenId 获取此用户特殊关联应用的 openid。 string? UnionOpenId { get; } Property Value string Remarks 此字段需要特殊申请并配置后才会返回。如需申请，请联系平台运营人员。 UnionUserAccount 获取此用户机器人关联的互联应用的用户信息。 string? UnionUserAccount { get; } Property Value string Remarks 此字段与 UnionOpenId 关联的应用是同一个。如需申请，请联系平台运营人员。 Username 获取此用户的用户名。 string Username { get; } Property Value string"
  },
  "api/QQBot.ILiveStreamChannel.html": {
    "href": "api/QQBot.ILiveStreamChannel.html",
    "title": "Interface ILiveStreamChannel | QQBot.Net 文档",
    "keywords": "Interface ILiveStreamChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个直播子频道。 public interface ILiveStreamChannel : INestedChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inherited Members INestedChannel.CategoryId INestedChannel.PrivateType INestedChannel.SpeakPermission INestedChannel.Permission IGuildChannel.Id IGuildChannel.Guild IGuildChannel.Name IGuildChannel.GuildId IGuildChannel.Type IGuildChannel.Position IGuildChannel.CreatorId IUpdateable.UpdateAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/QQBot.IMarkdownContent.html": {
    "href": "api/QQBot.IMarkdownContent.html",
    "title": "Interface IMarkdownContent | QQBot.Net 文档",
    "keywords": "Interface IMarkdownContent Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的 Markdown 内容。 public interface IMarkdownContent"
  },
  "api/QQBot.IMarkdownContentBuilder.html": {
    "href": "api/QQBot.IMarkdownContentBuilder.html",
    "title": "Interface IMarkdownContentBuilder | QQBot.Net 文档",
    "keywords": "Interface IMarkdownContentBuilder Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的 Markdown 内容构建器 public interface IMarkdownContentBuilder Methods Build() 将当前构建器构建为一个 IMarkdownContent 实例。 IMarkdownContent Build() Returns IMarkdownContent IMarkdownContent 实例。"
  },
  "api/QQBot.IMentionable.html": {
    "href": "api/QQBot.IMentionable.html",
    "title": "Interface IMentionable | QQBot.Net 文档",
    "keywords": "Interface IMentionable Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个可以被提及的实体对象。 public interface IMentionable Properties Mention 返回一个提及此对象的格式化字符串。 string Mention { get; } Property Value string"
  },
  "api/QQBot.IMessage.html": {
    "href": "api/QQBot.IMessage.html",
    "title": "Interface IMessage | QQBot.Net 文档",
    "keywords": "Interface IMessage Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的消息。 public interface IMessage : IEntity<string> Inherited Members IEntity<string>.Id Properties Attachments 获取此消息中包含的所有附件。 IReadOnlyCollection<IAttachment> Attachments { get; } Property Value IReadOnlyCollection<IAttachment> Author 获取消息的发送者。 IUser Author { get; } Property Value IUser Channel 获取消息的来源频道。 IMessageChannel Channel { get; } Property Value IMessageChannel Content 获取消息的内容。 string Content { get; } Property Value string Embeds 获取此消息内包含的所有嵌入式内容。 IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> MentionedEveryone 获取此消息是否提及了全体成员。 bool? MentionedEveryone { get; } Property Value bool? Source 获取消息的来源 MessageSource Source { get; } Property Value MessageSource Timestamp 获取消息的创建时间。 DateTimeOffset Timestamp { get; } Property Value DateTimeOffset"
  },
  "api/QQBot.IMessageChannel.html": {
    "href": "api/QQBot.IMessageChannel.html",
    "title": "Interface IMessageChannel | QQBot.Net 文档",
    "keywords": "Interface IMessageChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个消息频道，可以发送和接收消息。 public interface IMessageChannel : IChannel, IEntity<string> Inherited Members IEntity<string>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Methods SendMessageAsync(string?, IMarkdownContent?, FileAttachment?, Embed?, Ark?, MessageReference?, IUserMessage?, RequestOptions?) 向此频道发送消息。 Task<Cacheable<IUserMessage, string>> SendMessageAsync(string? content = null, IMarkdownContent? markdown = null, FileAttachment? attachment = null, Embed? embed = null, Ark? ark = null, MessageReference? messageReference = null, IUserMessage? passiveSource = null, RequestOptions? options = null) Parameters content string 要发送的消息内容。 markdown IMarkdownContent 要发送的 Markdown 消息内容。 attachment FileAttachment? 要发送的文件附件。 embed Embed 要发送的嵌入式消息内容。 ark Ark 要发送的模板消息内容。 messageReference MessageReference 消息引用，用于回复消息。 passiveSource IUserMessage 被动消息来源。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, string>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。"
  },
  "api/QQBot.INestedChannel.html": {
    "href": "api/QQBot.INestedChannel.html",
    "title": "Interface INestedChannel | QQBot.Net 文档",
    "keywords": "Interface INestedChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的嵌套子频道，即可以嵌套在分组频道中的服务器子频道。 public interface INestedChannel : IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inherited Members IGuildChannel.Id IGuildChannel.Guild IGuildChannel.Name IGuildChannel.GuildId IGuildChannel.Type IGuildChannel.Position IGuildChannel.CreatorId IUpdateable.UpdateAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CategoryId 获取此嵌套频道在子频道列表中所属的分组频道的 ID。 ulong? CategoryId { get; } Property Value ulong? Remarks 如果当前频道不属于任何分组频道，则会返回 null。 Permission 获取当前用户在此频道的权限。 ChannelPermission? Permission { get; } Property Value ChannelPermission? PrivateType 获取此子频道的私密类型。 ChannelPrivateType? PrivateType { get; } Property Value ChannelPrivateType? SpeakPermission 获取此子频道的发言权限。 SpeakPermission? SpeakPermission { get; } Property Value SpeakPermission?"
  },
  "api/QQBot.IPrivateChannel.html": {
    "href": "api/QQBot.IPrivateChannel.html",
    "title": "Interface IPrivateChannel | QQBot.Net 文档",
    "keywords": "Interface IPrivateChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个私有频道。 public interface IPrivateChannel : IChannel, IEntity<string> Inherited Members IEntity<string>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Recipients 获取可以访问此频道的所有用户。 IReadOnlyCollection<IUser> Recipients { get; } Property Value IReadOnlyCollection<IUser>"
  },
  "api/QQBot.IQQBotClient.html": {
    "href": "api/QQBot.IQQBotClient.html",
    "title": "Interface IQQBotClient | QQBot.Net 文档",
    "keywords": "Interface IQQBotClient Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的 QQ Bot 客户端。 public interface IQQBotClient : IDisposable Inherited Members IDisposable.Dispose() Properties ConnectionState 获取当前连接的状态。 ConnectionState ConnectionState { get; } Property Value ConnectionState CurrentUser 获取当前已登录的用户；如果没有用户登录，则为 null。 ISelfUser? CurrentUser { get; } Property Value ISelfUser TokenType 获取已登录用户的令牌类型。 TokenType TokenType { get; } Property Value TokenType Methods GetBotGatewayAsync(RequestOptions?) Gets the gateway information related to the bot. Task<BotGateway> GetBotGatewayAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<BotGateway> A task that represents the asynchronous get operation. The task result contains a BotGateway that represents the gateway information related to the bot. LoginAsync(int, TokenType, string, bool) 登录到 QQ API。 Task LoginAsync(int appId, TokenType tokenType, string token, bool validateToken = true) Parameters appId int 要使用的应用 ID。 tokenType TokenType 要使用的令牌类型。 token string 要使用的令牌。 validateToken bool 是否验证令牌。 Returns Task 一个表示异步登录操作的任务。 Remarks 验证令牌的操作是通过 ValidateToken(TokenType, string) 方法完成的。 此方法用于向当前客户端设置后续 API 请求的身份验证信息，获取并设置当前所登录用户的信息。 LogoutAsync() 从 QQ API 退出登录。 Task LogoutAsync() Returns Task 一个表示异步退出登录操作的任务。 Remarks 此方法用于清除当前客户端的身份验证信息及所缓存的当前所登录的用户信息。 StartAsync() 启动客户端与 QQ 之间的连接。 Task StartAsync() Returns Task 一个表示异步启动操作的任务。 Remarks 当前方法会初始化客户端与 QQ 之间的连接。 important 此方法会在调用后立即返回，因为它会在另一个线程上初始化连接。 StopAsync() 停止客户端与 QQ 之间的连接。 Task StopAsync() Returns Task 一个表示异步停止操作的任务。"
  },
  "api/QQBot.IRateLimitInfo.html": {
    "href": "api/QQBot.IRateLimitInfo.html",
    "title": "Interface IRateLimitInfo | QQBot.Net 文档",
    "keywords": "Interface IRateLimitInfo Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的限速信息。 public interface IRateLimitInfo Properties Bucket 获取一个唯一的字符串，表示所遇到的限速桶（不包括路由路径中的主要参数）。 string? Bucket { get; } Property Value string Endpoint 获取此限速信息所属的终结点。 string Endpoint { get; } Property Value string IsGlobal 获取此限速信息是否为全局限速。 bool IsGlobal { get; } Property Value bool Lag 获取请求的延迟，用于支持计算限速重置的精确时间。 TimeSpan? Lag { get; } Property Value TimeSpan? Limit 获取在更新时限内可以进行的请求数量。 int? Limit { get; } Property Value int? Remaining 获取目前可以立即进行的请求数量。 int? Remaining { get; } Property Value int? ResetAfter 获取相对于此刻此限速重置的相对时间间隔。 TimeSpan? ResetAfter { get; } Property Value TimeSpan?"
  },
  "api/QQBot.IRole.html": {
    "href": "api/QQBot.IRole.html",
    "title": "Interface IRole | QQBot.Net 文档",
    "keywords": "Interface IRole Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个频道身份组。 public interface IRole : IEntity<uint> Inherited Members IEntity<uint>.Id Properties Color 获取此身份组的颜色。 AlphaColor Color { get; } Property Value AlphaColor IsHoisted 获取拥有此身份组的用户是否在用户列表中与普通在线成员分开显示。 bool IsHoisted { get; } Property Value bool MaxMembers 获取可以拥有此身份组的最大用户数量。 int MaxMembers { get; } Property Value int MemberCount 获取拥有此身分组的用户数量。 int MemberCount { get; } Property Value int Name 获取此身份组的名称。 string Name { get; } Property Value string Type 获取此身份组的类型。 RoleType Type { get; } Property Value RoleType"
  },
  "api/QQBot.ISelfUser.html": {
    "href": "api/QQBot.ISelfUser.html",
    "title": "Interface ISelfUser | QQBot.Net 文档",
    "keywords": "Interface ISelfUser Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的当前登录的用户信息。 public interface ISelfUser : IGuildUser, IUser, IEntity<string>, IMentionable, IEntity<ulong> Inherited Members IGuildUser.Id IGuildUser.Username IGuildUser.Avatar IGuildUser.IsBot IGuildUser.UnionOpenId IGuildUser.UnionUserAccount IMentionable.Mention"
  },
  "api/QQBot.ITextChannel.html": {
    "href": "api/QQBot.ITextChannel.html",
    "title": "Interface ITextChannel | QQBot.Net 文档",
    "keywords": "Interface ITextChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个文字子频道。 public interface ITextChannel : IMessageChannel, INestedChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong>, IMentionable Inherited Members IMessageChannel.SendMessageAsync(string, IMarkdownContent, FileAttachment?, Embed, Ark, MessageReference, IUserMessage, RequestOptions) INestedChannel.CategoryId INestedChannel.PrivateType INestedChannel.SpeakPermission INestedChannel.Permission IGuildChannel.Id IGuildChannel.Guild IGuildChannel.Name IGuildChannel.GuildId IGuildChannel.Type IGuildChannel.Position IGuildChannel.CreatorId IUpdateable.UpdateAsync(RequestOptions) IMentionable.Mention Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties SubType 获取此子频道的二级分类。 ChannelSubType? SubType { get; } Property Value ChannelSubType?"
  },
  "api/QQBot.IUpdateable.html": {
    "href": "api/QQBot.IUpdateable.html",
    "title": "Interface IUpdateable | QQBot.Net 文档",
    "keywords": "Interface IUpdateable Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个可以被更新的实体对象。 public interface IUpdateable Remarks 更新操作表示的是从 QQ Bot REST API 获取最新数据并替换当前对象的属性，而非修改 QQ Bot 服务端的数据。 Methods UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 QQ Bot REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 QQ Bot 服务端的数据。"
  },
  "api/QQBot.IUser.html": {
    "href": "api/QQBot.IUser.html",
    "title": "Interface IUser | QQBot.Net 文档",
    "keywords": "Interface IUser Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的用户。 public interface IUser : IEntity<string>, IMentionable Inherited Members IEntity<string>.Id IMentionable.Mention"
  },
  "api/QQBot.IUserChannel.html": {
    "href": "api/QQBot.IUserChannel.html",
    "title": "Interface IUserChannel | QQBot.Net 文档",
    "keywords": "Interface IUserChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个用户单聊频道。 public interface IUserChannel : IMessageChannel, IPrivateChannel, IChannel, IEntity<string>, IEntity<Guid> Inherited Members IMessageChannel.SendMessageAsync(string, IMarkdownContent, FileAttachment?, Embed, Ark, MessageReference, IUserMessage, RequestOptions) IPrivateChannel.Recipients Extension Methods ChannelExtensions.GetChannelType(IChannel) Remarks 这可以包括 QQ 好友发起的聊天，或 QQ 群内用户发起的私聊，不包括子频道内用户发起的私聊。 Properties Id 获取此用户单聊频道的唯一标识符。 Guid Id { get; } Property Value Guid"
  },
  "api/QQBot.IUserMessage.html": {
    "href": "api/QQBot.IUserMessage.html",
    "title": "Interface IUserMessage | QQBot.Net 文档",
    "keywords": "Interface IUserMessage Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个通用的由用户发送的消息。 public interface IUserMessage : IMessage, IEntity<string> Inherited Members IMessage.Channel IMessage.Author IMessage.Source IMessage.Content IMessage.Timestamp IMessage.Attachments IMessage.MentionedEveryone IMessage.Embeds IEntity<string>.Id Extension Methods MessageExtensions.ReplyAsync(IUserMessage, string?, IMarkdownContent?, FileAttachment?, Embed?, Ark?, MessageReference?, RequestOptions?)"
  },
  "api/QQBot.IVoiceChannel.html": {
    "href": "api/QQBot.IVoiceChannel.html",
    "title": "Interface IVoiceChannel | QQBot.Net 文档",
    "keywords": "Interface IVoiceChannel Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个语音子频道。 public interface IVoiceChannel : INestedChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inherited Members INestedChannel.CategoryId INestedChannel.PrivateType INestedChannel.SpeakPermission INestedChannel.Permission IGuildChannel.Id IGuildChannel.Guild IGuildChannel.Name IGuildChannel.GuildId IGuildChannel.Type IGuildChannel.Position IGuildChannel.CreatorId IUpdateable.UpdateAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/QQBot.KeyboardActionAnchor.html": {
    "href": "api/QQBot.KeyboardActionAnchor.html",
    "title": "Enum KeyboardActionAnchor | QQBot.Net 文档",
    "keywords": "Enum KeyboardActionAnchor Namespace QQBot Assembly QQBot.Net.Core.dll 表示键盘按钮的特殊操作。 public enum KeyboardActionAnchor Fields PickImage = 0 点击按钮自动唤起启手Q选图器"
  },
  "api/QQBot.KeyboardActionType.html": {
    "href": "api/QQBot.KeyboardActionType.html",
    "title": "Enum KeyboardActionType | QQBot.Net 文档",
    "keywords": "Enum KeyboardActionType Namespace QQBot Assembly QQBot.Net.Core.dll 表示键盘按钮的动作类型。 public enum KeyboardActionType Fields Callback = 1 回调按钮 Command = 2 指令按钮 Jump = 0 跳转按钮"
  },
  "api/QQBot.KeyboardButtonStyle.html": {
    "href": "api/QQBot.KeyboardButtonStyle.html",
    "title": "Enum KeyboardButtonStyle | QQBot.Net 文档",
    "keywords": "Enum KeyboardButtonStyle Namespace QQBot Assembly QQBot.Net.Core.dll 表示键盘按钮的样式。 public enum KeyboardButtonStyle Fields Blue = 1 蓝色线框 Gray = 0 灰色线框"
  },
  "api/QQBot.KeyboardPermissionType.html": {
    "href": "api/QQBot.KeyboardPermissionType.html",
    "title": "Enum KeyboardPermissionType | QQBot.Net 文档",
    "keywords": "Enum KeyboardPermissionType Namespace QQBot Assembly QQBot.Net.Core.dll 表示键盘按钮的权限类型。 public enum KeyboardPermissionType Fields AdministratorOnly = 1 仅管理者可操作 Everyone = 2 所有人可操作 SpecificRole = 3 指定身份组可操作（仅频道可用） SpecificUser = 0 指定用户可操作"
  },
  "api/QQBot.LogMessage.html": {
    "href": "api/QQBot.LogMessage.html",
    "title": "Struct LogMessage | QQBot.Net 文档",
    "keywords": "Struct LogMessage Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个用于记录日志的消息对象。 public readonly struct LogMessage Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LogMessage(LogSeverity, string, string?, Exception?) 使用事件的严重性、来源、消息和可选的异常初始化 LogMessage 结构。 public LogMessage(LogSeverity severity, string source, string? message, Exception? exception = null) Parameters severity LogSeverity 事件的严重性。 source string 事件的来源。 message string 事件的消息。 exception Exception 事件的异常。 Properties Exception 获取此日志条目的异常。 public Exception? Exception { get; } Property Value Exception Message 获取日志记录的消息。 public string? Message { get; } Property Value string Severity 获取日志记录的严重性。 public LogSeverity Severity { get; } Property Value LogSeverity Source 获取日志记录的来源。 public string Source { get; } Property Value string Methods ToString() 返回此日志消息的字符串表示形式。 public override string ToString() Returns string 此日志消息的字符串表示形式。 ToString(StringBuilder?, bool, bool, DateTimeKind, int?) 返回此日志消息的字符串表示形式。 public string ToString(StringBuilder? builder = null, bool fullException = true, bool prependTimestamp = true, DateTimeKind timestampKind = DateTimeKind.Local, int? padSource = 11) Parameters builder StringBuilder 要使用的字符串构建器。 fullException bool 是否在字符串中包含完整的异常信息。 prependTimestamp bool 是否在字符串前添加时间戳。 timestampKind DateTimeKind 要使用的时间戳类型。 padSource int? 源字符串的填充量。 Returns string 此日志消息的字符串表示形式。"
  },
  "api/QQBot.LogSeverity.html": {
    "href": "api/QQBot.LogSeverity.html",
    "title": "Enum LogSeverity | QQBot.Net 文档",
    "keywords": "Enum LogSeverity Namespace QQBot Assembly QQBot.Net.Core.dll 表示日志消息的严重性。 public enum LogSeverity Fields Critical = 0 记录包含最高严重级别错误的日志，这类错误可能需要立即关注。 Debug = 5 记录任何日志，包括最详细的诊断日志。 Error = 1 记录在执行流程因故障而停止时的日志。 Info = 3 记录跟踪应用程序的一般流程的日志。 Verbose = 4 记录用于在开发过程中进行交互式调查的日志。 Warning = 2 记录在执行流程中出现的异常活动。"
  },
  "api/QQBot.LoginState.html": {
    "href": "api/QQBot.LoginState.html",
    "title": "Enum LoginState | QQBot.Net 文档",
    "keywords": "Enum LoginState Namespace QQBot Assembly QQBot.Net.Core.dll 表示客户端的登录状态。 public enum LoginState : byte Fields LoggedIn = 2 已登录。 LoggedOut = 0 已退出登录。 LoggingIn = 1 正在登录。 LoggingOut = 3 正在退出登录。"
  },
  "api/QQBot.MarkdownTemplateContent.html": {
    "href": "api/QQBot.MarkdownTemplateContent.html",
    "title": "Class MarkdownTemplateContent | QQBot.Net 文档",
    "keywords": "Class MarkdownTemplateContent Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个 Markdown 模板。 public class MarkdownTemplateContent : IMarkdownContent, IEquatable<MarkdownTemplateContent> Inheritance object MarkdownTemplateContent Implements IMarkdownContent IEquatable<MarkdownTemplateContent> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Parameters 获取 Markdown 模板内容的参数。 public IReadOnlyDictionary<string, IReadOnlyCollection<string>> Parameters { get; } Property Value IReadOnlyDictionary<string, IReadOnlyCollection<string>> TemplateId 获取模板的 ID。 public string TemplateId { get; } Property Value string Methods Equals(MarkdownTemplateContent?) Indicates whether the current object is equal to another object of the same type. public bool Equals(MarkdownTemplateContent? other) Parameters other MarkdownTemplateContent An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(MarkdownTemplateContent?, MarkdownTemplateContent?) 确定两个 MarkdownTemplateContent 实例是否相等。 public static bool operator ==(MarkdownTemplateContent? left, MarkdownTemplateContent? right) Parameters left MarkdownTemplateContent 要比较的第一个实例。 right MarkdownTemplateContent 要比较的第二个实例。 Returns bool 如果两个实例相等，则为 true；否则为 false。 operator !=(MarkdownTemplateContent?, MarkdownTemplateContent?) 确定两个 MarkdownTemplateContent 实例是否不相等。 public static bool operator !=(MarkdownTemplateContent? left, MarkdownTemplateContent? right) Parameters left MarkdownTemplateContent 要比较的第一个实例。 right MarkdownTemplateContent 要比较的第二个实例。 Returns bool 如果两个实例不相等，则为 true；否则为 false。"
  },
  "api/QQBot.MarkdownTemplateContentBuilder.html": {
    "href": "api/QQBot.MarkdownTemplateContentBuilder.html",
    "title": "Class MarkdownTemplateContentBuilder | QQBot.Net 文档",
    "keywords": "Class MarkdownTemplateContentBuilder Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个用于创建 MarkdownTemplateContent 实例的构建器。 public class MarkdownTemplateContentBuilder : IMarkdownContentBuilder, IEquatable<MarkdownTextContentBuilder> Inheritance object MarkdownTemplateContentBuilder Implements IMarkdownContentBuilder IEquatable<MarkdownTextContentBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MarkdownTemplateContentBuilder(string) 初始化一个 MarkdownTemplateContentBuilder 类的新实例。 public MarkdownTemplateContentBuilder(string templateId) Parameters templateId string 模板的 ID。 Properties Parameters 获取或设置 Markdown 模板内容的参数。 public Dictionary<string, IReadOnlyCollection<string>> Parameters { get; set; } Property Value Dictionary<string, IReadOnlyCollection<string>> TemplateId 获取或设置模板的 ID。 public string TemplateId { get; set; } Property Value string Methods AddParameter(string, IEnumerable<string>) 添加一个参数到 Markdown 模板内容中。 public void AddParameter(string key, IEnumerable<string> values) Parameters key string 参数的键。 values IEnumerable<string> 参数的值。 AddParameter(string, params string[]) 添加一个参数到 Markdown 模板内容中。 public void AddParameter(string key, params string[] values) Parameters key string 参数的键。 values string[] 参数的值。 AppendParameter(string, IEnumerable<string>) 添加参数值到 Markdown 模板内容参数列表中具有指定键的参数值列表的末尾。 public void AppendParameter(string key, IEnumerable<string> values) Parameters key string 参数的键。 values IEnumerable<string> 参数的值。 AppendParameter(string, params string[]) 添加参数值到 Markdown 模板内容参数列表中具有指定键的参数值列表的末尾。 public void AppendParameter(string key, params string[] values) Parameters key string 参数的键。 values string[] 参数的值。 Build() 将当前构建器构建为一个 IMarkdownContent 实例。 public MarkdownTemplateContent Build() Returns MarkdownTemplateContent IMarkdownContent 实例。 Equals(MarkdownTextContentBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(MarkdownTextContentBuilder? other) Parameters other MarkdownTextContentBuilder An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/QQBot.MarkdownTextContent.html": {
    "href": "api/QQBot.MarkdownTextContent.html",
    "title": "Class MarkdownTextContent | QQBot.Net 文档",
    "keywords": "Class MarkdownTextContent Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个 Markdown 文本内容。 public class MarkdownTextContent : IMarkdownContent, IEquatable<MarkdownTextContent> Inheritance object MarkdownTextContent Implements IMarkdownContent IEquatable<MarkdownTextContent> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Text 获取 Markdown 文本内容。 public string Text { get; } Property Value string Methods Equals(MarkdownTextContent?) Indicates whether the current object is equal to another object of the same type. public bool Equals(MarkdownTextContent? other) Parameters other MarkdownTextContent An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(MarkdownTextContent?, MarkdownTextContent?) 确定两个 MarkdownTextContent 实例是否相等。 public static bool operator ==(MarkdownTextContent? left, MarkdownTextContent? right) Parameters left MarkdownTextContent 要比较的第一个实例。 right MarkdownTextContent 要比较的第二个实例。 Returns bool 如果两个实例相等，则为 true；否则为 false。 operator !=(MarkdownTextContent?, MarkdownTextContent?) 确定两个 MarkdownTextContent 实例是否不相等。 public static bool operator !=(MarkdownTextContent? left, MarkdownTextContent? right) Parameters left MarkdownTextContent 要比较的第一个实例。 right MarkdownTextContent 要比较的第二个实例。 Returns bool 如果两个实例不相等，则为 true；否则为 false。"
  },
  "api/QQBot.MarkdownTextContentBuilder.html": {
    "href": "api/QQBot.MarkdownTextContentBuilder.html",
    "title": "Class MarkdownTextContentBuilder | QQBot.Net 文档",
    "keywords": "Class MarkdownTextContentBuilder Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个用于创建 MarkdownTextContent 实例的构建器。 public class MarkdownTextContentBuilder : IMarkdownContentBuilder, IEquatable<MarkdownTextContentBuilder> Inheritance object MarkdownTextContentBuilder Implements IMarkdownContentBuilder IEquatable<MarkdownTextContentBuilder> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MarkdownTextContentBuilder() 初始化一个 MarkdownTextContentBuilder 类的新实例。 public MarkdownTextContentBuilder() MarkdownTextContentBuilder(string) 初始化一个 MarkdownTextContentBuilder 类的新实例。 public MarkdownTextContentBuilder(string text) Parameters text string Markdown 文本内容。 MarkdownTextContentBuilder(StringBuilder) 初始化一个 MarkdownTextContentBuilder 类的新实例。 public MarkdownTextContentBuilder(StringBuilder textBuilder) Parameters textBuilder StringBuilder 用于构建 Markdown 文本内容的 StringBuilder 实例。 Properties Text 获取或设置 Markdown 文本内容。 public string Text { get; set; } Property Value string Methods Append(string) 将指定的文本追加到当前构建器的文本内容中。 public void Append(string text) Parameters text string AppendBlockQuote(string) 将指定的文本格式化为块引用并追加到当前构建器的文本内容中。 public void AppendBlockQuote(string text) Parameters text string 要追加的文本。 See Also BlockQuote(string) AppendBold(string, bool) 将指定的文本格式化为粗体并追加到当前构建器的文本内容中。 public void AppendBold(string text, bool sanitize = true) Parameters text string 要追加的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 See Also Bold(string, bool) AppendBoldItalics(string, bool) 将指定的文本格式化为粗斜体并追加到当前构建器的文本内容中。 public void AppendBoldItalics(string text, bool sanitize = true) Parameters text string 要追加的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 See Also BoldItalics(string, bool) AppendH1(string) 将指定的文本格式化为一级标题并追加到当前构建器的文本内容中。 public void AppendH1(string text) Parameters text string 要追加的文本。 See Also H1(string) AppendH2(string) 将指定的文本格式化为二级标题并追加到当前构建器的文本内容中。 public void AppendH2(string text) Parameters text string 要追加的文本。 See Also H2(string) AppendHorizontalRule() 将水平分割线追加到当前构建器的文本内容中。 public void AppendHorizontalRule() See Also HorizontalRule() AppendImage(FileAttachment, Size?) 将指定的图片附件格式化为图片并追加到当前构建器的文本内容中。 public void AppendImage(FileAttachment attachment, Size? size = null) Parameters attachment FileAttachment 图片的附件信息。 size Size? 图片的尺寸。 See Also Image(FileAttachment, Size?) AppendImage(string) 将指定的图片 URL 格式化为图片并追加到当前构建器的文本内容中。 public void AppendImage(string url) Parameters url string 图片的 URL。 See Also Image(string) AppendImage(string, string, Size?) 将指定的图片 URL 格式化为图片并追加到当前构建器的文本内容中。 public void AppendImage(string url, string alternative, Size? size = null) Parameters url string 图片的 URL。 alternative string 图片的替代文本。 size Size? 图片的尺寸。 See Also Image(string, string, Size?) AppendImage(Uri) 将指定的图片 URL 格式化为图片并追加到当前构建器的文本内容中。 public void AppendImage(Uri url) Parameters url Uri 图片的 URL。 See Also Image(Uri) AppendImage(Uri, string, Size?) 将指定的图片 URL 格式化为图片并追加到当前构建器的文本内容中。 public void AppendImage(Uri url, string alternative, Size? size = null) Parameters url Uri 图片的 URL。 alternative string 图片的替代文本。 size Size? 图片的尺寸。 See Also Image(Uri, string, Size?) AppendItalics(string, bool) 将指定的文本格式化为斜体并追加到当前构建器的文本内容中。 public void AppendItalics(string text, bool sanitize = true) Parameters text string 要追加的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 See Also Italics(string, bool) AppendNewLine(int) 将指定数量的换行符追加到当前构建器的文本内容中。 public void AppendNewLine(int count = 1) Parameters count int 要追加的换行数量。 See Also NewLine(int) AppendOrderedList(IEnumerable<string>, int) 将指定的有序列表格式化为 Markdown 列表并追加到当前构建器的文本内容中。 public void AppendOrderedList(IEnumerable<string> items, int indentLevel = 0) Parameters items IEnumerable<string> 要追加的列表项。 indentLevel int 列表项的缩进级别。 See Also OrderedList(IEnumerable<string>, int) AppendStrikethrough(string, bool) 将指定的文本格式化为删除线并追加到当前构建器的文本内容中。 public void AppendStrikethrough(string text, bool sanitize = true) Parameters text string 要追加的文本。 sanitize bool 是否要先对 text 中与当前格式化操作有冲突的字符进行转义。 See Also Strikethrough(string, bool) AppendUnorderedList(IEnumerable<string>, int) 将指定的无序列表格式化为 Markdown 列表并追加到当前构建器的文本内容中。 public void AppendUnorderedList(IEnumerable<string> items, int indentLevel = 0) Parameters items IEnumerable<string> 要追加的列表项。 indentLevel int 列表项的缩进级别。 See Also UnorderedList(IEnumerable<string>, int) AppendUrl(string, bool) 将指定的 URL 格式化为链接并追加到当前构建器的文本内容中。 public void AppendUrl(string url, bool sanitize = true) Parameters url string 要链接到的 URL。 sanitize bool 是否要先对 url 中与当前格式化操作有冲突的字符进行转义。 See Also Url(string, bool) AppendUrl(string, string, bool) 将指定的 URL 格式化为链接并追加到当前构建器的文本内容中。 public void AppendUrl(string url, string text, bool sanitize = true) Parameters url string 要链接到的 URL。 text string 要显示的文本。 sanitize bool 是否要先对 text 与 url 中与当前格式化操作有冲突的字符进行转义。 See Also Url(string, string, bool) AppendUrl(Uri, bool) 将指定的 URL 格式化为链接并追加到当前构建器的文本内容中。 public void AppendUrl(Uri url, bool sanitize = true) Parameters url Uri 要链接到的 URL。 sanitize bool 是否要先对 url 中与当前格式化操作有冲突的字符进行转义。 See Also Url(Uri, bool) AppendUrl(Uri, string, bool) 将指定的 URL 格式化为链接并追加到当前构建器的文本内容中。 public void AppendUrl(Uri url, string text, bool sanitize = true) Parameters url Uri 要链接到的 URL。 text string 要显示的文本。 sanitize bool 是否要先对 text 与 url 中与当前格式化操作有冲突的字符进行转义。 See Also Url(Uri, string, bool) Build() 将当前构建器构建为一个 IMarkdownContent 实例。 public MarkdownTextContent Build() Returns MarkdownTextContent IMarkdownContent 实例。 Equals(MarkdownTextContentBuilder?) Indicates whether the current object is equal to another object of the same type. public bool Equals(MarkdownTextContentBuilder? other) Parameters other MarkdownTextContentBuilder An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(MarkdownTextContentBuilder?, MarkdownTextContentBuilder?) 确定两个 MarkdownTextContentBuilder 实例是否相等。 public static bool operator ==(MarkdownTextContentBuilder? left, MarkdownTextContentBuilder? right) Parameters left MarkdownTextContentBuilder 要比较的第一个实例。 right MarkdownTextContentBuilder 要比较的第二个实例。 Returns bool 如果两个实例相等，则为 true；否则为 false。 operator !=(MarkdownTextContentBuilder?, MarkdownTextContentBuilder?) 确定两个 MarkdownTextContentBuilder 实例是否不相等。 public static bool operator !=(MarkdownTextContentBuilder? left, MarkdownTextContentBuilder? right) Parameters left MarkdownTextContentBuilder 要比较的第一个实例。 right MarkdownTextContentBuilder 要比较的第二个实例。 Returns bool 如果两个实例不相等，则为 true；否则为 false。"
  },
  "api/QQBot.MediaFileInfo.html": {
    "href": "api/QQBot.MediaFileInfo.html",
    "title": "Struct MediaFileInfo | QQBot.Net 文档",
    "keywords": "Struct MediaFileInfo Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个富媒体文件信息。 public readonly record struct MediaFileInfo : IEquatable<MediaFileInfo> Implements IEquatable<MediaFileInfo> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties AttachmentType 获取此富媒体文件信息的类型。 public required AttachmentType AttachmentType { get; init; } Property Value AttachmentType CreatedAt 获取此富媒体文件信息的创建时间。 public DateTimeOffset? CreatedAt { get; } Property Value DateTimeOffset? ExpiresAt 获取此富媒体文件信息的过期时间，如果为 null 则表示过期时间未知，或永不过期。 public DateTimeOffset? ExpiresAt { get; } Property Value DateTimeOffset? FileId 获取此富媒体文件信息的 ID。 public string? FileId { get; } Property Value string FileInfo 获取此富媒体文件信息的文件信息。 public required string FileInfo { get; init; } Property Value string HasExpired 获取一个值，指示此富媒体文件信息是否已经过期；如果为 null 则表示过期时间未知，或永不过期。 public bool? HasExpired { get; } Property Value bool? LifeTime 获取此富媒体文件信息的存活时间。 public TimeSpan? LifeTime { get; } Property Value TimeSpan?"
  },
  "api/QQBot.MentionUtils.html": {
    "href": "api/QQBot.MentionUtils.html",
    "title": "Class MentionUtils | QQBot.Net 文档",
    "keywords": "Class MentionUtils Namespace QQBot Assembly QQBot.Net.Core.dll 提供一组用于生成与解析提及标签的辅助方法。 public static class MentionUtils Inheritance object MentionUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MentionChannel(ITextChannel) 返回频道的 Markdown 格式化频道提及字符串。 public static string MentionChannel(ITextChannel channel) Parameters channel ITextChannel 频道。 Returns string 格式化为 Markdown 的频道提及字符串。 MentionChannel(ulong) 返回频道的 Markdown 格式化频道提及字符串。 public static string MentionChannel(ulong id) Parameters id ulong 频道 ID。 Returns string 格式化为 Markdown 的频道提及字符串。 MentionUser(IUser) 返回用户的 Markdown 格式化用户提及字符串。 public static string MentionUser(IUser user) Parameters user IUser 用户。 Returns string 格式化为 Markdown 的用户提及字符串。 MentionUser(string) 返回用户的 Markdown 格式化用户提及字符串。 public static string MentionUser(string id) Parameters id string 用户 ID。 Returns string 格式化为 Markdown 的用户提及字符串。"
  },
  "api/QQBot.MessageExtensions.html": {
    "href": "api/QQBot.MessageExtensions.html",
    "title": "Class MessageExtensions | QQBot.Net 文档",
    "keywords": "Class MessageExtensions Namespace QQBot Assembly QQBot.Net.Core.dll 提供用于各种消息实体的扩展方法。 public static class MessageExtensions Inheritance object MessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReplyAsync(IUserMessage, string?, IMarkdownContent?, FileAttachment?, Embed?, Ark?, MessageReference?, RequestOptions?) 向消息所属的频道回复文字消息。 public static Task<Cacheable<IUserMessage, string>> ReplyAsync(this IUserMessage message, string? content = null, IMarkdownContent? markdown = null, FileAttachment? attachment = null, Embed? embed = null, Ark? ark = null, MessageReference? messageReference = null, RequestOptions? options = null) Parameters message IUserMessage 要回复的消息。 content string 要发送的消息内容。 markdown IMarkdownContent 要回复的 Markdown 消息内容。 attachment FileAttachment? 要发送的文件附件。 embed Embed 要发送的嵌入式消息内容。 ark Ark 要发送的模板消息内容。 messageReference MessageReference 消息引用，用于回复消息。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, string>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。"
  },
  "api/QQBot.MessageReference.html": {
    "href": "api/QQBot.MessageReference.html",
    "title": "Class MessageReference | QQBot.Net 文档",
    "keywords": "Class MessageReference Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个消息引用。 public class MessageReference Inheritance object MessageReference Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageReference(string, bool?) 使用指定的消息 ID 创建一个新的 MessageReference 实例。 public MessageReference(string messageId, bool? failIfNotExists = null) Parameters messageId string 要引用的消息的 ID。 failIfNotExists bool? 是否在引用的消息不存在时引发错误而不是发送为普通消息，未指定时同 true。 Properties FailIfNotExists 获取或设置是否在引用的消息不存在时引发错误而不是发送为普通消息，未指定时同 true。 public bool? FailIfNotExists { get; } Property Value bool? MessageId 获取要引用的消息的 ID。 public string MessageId { get; } Property Value string"
  },
  "api/QQBot.MessageSource.html": {
    "href": "api/QQBot.MessageSource.html",
    "title": "Enum MessageSource | QQBot.Net 文档",
    "keywords": "Enum MessageSource Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个消息的来源。 public enum MessageSource Fields Bot = 1 消息由机器人发送。 User = 0 消息由用户发送。"
  },
  "api/QQBot.MessageType.html": {
    "href": "api/QQBot.MessageType.html",
    "title": "Enum MessageType | QQBot.Net 文档",
    "keywords": "Enum MessageType Namespace QQBot Assembly QQBot.Net.Core.dll 表示消息的类型。 public enum MessageType Fields Ark = 3 Ark 消息。 Embed = 4 Embed 消息。 Markdown = 2 Markdown 消息。 Media = 7 富媒体消息。 Text = 0 文本消息。"
  },
  "api/QQBot.Net.BucketId.html": {
    "href": "api/QQBot.Net.BucketId.html",
    "title": "Class BucketId | QQBot.Net 文档",
    "keywords": "Class BucketId Namespace QQBot.Net Assembly QQBot.Net.Core.dll 表示一个限速桶。 public sealed class BucketId : IEquatable<BucketId> Inheritance object BucketId Implements IEquatable<BucketId> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BucketHash 获取此桶的哈希值。 public string? BucketHash { get; } Property Value string Remarks 此哈希值由 QQBot 提供，用于分组限速。 Endpoint 获取将要请求的终结点（如果可用）。 public string? Endpoint { get; } Property Value string HttpMethod 获取用于发起请求的 HTTP 方法（如果可用）。 public HttpMethod? HttpMethod { get; } Property Value HttpMethod IsHashBucket 获取此限速桶是否为哈希分组限速桶。 public bool IsHashBucket { get; } Property Value bool MajorParameters 获取路由的主要参数。 public IOrderedEnumerable<KeyValuePair<string, string>> MajorParameters { get; } Property Value IOrderedEnumerable<KeyValuePair<string, string>> Methods Create(HttpMethod?, string?, Dictionary<string, string>?) 基于 HttpMethod 和 Endpoint 创建一个新的 BucketId。 public static BucketId Create(HttpMethod? httpMethod, string? endpoint, Dictionary<string, string>? majorParams) Parameters httpMethod HttpMethod 用于发送请求的 HTTP 方法。 endpoint string 请求的终结点。 majorParams Dictionary<string, string> 终结点的主要路由参数。 Returns BucketId 一个基于指定的 HttpMethod 和 Endpoint 创建的 BucketId。 Create(string, BucketId) 基于 BucketHash 和之前的 BucketId 创建一个新的 BucketId。 public static BucketId Create(string hash, BucketId oldBucket) Parameters hash string 由 QQBot 提供的分组限速哈希值。 oldBucket BucketId 要被升级为哈希分组限速桶的已有限速桶。 Returns BucketId 一个基于指定的 BucketHash 和之前的 BucketId 创建的 BucketId。 Equals(BucketId?) Indicates whether the current object is equal to another object of the same type. public bool Equals(BucketId? other) Parameters other BucketId An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetBucketHash() 获取将此桶定义为哈希分组限速桶的字符串。 public string? GetBucketHash() Returns string 如果此桶是哈希分组限速桶，则返回此桶的哈希值；否则返回 null。 GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetUniqueEndpoint() 获取将此桶定义为终结点限速桶的字符串。 public string? GetUniqueEndpoint() Returns string 如果此桶是终结点限速桶，则返回此桶的终结点；否则返回 null。 ToString() Returns a string that represents the current object. public override string? ToString() Returns string A string that represents the current object."
  },
  "api/QQBot.Net.HttpException.html": {
    "href": "api/QQBot.Net.HttpException.html",
    "title": "Class HttpException | QQBot.Net 文档",
    "keywords": "Class HttpException Namespace QQBot.Net Assembly QQBot.Net.Core.dll 当处理 QQBot HTTP 请求时发生错误时引发的异常。 public class HttpException : Exception, ISerializable Inheritance object Exception HttpException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HttpException(HttpStatusCode, IRequest, QQBotErrorCode?, string?, int?, string?) 初始化一个 HttpException 类的新实例。 public HttpException(HttpStatusCode httpCode, IRequest request, QQBotErrorCode? qqBotCode = null, string? reason = null, int? errorCode = null, string? traceId = null) Parameters httpCode HttpStatusCode 返回的 HTTP 状态码。 request IRequest 引发异常前发送的请求。 qqBotCode QQBotErrorCode? 由 QQBot 返回的 JSON 负载中解析出的状态码。 reason string 引发异常的原因。 errorCode int? 错误码。 traceId string 跟踪 ID。 Properties ErrorCode 获取错误代码。 public int? ErrorCode { get; } Property Value int? HttpCode 获取 QQBot 返回的 HTTP 状态码。 public HttpStatusCode HttpCode { get; } Property Value HttpStatusCode QQBotCode 获取由 QQBot 返回的 JSON 负载中的错误代码；也有可能是表示操作成功的代码； 如果无法从响应中解析出错误代码，则为 null。 public QQBotErrorCode? QQBotCode { get; } Property Value QQBotErrorCode? Reason 获取异常的原因；也有可能是表示操作成功的消息；如果无法从响应中解析出原因，则为 null。 public string? Reason { get; } Property Value string Request 获取用于发送请求的请求对象。 public IRequest Request { get; } Property Value IRequest TraceId 获取跟踪 ID。 public string? TraceId { get; } Property Value string"
  },
  "api/QQBot.Net.IRequest.html": {
    "href": "api/QQBot.Net.IRequest.html",
    "title": "Interface IRequest | QQBot.Net 文档",
    "keywords": "Interface IRequest Namespace QQBot.Net Assembly QQBot.Net.Core.dll 表示一个要发送到 QQ 的通用的请求。 public interface IRequest Properties Options 获取发送请求时要使用的选项。 RequestOptions Options { get; } Property Value RequestOptions TimeoutAt 获取请求在超时之前应等待的时间。 DateTimeOffset? TimeoutAt { get; } Property Value DateTimeOffset?"
  },
  "api/QQBot.Net.Queue.BaseMessageQueue.html": {
    "href": "api/QQBot.Net.Queue.BaseMessageQueue.html",
    "title": "Class BaseMessageQueue | QQBot.Net 文档",
    "keywords": "Class BaseMessageQueue Namespace QQBot.Net.Queue Assembly QQBot.Net.Core.dll 表示一个通用的消息队列抽象类。 public abstract class BaseMessageQueue : IMessageQueue Inheritance object BaseMessageQueue Implements IMessageQueue Derived SynchronousImmediateMessageQueue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseMessageQueue(Func<int, string, object, Task>) 初始化一个 BaseMessageQueue 类的新实例。 protected BaseMessageQueue(Func<int, string, object, Task> eventHandler) Parameters eventHandler Func<int, string, object, Task> 用于处理消息的事件处理程序。 Properties EventHandler 获取消息队列的事件处理程序。 protected Func<int, string, object, Task> EventHandler { get; } Property Value Func<int, string, object, Task> Methods EnqueueAsync(int, string, object, CancellationToken) 将网关消息添加到队列中。 public abstract Task EnqueueAsync(int sequence, string type, object payload, CancellationToken cancellationToken = default) Parameters sequence int 网关消息的序号。 type string 网关消息的类型。 payload object 网关消息的有效负载。 cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步入队操作的任务。 StartAsync(CancellationToken) 启动消息队列的处理。 public abstract Task StartAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步启动操作的任务。 StopAsync(CancellationToken) 停止消息队列的处理。 public abstract Task StopAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步停止操作的任务。"
  },
  "api/QQBot.Net.Queue.IMessageQueue.html": {
    "href": "api/QQBot.Net.Queue.IMessageQueue.html",
    "title": "Interface IMessageQueue | QQBot.Net 文档",
    "keywords": "Interface IMessageQueue Namespace QQBot.Net.Queue Assembly QQBot.Net.Core.dll 表示一个消息队列，用于从 QQ 机器人网关接收并处理事件。 public interface IMessageQueue Methods EnqueueAsync(int, string, object, CancellationToken) 将网关消息添加到队列中。 Task EnqueueAsync(int sequence, string type, object payload, CancellationToken cancellationToken = default) Parameters sequence int 网关消息的序号。 type string 网关消息的类型。 payload object 网关消息的有效负载。 cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步入队操作的任务。"
  },
  "api/QQBot.Net.Queue.MessageQueueProvider.html": {
    "href": "api/QQBot.Net.Queue.MessageQueueProvider.html",
    "title": "Delegate MessageQueueProvider | QQBot.Net 文档",
    "keywords": "Delegate MessageQueueProvider Namespace QQBot.Net.Queue Assembly QQBot.Net.Core.dll 表示一个提供新的 IMessageQueue 实例的委托。 public delegate BaseMessageQueue MessageQueueProvider(Func<int, string, object, Task> eventHandler) Parameters eventHandler Func<int, string, object, Task> 表示一个提供新的 实例的委托。 Returns BaseMessageQueue 表示一个提供新的 实例的委托。"
  },
  "api/QQBot.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueue.html": {
    "href": "api/QQBot.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueue.html",
    "title": "Class SynchronousImmediateMessageQueue | QQBot.Net 文档",
    "keywords": "Class SynchronousImmediateMessageQueue Namespace QQBot.Net.Queue.SynchronousImmediate Assembly QQBot.Net.Core.dll 表示一个同步处理消息队列。 public class SynchronousImmediateMessageQueue : BaseMessageQueue, IMessageQueue Inheritance object BaseMessageQueue SynchronousImmediateMessageQueue Implements IMessageQueue Inherited Members BaseMessageQueue.EventHandler object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 此消息队列会在接收到网关事件后调用 EnqueueAsync(int, string, object, CancellationToken) 时立即使用构造函数中传入的 eventHandler 委托同步进行处理，处理完成后，该方法才会返回。 Constructors SynchronousImmediateMessageQueue(Func<int, string, object, Task>) 初始化一个 BaseMessageQueue 类的新实例。 public SynchronousImmediateMessageQueue(Func<int, string, object, Task> eventHandler) Parameters eventHandler Func<int, string, object, Task> 用于处理消息的事件处理程序。 Methods EnqueueAsync(int, string, object, CancellationToken) 将网关消息添加到队列中。 public override Task EnqueueAsync(int sequence, string type, object payload, CancellationToken cancellationToken = default) Parameters sequence int 网关消息的序号。 type string 网关消息的类型。 payload object 网关消息的有效负载。 cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步入队操作的任务。 StartAsync(CancellationToken) 启动消息队列的处理。 public override Task StartAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步启动操作的任务。 StopAsync(CancellationToken) 停止消息队列的处理。 public override Task StopAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken 用于取消该操作的取消令牌。 Returns Task 表示一个异步停止操作的任务。"
  },
  "api/QQBot.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueueProvider.html": {
    "href": "api/QQBot.Net.Queue.SynchronousImmediate.SynchronousImmediateMessageQueueProvider.html",
    "title": "Class SynchronousImmediateMessageQueueProvider | QQBot.Net 文档",
    "keywords": "Class SynchronousImmediateMessageQueueProvider Namespace QQBot.Net.Queue.SynchronousImmediate Assembly QQBot.Net.Core.dll 表示一个默认的使用同步处理机制的 MessageQueueProvider，用于创建 SynchronousImmediateMessageQueue 实例。 public static class SynchronousImmediateMessageQueueProvider Inheritance object SynchronousImmediateMessageQueueProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance 创建一个新的用于创建默认的使用同步处理机制的 SynchronousImmediateMessageQueue 实例的委托。 public static readonly MessageQueueProvider Instance Field Value MessageQueueProvider Exceptions PlatformNotSupportedException 当默认的 SynchronousImmediateMessageQueueProvider 在当前平台上不受支持时引发。"
  },
  "api/QQBot.Net.Queue.SynchronousImmediate.html": {
    "href": "api/QQBot.Net.Queue.SynchronousImmediate.html",
    "title": "Namespace QQBot.Net.Queue.SynchronousImmediate | QQBot.Net 文档",
    "keywords": "Namespace QQBot.Net.Queue.SynchronousImmediate Classes SynchronousImmediateMessageQueue 表示一个同步处理消息队列。 SynchronousImmediateMessageQueueProvider 表示一个默认的使用同步处理机制的 MessageQueueProvider，用于创建 SynchronousImmediateMessageQueue 实例。"
  },
  "api/QQBot.Net.Queue.html": {
    "href": "api/QQBot.Net.Queue.html",
    "title": "Namespace QQBot.Net.Queue | QQBot.Net 文档",
    "keywords": "Namespace QQBot.Net.Queue Classes BaseMessageQueue 表示一个通用的消息队列抽象类。 Interfaces IMessageQueue 表示一个消息队列，用于从 QQ 机器人网关接收并处理事件。 Delegates MessageQueueProvider 表示一个提供新的 IMessageQueue 实例的委托。"
  },
  "api/QQBot.Net.RateLimitInfo.html": {
    "href": "api/QQBot.Net.RateLimitInfo.html",
    "title": "Struct RateLimitInfo | QQBot.Net 文档",
    "keywords": "Struct RateLimitInfo Namespace QQBot.Net Assembly QQBot.Net.Rest.dll 表示一个基于 REST 的速率限制信息。 public struct RateLimitInfo : IRateLimitInfo Implements IRateLimitInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Bucket 获取一个唯一的字符串，表示所遇到的限速桶（不包括路由路径中的主要参数）。 public readonly string? Bucket { get; } Property Value string Endpoint 获取此限速信息所属的终结点。 public readonly string Endpoint { get; } Property Value string IsGlobal 获取此限速信息是否为全局限速。 public readonly bool IsGlobal { get; } Property Value bool Lag 获取请求的延迟，用于支持计算限速重置的精确时间。 public readonly TimeSpan? Lag { get; } Property Value TimeSpan? Limit 获取在更新时限内可以进行的请求数量。 public readonly int? Limit { get; } Property Value int? Remaining 获取目前可以立即进行的请求数量。 public readonly int? Remaining { get; } Property Value int? ResetAfter 获取相对于此刻此限速重置的相对时间间隔。 public readonly TimeSpan? ResetAfter { get; } Property Value TimeSpan?"
  },
  "api/QQBot.Net.RateLimitedException.html": {
    "href": "api/QQBot.Net.RateLimitedException.html",
    "title": "Class RateLimitedException | QQBot.Net 文档",
    "keywords": "Class RateLimitedException Namespace QQBot.Net Assembly QQBot.Net.Core.dll 表示一个由 QQBot 限制请求频率时引发的异常。 public class RateLimitedException : TimeoutException, ISerializable Inheritance object Exception SystemException TimeoutException RateLimitedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RateLimitedException(IRequest) 使用发送的 request 初始化 RateLimitedException 类的新实例。 public RateLimitedException(IRequest request) Parameters request IRequest 引发异常的请求。 Properties Request 获取引发此异常的请求对象。 public IRequest Request { get; } Property Value IRequest"
  },
  "api/QQBot.Net.Rest.DefaultRestClientProvider.html": {
    "href": "api/QQBot.Net.Rest.DefaultRestClientProvider.html",
    "title": "Class DefaultRestClientProvider | QQBot.Net 文档",
    "keywords": "Class DefaultRestClientProvider Namespace QQBot.Net.Rest Assembly QQBot.Net.Rest.dll 表示一个默认的 RestClientProvider，用于创建 IRestClient 的默认实现的实例。 public static class DefaultRestClientProvider Inheritance object DefaultRestClientProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance 获取一个默认的 RestClientProvider 委托，用于创建 IRestClient 的默认实现的实例。 public static readonly RestClientProvider Instance Field Value RestClientProvider Methods Create(bool) 创建一个新的 RestClientProvider 委托。 public static RestClientProvider Create(bool useProxy = false) Parameters useProxy bool 是否使用系统代理。 Returns RestClientProvider 一个新的 RestClientProvider 委托。"
  },
  "api/QQBot.Net.Rest.IRestClient.html": {
    "href": "api/QQBot.Net.Rest.IRestClient.html",
    "title": "Interface IRestClient | QQBot.Net 文档",
    "keywords": "Interface IRestClient Namespace QQBot.Net.Rest Assembly QQBot.Net.Core.dll 表示一个通用的基于 RESTful API 的客户端。 public interface IRestClient : IDisposable Inherited Members IDisposable.Dispose() Methods SendAsync(HttpMethod, string, IReadOnlyDictionary<string, object>, CancellationToken, string?, IEnumerable<KeyValuePair<string, IEnumerable<string>>>?) 发送一个带有多部分数据参数的 RESTful API 请求。 Task<RestResponse> SendAsync(HttpMethod method, string endpoint, IReadOnlyDictionary<string, object> multipartParams, CancellationToken cancellationToken, string? reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? requestHeaders = null) Parameters method HttpMethod 用于发送此请求的方法。 endpoint string 要发送此请求的端点。 multipartParams IReadOnlyDictionary<string, object> 要发送的多部分数据参数。 cancellationToken CancellationToken 用于取消任务的取消令牌。 reason string 用于审计日志的操作原因。 requestHeaders IEnumerable<KeyValuePair<string, IEnumerable<string>>> 要随请求一起发送的附加标头。 Returns Task<RestResponse> 表示一个异步发送操作的任务。任务的结果包含请求的响应。 SendAsync(HttpMethod, string, string, CancellationToken, string?, IEnumerable<KeyValuePair<string, IEnumerable<string>>>?) 发送一个带有 JSON 请求体的 RESTful API 请求。 Task<RestResponse> SendAsync(HttpMethod method, string endpoint, string json, CancellationToken cancellationToken, string? reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? requestHeaders = null) Parameters method HttpMethod 用于发送此请求的方法。 endpoint string 要发送此请求的端点。 json string 要发送的 JSON 请求体。 cancellationToken CancellationToken 用于取消任务的取消令牌。 reason string 用于审计日志的操作原因。 requestHeaders IEnumerable<KeyValuePair<string, IEnumerable<string>>> 要随请求一起发送的附加标头。 Returns Task<RestResponse> 表示一个异步发送操作的任务。任务的结果包含请求的响应。 SendAsync(HttpMethod, string, CancellationToken, string?, IEnumerable<KeyValuePair<string, IEnumerable<string>>>?) 发送一个 RESTful API 请求。 Task<RestResponse> SendAsync(HttpMethod method, string endpoint, CancellationToken cancellationToken, string? reason = null, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? requestHeaders = null) Parameters method HttpMethod 用于发送此请求的方法。 endpoint string 要发送此请求的端点。 cancellationToken CancellationToken 用于取消任务的取消令牌。 reason string 用于审计日志的操作原因。 requestHeaders IEnumerable<KeyValuePair<string, IEnumerable<string>>> 要随请求一起发送的附加标头。 Returns Task<RestResponse> 表示一个异步发送操作的任务。任务的结果包含请求的响应。 SetCancellationToken(CancellationToken) 设置此客户端的取消令牌。 void SetCancellationToken(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消任务的取消令牌。 SetHeader(string, string?) 设置此客户端的 HTTP 头部，这将应用于所有请求。 void SetHeader(string key, string? value) Parameters key string HTTP 头部的键。 value string HTTP 头部的值。"
  },
  "api/QQBot.Net.Rest.RestClientProvider.html": {
    "href": "api/QQBot.Net.Rest.RestClientProvider.html",
    "title": "Delegate RestClientProvider | QQBot.Net 文档",
    "keywords": "Delegate RestClientProvider Namespace QQBot.Net.Rest Assembly QQBot.Net.Core.dll 表示一个用于创建 IRestClient 实例的委托。 public delegate IRestClient RestClientProvider(string baseUrl) Parameters baseUrl string 表示一个用于创建 实例的委托。 Returns IRestClient 表示一个用于创建 实例的委托。"
  },
  "api/QQBot.Net.Rest.RestResponse.html": {
    "href": "api/QQBot.Net.Rest.RestResponse.html",
    "title": "Struct RestResponse | QQBot.Net 文档",
    "keywords": "Struct RestResponse Namespace QQBot.Net.Rest Assembly QQBot.Net.Core.dll 表示一个 RESTful API 请求的响应。 public struct RestResponse Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Headers 获取响应的头部。 public readonly Dictionary<string, string?> Headers { get; } Property Value Dictionary<string, string> MediaTypeHeader 获取响应的媒体类型头部。 public readonly MediaTypeHeaderValue? MediaTypeHeader { get; } Property Value MediaTypeHeaderValue StatusCode 获取响应的 HTTP 状态码。 public readonly HttpStatusCode StatusCode { get; } Property Value HttpStatusCode Stream 获取响应的流。 public readonly Stream Stream { get; } Property Value Stream"
  },
  "api/QQBot.Net.Rest.html": {
    "href": "api/QQBot.Net.Rest.html",
    "title": "Namespace QQBot.Net.Rest | QQBot.Net 文档",
    "keywords": "Namespace QQBot.Net.Rest Classes DefaultRestClientProvider 表示一个默认的 RestClientProvider，用于创建 IRestClient 的默认实现的实例。 Structs RestResponse 表示一个 RESTful API 请求的响应。 Interfaces IRestClient 表示一个通用的基于 RESTful API 的客户端。 Delegates RestClientProvider 表示一个用于创建 IRestClient 实例的委托。"
  },
  "api/QQBot.Net.WebSocketClosedException.html": {
    "href": "api/QQBot.Net.WebSocketClosedException.html",
    "title": "Class WebSocketClosedException | QQBot.Net 文档",
    "keywords": "Class WebSocketClosedException Namespace QQBot.Net Assembly QQBot.Net.Core.dll 表示一个由 QQBot 意外关闭 WebSocket 会话时引发的异常。 public class WebSocketClosedException : Exception, ISerializable Inheritance object Exception WebSocketClosedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WebSocketClosedException(int?, string?) 使用 QQBot 发送的关闭代码及原因初始化一个 WebSocketClosedException 类的新实例。 public WebSocketClosedException(int? closeCode, string? reason = null) Parameters closeCode int? 由 QQBot 发送的关闭代码。 reason string 中断的原因。 Properties CloseCode 获取由 QQBot 发送的关闭代码。 public int? CloseCode { get; } Property Value int? Reason 获取中断的原因。 public string? Reason { get; } Property Value string"
  },
  "api/QQBot.Net.WebSockets.DefaultWebSocketProvider.html": {
    "href": "api/QQBot.Net.WebSockets.DefaultWebSocketProvider.html",
    "title": "Class DefaultWebSocketProvider | QQBot.Net 文档",
    "keywords": "Class DefaultWebSocketProvider Namespace QQBot.Net.WebSockets Assembly QQBot.Net.WebSocket.dll 表示一个默认的 WebSocketProvider，用于创建 IWebSocketClient 的默认实现的实例。 public static class DefaultWebSocketProvider Inheritance object DefaultWebSocketProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance 获取一个默认的 WebSocketProvider 委托，用于创建 IWebSocketClient 的默认实现的实例。 public static readonly WebSocketProvider Instance Field Value WebSocketProvider Methods Create(IWebProxy?) 创建一个新的 WebSocketProvider 委托。 public static WebSocketProvider Create(IWebProxy? useProxy = null) Parameters useProxy IWebProxy 是否使用系统代理。 Returns WebSocketProvider 一个新的 WebSocketProvider 委托。"
  },
  "api/QQBot.Net.WebSockets.IWebSocketClient.html": {
    "href": "api/QQBot.Net.WebSockets.IWebSocketClient.html",
    "title": "Interface IWebSocketClient | QQBot.Net 文档",
    "keywords": "Interface IWebSocketClient Namespace QQBot.Net.WebSockets Assembly QQBot.Net.Core.dll 表示一个通用的 WebSocket 客户端。 public interface IWebSocketClient : IDisposable Inherited Members IDisposable.Dispose() Methods ConnectAsync(string) 连接到指定的主机。 Task ConnectAsync(string host) Parameters host string 要连接的主机。 Returns Task 一个表示异步连接操作的任务。 DisconnectAsync(int) 断开与主机的连接。 Task DisconnectAsync(int closeCode = 1000) Parameters closeCode int 要发送给对方主机的关闭代码。 Returns Task 一个表示异步断开操作的任务。 SendAsync(byte[], int, int, bool) 向对方主机发送文本消息。 Task SendAsync(byte[] data, int index, int count, bool isText) Parameters data byte[] 要发送的数据。 index int 要发送的数据的起始位置。 count int 要发送的数据的长度。 isText bool 发送的是否为文本消息。 Returns Task 一个表示异步发送操作的任务。 SetCancellationToken(CancellationToken) 设置此客户端的取消令牌。 void SetCancellationToken(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken 用于取消任务的取消令牌。 SetHeader(string, string) 设置一个将与未来请求一起发送的标头。 void SetHeader(string key, string value) Parameters key string 标头的键。 value string 标头的值。 SetKeepAliveInterval(TimeSpan) 设置此客户端的保持活动间隔。 void SetKeepAliveInterval(TimeSpan keepAliveInterval) Parameters keepAliveInterval TimeSpan 保持活动间隔。 Remarks 如果未调用此方法，则默认的保持活动间隔是 DefaultKeepAliveInterval。 See Also KeepAliveInterval Events BinaryMessage 当接收到二进制消息时触发。 event Func<byte[], int, int, Task>? BinaryMessage Event Type Func<byte[], int, int, Task> Remarks 事件参数： byte[] 参数是接收到的二进制消息的字节数组。 int 参数是接收到的二进制消息的字节数组的起始位置。 int 参数是接收到的二进制消息的字节数组的长度。 Closed 当 WebSocket 连接关闭时触发。 event Func<Exception, Task>? Closed Event Type Func<Exception, Task> Remarks 事件参数： Exception 参数是导致连接关闭的异常。 TextMessage 当接收到文本消息时触发。 event Func<string, Task>? TextMessage Event Type Func<string, Task> Remarks 事件参数： string 参数是接收到的文本消息的字符串。"
  },
  "api/QQBot.Net.WebSockets.WebSocketProvider.html": {
    "href": "api/QQBot.Net.WebSockets.WebSocketProvider.html",
    "title": "Delegate WebSocketProvider | QQBot.Net 文档",
    "keywords": "Delegate WebSocketProvider Namespace QQBot.Net.WebSockets Assembly QQBot.Net.Core.dll 表示一个用于创建 IWebSocketClient 实例的委托。 public delegate IWebSocketClient WebSocketProvider() Returns IWebSocketClient 表示一个用于创建 实例的委托。"
  },
  "api/QQBot.Net.WebSockets.html": {
    "href": "api/QQBot.Net.WebSockets.html",
    "title": "Namespace QQBot.Net.WebSockets | QQBot.Net 文档",
    "keywords": "Namespace QQBot.Net.WebSockets Classes DefaultWebSocketProvider 表示一个默认的 WebSocketProvider，用于创建 IWebSocketClient 的默认实现的实例。 Interfaces IWebSocketClient 表示一个通用的 WebSocket 客户端。 Delegates WebSocketProvider 表示一个用于创建 IWebSocketClient 实例的委托。"
  },
  "api/QQBot.Net.html": {
    "href": "api/QQBot.Net.html",
    "title": "Namespace QQBot.Net | QQBot.Net 文档",
    "keywords": "Namespace QQBot.Net Classes BucketId 表示一个限速桶。 HttpException 当处理 QQBot HTTP 请求时发生错误时引发的异常。 RateLimitedException 表示一个由 QQBot 限制请求频率时引发的异常。 WebSocketClosedException 表示一个由 QQBot 意外关闭 WebSocket 会话时引发的异常。 Structs RateLimitInfo 表示一个基于 REST 的速率限制信息。 Interfaces IRequest 表示一个要发送到 QQ 的通用的请求。"
  },
  "api/QQBot.PermValue.html": {
    "href": "api/QQBot.PermValue.html",
    "title": "Enum PermValue | QQBot.Net 文档",
    "keywords": "Enum PermValue Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个权限的重写配置的值。 public enum PermValue Fields Allow = 0 允许此权限。 Deny = 1 禁止此权限。 Inherit = 2 继承此权限。"
  },
  "api/QQBot.QQBotConfig.html": {
    "href": "api/QQBot.QQBotConfig.html",
    "title": "Class QQBotConfig | QQBot.Net 文档",
    "keywords": "Class QQBotConfig Namespace QQBot Assembly QQBot.Net.Core.dll 定义 QQBot.Net 各种基础行为的配置项。 public class QQBotConfig Inheritance object QQBotConfig Derived QQBotRestConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields APIUrl 获取 QQ Bot API 请求的根 URL。 public const string APIUrl = \"https://api.sgroup.qq.com/\" Field Value string APIVersion 获取 QQBot.Net 使用的 API 版本。 public const int APIVersion = 2 Field Value int DefaultRequestTimeout 获取请求超时的默认时间，以毫秒为单位。 public const int DefaultRequestTimeout = 6000 Field Value int MaxGuildsPerBatch 获取每请求获取频道的最大数量。 public const int MaxGuildsPerBatch = 100 Field Value int MaxMembersPerBatch 获取每请求获取频道成员的最大数量。 public const int MaxMembersPerBatch = 400 Field Value int MaxReactionUsersPerBatch 获取每请求获取回应的用户的最大数量。 public const int MaxReactionUsersPerBatch = 50 Field Value int SandboxAPIUrl 获取 QQ Bot 沙箱环境 API 请求的根 URL。 public const string SandboxAPIUrl = \"https://sandbox.api.sgroup.qq.com/\" Field Value string Properties AccessEnvironment 获取或设置 QQBot.Net 使用的接入环境。 public AccessEnvironment AccessEnvironment { get; set; } Property Value AccessEnvironment DefaultRatelimitCallback 获取或设置默认的速率限制回调委托。 public Func<IRateLimitInfo, Task>? DefaultRatelimitCallback { get; set; } Property Value Func<IRateLimitInfo, Task> Remarks 若同时设置了此属性与用于各个请求的 RatelimitCallback，则将优先使用 RatelimitCallback。 DefaultRetryMode 获取或设置请求在出现错误时的默认行为。 public RetryMode DefaultRetryMode { get; set; } Property Value RetryMode See Also RetryMode LogLevel 获取或设置将发送到日志事件的最低日志严重性级别。 public LogSeverity LogLevel { get; set; } Property Value LogSeverity UserAgent 获取 QQBot.Net 在每个请求中使用的用户代理。 public static string UserAgent { get; } Property Value string Version 获取 QQBot.Net 使用的默认请求超时时间。 public static string Version { get; } Property Value string 一个包含详细版本信息的字符串，包括构建号；当无法获取构建版本时为 Unknown。"
  },
  "api/QQBot.QQBotError.html": {
    "href": "api/QQBot.QQBotError.html",
    "title": "Struct QQBotError | QQBot.Net 文档",
    "keywords": "Struct QQBotError Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个 QQBot 返回的错误。 public struct QQBotError Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Code 获取错误的代码。 public readonly string Code { get; } Property Value string Message 获取错误的原因。 public readonly string Message { get; } Property Value string"
  },
  "api/QQBot.QQBotErrorCode.html": {
    "href": "api/QQBot.QQBotErrorCode.html",
    "title": "Enum QQBotErrorCode | QQBot.Net 文档",
    "keywords": "Enum QQBotErrorCode Namespace QQBot Assembly QQBot.Net.Core.dll 表示从 QQBot 接收到的错误代码。 public enum QQBotErrorCode Fields ActiveMessageNotAllowedInChannel = 304048 ActiveMessageNotAllowedInSubChannel = 304046 ActiveMessagePushExceedsSubChannelLimit = 304047 AnnouncementError = 501000 AnnouncementMessageIdError = 501005 AnnouncementSecurityHit = 501014 AnnouncementTypeError = 501019 ApiAuthorizationLinkSendFailed = 610014 ApiInterfaceAuthorized = 610010 ArkNotAllowed = 304004 AtEveryoneTimesLimit = 304019 AtTimesAuthFailed = 1100304 BotNotInChannel = 610007 BoundSubChannelDoesNotExist = 302024 CallerNotGroupMember = 1100301 CanOnlyEditMessageWithKeyboard = 50049 CanOnlyEditOwnMessage = 50051 CannotBindSubChannelFromDifferentChannel = 302022 CannotReplyToOwnMessage = 50045 CannotSendEmptyMessage = 50006 ChangeImageUrlError = 304010 ChannelAnnouncementSubChannelRecommendationExceedsLimit = 501016 ChannelHitWriteRateLimit = 20028 ChannelIdIsNull = 502002 ChannelPermissionError = 610000 ChannelPermissionGetHttpHeaderFailed = 610002 ChannelSystemError = 302009 ConvertMediaInfoFailed = 304083 CorpusError = 304029 CorpusNotMatch = 304030 CreateGlobalChannelAnnouncementFailed = 501006 CreatePinnedMessageFailed = 501011 CreateRecommendedSubChannelTypeAnnouncementFailed = 501020 CreateScheduleFailed = 302006 CreateSubChannelAnnouncementFailed = 501002 DailyActivityLimitReached = 302021 DailyScheduleLimitReached = 302012 DeleteGlobalChannelAnnouncementFailed = 501007 DeletePinnedMessageFailed = 501012 DeleteScheduleFailed = 302005 DeleteSubChannelAnnouncementFailed = 501003 DifferentChannelOrSubChannel = 50038 DownstreamCallFailed = 302019 EditMessageError = 50053 EmbedLimit = 304005 EmojiReactionAlreadySet = 620003 EmojiReactionNotSet = 620004 EmojiReactionOperationFailed = 620007 EmojiReactionRateLimited = 620006 EmojiReactionTypeLimitExceeded = 620002 EndTimeCannotBeEarlierThanStartTime = 302016 ErrorCheckAdminFailed = 11281 ErrorCheckAdminNotPass = 11282 ErrorCheckAppPrivilegeFailed = 11252 ErrorCheckAppPrivilegeNotPass = 11253 ErrorCheckGuildAuth = 11263 ErrorCheckRobot = 11262 ErrorCheckTokenFailed = 11242 ErrorCheckTokenNotPass = 11243 ErrorCheckUserAuth = 11273 ErrorGetAvatar = 11304 ErrorGetGuildId = 11305 ErrorGetGuildInfo = 11306 ErrorGetHTTPHeader = 11301 ErrorGetHeaderUIN = 11302 ErrorGetNick = 11303 ErrorGuildAuthNotPass = 11264 ErrorInterfaceForbidden = 11254 ErrorRobotHasBaned = 11265 ErrorUserAuthNotPass = 11274 ErrorWrongAppid = 11251 ErrorWrongAppidDuplicate = 11261 ErrorWrongAppidTriple = 11275 ErrorWrongToken = 11241 FetchBotPermissionListFailed = 610006 FetchUploadedMediaInfoFailed = 304082 FileSizeLimit = 304020 GeneralError = 0 GetApiInterfaceDetailsFailed = 610009 GetAppIdFailedForInteractionCallbackDataUpdate = 630002 GetBotError = 304008 GetBotInfoFailed = 610011 GetBotRoleFailed = 610004 GetBotRoleInternalError = 610005 GetBotUinError = 504003 GetBotUinFailed = 610003 GetChannelError = 304009 GetChannelIdFailed = 610001 GetChannelInfoFailed = 501004 GetCreatorInfoFailed = 302007 GetFileError = 304021 GetGuildError = 304007 GetMessageFailed = 50039 GetMessageFrequencySettingsError = 504004 GetMessageSettingsError = 304044 GetSpecifiedChannelNameFailed = 1100302 GetSubChannelInfoFailed = 503003 GetTemplateError = 304012 GetTinyIdByUinFailed = 503010 GetXUinFailed = 503008 GuildIdConversionFailed = 50043 ImageCountExceeded = 503018 InteractionCallbackDataAppIdMismatch = 630003 InteractionCallbackDataTooLarge = 630007 InternalServerError = 503013 InternalStorageErrorForInteractionCallbackDataUpdate = 630004 InternalStorageReadErrorForInteractionCallbackDataUpdate = 630005 InternalSystemError = 1100300 InvalidChannelId = 502001 InvalidEmojiReactionParameter = 620001 InvalidFormBody = 50035 InvalidInteractionCallbackDataUpdateParameter = 630001 InvalidMarkdownCombination = 50037 InvalidMarkdownContent = 50055 InvalidOrIllegalPostId = 503009 InvalidOrIllegalPostIdTimestamp = 503011 InvalidParameter = 610008 InvalidRecommendedSubChannelId = 501018 InvalidRequest = 11255 InvalidRequestParameter = 504001 InvalidTimestamp = 502005 InvalidUserId = 502003 KeyboardElementCannotBeNull = 50050 LinkCountExceeded = 503016 MarkdownHasEmptyValue = 50041 MarkdownListMaxLength = 50042 MarkdownParameterSupportsNativeOrTemplate = 50057 MarkdownTemplateParameterError = 50054 MessageBeat = 304025 MessageButtonComponentContentError = 304040 MessageButtonComponentNotExist = 304038 MessageButtonComponentParseError = 304039 MessageExpire = 304027 MessageFrequencyError = 504000 MessageFrequencyGetHttpHeaderFailed = 504002 MessageIdCannotBeNull = 50048 MessageIdError = 304026 MessageIdNotExist = 501008 MessageIdParseFailed = 501009 MessageLimitExceeded = 22009 MessageNotAllowedToSet = 501015 MessageNotInSubChannel = 501010 MessageProtectError = 304028 MessageSettingsGuideRequestError = 304051 MessageTemplateTypeError = 50040 ModifyScheduleFailed = 302004 ModifySubChannelPermissionError = 301003 MuteError = 502000 MuteSecurityHit = 502009 NoMarkdownTemplatePermission = 304036 NoMessageButtonComponentPermission = 304037 NoPermissionToModifySchedule = 302010 NoPermissionToSetEmojiReaction = 620005 NoTemplate = 304011 NonAdminCannotSendMessageInHomeChannel = 1100303 NonMemberQueryPermissionDenied = 301006 NonWhitelistAppSubChannel = 1100307 NotAtBotMessage = 50046 NotBotOrAtBotMessage = 50047 NotChannelOwnerOrAdmin = 501017 NotPrivateChannelMember = 1100306 NotPrivateMessageMember = 304034 OtherError = 1100499 ParameterConversionError = 502007 ParameterExceedsLimit = 301007 ParameterTypeConversionFailed = 302018 ParameterValidationFailed = 501001 PinnedMessageExceedsLimit = 501013 PostChannelIdIsNull = 503002 PostContentConversionFailed = 503015 PostContentIsNull = 503006 PostFrequencyLimitExceeded = 503004 PostIdIsNull = 503007 PostInvalidChannelId = 503001 PostJsonContentParseFailed = 503014 PostNotExistOrDeleted = 503012 PostTitleIsNull = 503005 PrivateMessageActiveLimit = 304049 PrivateMessageClosed = 304031 PrivateMessageNotExist = 304032 PrivateMessageTotalLimit = 304050 PrivateSubChannelMemberLimitReached = 301004 PullPrivateMessageError = 304033 PushMessageAsyncOk = 304023 PushMessageExceedsSubChannelLimit = 304035 PushTimeLimit = 304022 QueryChannelInfoError = 302001 QueryScheduleFailed = 302003 QueryScheduleListFailed = 302002 QuerySubChannelInfoError = 301001 QuerySubChannelPermissionError = 301002 RateLimitFailed = 610012 RateLimited = 610013 ReadRequestAppIdFailedForInteractionCallbackDataUpdate = 630006 ReplaceIdFailed = 12001 ReplyMessageAsyncOk = 304024 RequestHeaderError = 502010 RequestInvalid = 12002 ResponseInvalid = 12003 RetractMessageFailed = 306005 RetractMessageGetChannelFailed = 306006 RetractMessageGetMessageFailed = 306003 RetractMessageIdError = 306002 RetractMessageInternalError = 306010 RetractMessageInvalidParameter = 306001 RetractMessageNoPermission = 306004 RetractMessageNotInCurrentGuild = 306007 RetractMessageNotSentByCurrentBot = 306008 RetractMessageNotSentByCurrentUser = 306009 RetractMessageTimeExceeded = 306011 RpcCallFailed = 502008 RpcServiceCallFailed = 301005 ScheduleContentOrAccountViolation = 302020 ScheduleCreationTriggeredSecurity = 302013 ScheduleDeleted = 302011 ScheduleDurationExceedsLimit = 302014 ScheduleInvalidParameter = 302000 ScheduleObjectIsNull = 302017 SecurityHit = 1100103 SecurityHitInvalidOrNonexistentGroup = 1100104 SecurityHitMessageEditing = 3300006 SecurityHitMessageRateLimited = 1100100 SecurityHitNoNewFeatureAccess = 1100102 SecurityHitSensitiveContent = 1100101 SendMessageError = 304016 SendMessageSettingsGuideOverLimit = 304052 SendingMarkdownContentNotAllowed = 50056 ServerConfigError = 304006 SessionNotExist = 304018 StartJumpCannotBindScheduleSubChannel = 302023 StartTimeCannotBeEarlierThanCurrent = 302015 SubChannelActiveMessageLimit = 304045 SubChannelIdCannotBeNull = 302008 SubChannelInvalidParameter = 301000 TemplatePrivilegeError = 304014 TimestampIsNull = 502006 TinyIdToUinConversionFailed = 1100305 TitleLengthExceeded = 503020 TriggeredChannelRateLimit = 1100308 UnknownAccount = 10001 UnknownChannel = 10003 UnknownGuild = 10004 UploadImageError = 304017 UrlNotAllowed = 304003 UserIdIsNull = 502004 VideoCountExceeded = 503019 WordCountExceeded = 503017"
  },
  "api/QQBot.QQBotJsonError.html": {
    "href": "api/QQBot.QQBotJsonError.html",
    "title": "Struct QQBotJsonError | QQBot.Net 文档",
    "keywords": "Struct QQBotJsonError Namespace QQBot Assembly QQBot.Net.Core.dll 表示一个在执行 API 请求后从 QQBot 接收到的 JSON 数据中解析出的错误。 public struct QQBotJsonError Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Errors 获取与路径上的特定属性关联的错误集合。 public readonly IReadOnlyCollection<QQBotError> Errors { get; } Property Value IReadOnlyCollection<QQBotError> Path 获取错误的 JSON 路径。 public readonly string Path { get; } Property Value string"
  },
  "api/QQBot.RemindType.html": {
    "href": "api/QQBot.RemindType.html",
    "title": "Enum RemindType | QQBot.Net 文档",
    "keywords": "Enum RemindType Namespace QQBot Assembly QQBot.Net.Core.dll 表示提醒类型。 public enum RemindType Fields AtStart = 1 开始时提醒。 Before15Minutes = 3 开始前 15 分钟提醒。 Before30Minutes = 4 开始前 30 分钟提醒。 Before5Minutes = 2 开始前 5 分钟提醒。 Before60Minutes = 5 开始前 60 分钟提醒。 None = 0 不提醒。"
  },
  "api/QQBot.RequestOptions.html": {
    "href": "api/QQBot.RequestOptions.html",
    "title": "Class RequestOptions | QQBot.Net 文档",
    "keywords": "Class RequestOptions Namespace QQBot Assembly QQBot.Net.Core.dll 表示发送请求时要使用的选项。 public class RequestOptions Inheritance object RequestOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequestOptions() 使用默认设置创建一个新的 RequestOptions 类的实例。 public RequestOptions() Remarks 默认的请求超时时间是 DefaultRequestTimeout。 Properties AuditLogReason 获取或设置要写入到服务器审计日志中的操作原因。 public string? AuditLogReason { get; set; } Property Value string Remarks 默认的 API 客户端不支持设置此属性。 CancellationToken 获取或设置此请求的取消令牌。 public CancellationToken CancellationToken { get; set; } Property Value CancellationToken Default 使用默认设置创建一个新的 RequestOptions 类的实例。 public static RequestOptions Default { get; } Property Value RequestOptions Remarks 默认的请求超时时间是 DefaultRequestTimeout。 RatelimitCallback 获取或设置此请求触发速率限制时要执行的回调委托。 public Func<IRateLimitInfo, Task>? RatelimitCallback { get; set; } Property Value Func<IRateLimitInfo, Task> See Also DefaultRatelimitCallback RetryMode 获取或设置请求失败时的重试行为；如果为 null，则使用配置的默认的重试行为。 public RetryMode? RetryMode { get; set; } Property Value RetryMode? See Also DefaultRetryMode Timeout 获取或设置等待此请求完成的最大时间，以毫秒为单位。 public int? Timeout { get; set; } Property Value int? Remarks 获取或设置等待此请求完成的最大时间，以毫秒为单位。如果为 null，则请求不会超时。 如果此请求的桶触发了速率限制并且在超时前不会恢复，此请求将立即失败。 Methods Clone() Creates a shallow copy of the current object. public RequestOptions Clone() Returns RequestOptions A shallow copy of the current object."
  },
  "api/QQBot.Rest.Attachment.html": {
    "href": "api/QQBot.Rest.Attachment.html",
    "title": "Class Attachment | QQBot.Net 文档",
    "keywords": "Class Attachment Namespace QQBot.Rest Assembly QQBot.Net.Rest.dll 表示一个消息内的附件。 public class Attachment : IAttachment Inheritance object Attachment Implements IAttachment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Content 获取此附件的文本内容。 public string? Content { get; } Property Value string ContentType 获取此附件的内容类型。 public string? ContentType { get; } Property Value string Filename 获取此附件的文件名。 public string? Filename { get; } Property Value string Height 如果此附件表示的内容包含画面，则获取其高度。 public int? Height { get; } Property Value int? Size 获取此附件的文件大小。 public int? Size { get; } Property Value int? Type 获取此附件的类型。 public AttachmentType Type { get; } Property Value AttachmentType Url 获取此附件的 URL。 public string Url { get; } Property Value string Width 如果此附件表示的内容包含画面，则获取其宽度。 public int? Width { get; } Property Value int?"
  },
  "api/QQBot.Rest.BaseQQBotClient.html": {
    "href": "api/QQBot.Rest.BaseQQBotClient.html",
    "title": "Class BaseQQBotClient | QQBot.Net 文档",
    "keywords": "Class BaseQQBotClient Namespace QQBot.Rest Assembly QQBot.Net.Rest.dll 表示一个可以连接到 QQ API 的通用的 QQ Bot 客户端。 public abstract class BaseQQBotClient : IQQBotClient, IDisposable Inheritance object BaseQQBotClient Implements IQQBotClient IDisposable Derived QQBotRestClient BaseSocketClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConnectionState 获取当前连接的状态。 public virtual ConnectionState ConnectionState { get; } Property Value ConnectionState CurrentUser 获取登录到此客户端的当前用户；如果未登录，则为 null。 public ISelfUser? CurrentUser { get; protected set; } Property Value ISelfUser LoginState 获取此客户端的登录状态。 public LoginState LoginState { get; protected set; } Property Value LoginState TokenType 获取已登录用户的令牌类型。 public TokenType TokenType { get; } Property Value TokenType Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetBotGatewayAsync(RequestOptions?) Gets the gateway information related to the bot. public Task<BotGateway> GetBotGatewayAsync(RequestOptions? options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<BotGateway> A task that represents the asynchronous get operation. The task result contains a BotGateway that represents the gateway information related to the bot. LoginAsync(int, TokenType, string, bool) 登录到 QQ API。 public Task LoginAsync(int appId, TokenType tokenType, string token, bool validateToken = true) Parameters appId int 要使用的应用 ID。 tokenType TokenType 要使用的令牌类型。 token string 要使用的令牌。 validateToken bool 是否验证令牌。 Returns Task 一个表示异步登录操作的任务。 Remarks 验证令牌的操作是通过 ValidateToken(TokenType, string) 方法完成的。 此方法用于向当前客户端设置后续 API 请求的身份验证信息，获取并设置当前所登录用户的信息。 LogoutAsync() 从 QQ API 退出登录。 public Task LogoutAsync() Returns Task 一个表示异步退出登录操作的任务。 Remarks 此方法用于清除当前客户端的身份验证信息及所缓存的当前所登录的用户信息。 Events Log 当生成一条日志消息时引发。 public event Func<LogMessage, Task> Log Event Type Func<LogMessage, Task> Remarks 事件参数： LogMessage 参数是描述日志消息的结构。 LoggedIn 当客户端登录成功时引发。 public event Func<Task> LoggedIn Event Type Func<Task> LoggedOut 当客户端退出登录时引发。 public event Func<Task> LoggedOut Event Type Func<Task> SentRequest 当向 API 发送 REST 请求时引发。 public event Func<HttpMethod, string, double, Task> SentRequest Event Type Func<HttpMethod, string, double, Task> Remarks 事件参数： HttpMethod 参数是 HTTP 方法。 string 参数是终结点。 double 参数是完成请求所花费的时间，以毫秒为单位。"
  },
  "api/QQBot.Rest.QQBotRestClient.html": {
    "href": "api/QQBot.Rest.QQBotRestClient.html",
    "title": "Class QQBotRestClient | QQBot.Net 文档",
    "keywords": "Class QQBotRestClient Namespace QQBot.Rest Assembly QQBot.Net.Rest.dll 表示一个基于 REST 的 QQ Bot 客户端。 public class QQBotRestClient : BaseQQBotClient, IQQBotClient, IDisposable Inheritance object BaseQQBotClient QQBotRestClient Implements IQQBotClient IDisposable Derived QQBotSocketRestClient Inherited Members BaseQQBotClient.Log BaseQQBotClient.LoggedIn BaseQQBotClient.LoggedOut BaseQQBotClient.SentRequest BaseQQBotClient.LoginState BaseQQBotClient.TokenType BaseQQBotClient.Dispose() BaseQQBotClient.LoginAsync(int, TokenType, string, bool) BaseQQBotClient.LogoutAsync() BaseQQBotClient.ConnectionState BaseQQBotClient.GetBotGatewayAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QQBotRestClient() 使用默认配置初始化一个 QQBotRestClient 类的新实例。 public QQBotRestClient() QQBotRestClient(QQBotRestConfig) 使用指定的配置初始化一个 QQBotRestClient 类的新实例。 public QQBotRestClient(QQBotRestConfig config) Parameters config QQBotRestConfig 用于初始化客户端的配置。 Properties CurrentUser 获取登录到此客户端的当前用户；如果未登录，则为 null。 public RestSelfUser? CurrentUser { get; } Property Value RestSelfUser"
  },
  "api/QQBot.Rest.QQBotRestConfig.html": {
    "href": "api/QQBot.Rest.QQBotRestConfig.html",
    "title": "Class QQBotRestConfig | QQBot.Net 文档",
    "keywords": "Class QQBotRestConfig Namespace QQBot.Rest Assembly QQBot.Net.Rest.dll 定义 QQBot.Net 有关 REST 各种行为的配置类。 public class QQBotRestConfig : QQBotConfig Inheritance object QQBotConfig QQBotRestConfig Derived QQBotSocketConfig Inherited Members QQBotConfig.APIVersion QQBotConfig.Version QQBotConfig.UserAgent QQBotConfig.APIUrl QQBotConfig.SandboxAPIUrl QQBotConfig.AccessEnvironment QQBotConfig.DefaultRequestTimeout QQBotConfig.MaxGuildsPerBatch QQBotConfig.MaxMembersPerBatch QQBotConfig.MaxReactionUsersPerBatch QQBotConfig.DefaultRetryMode QQBotConfig.DefaultRatelimitCallback QQBotConfig.LogLevel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 此配置基于 QQBotConfig，在基础配置的基础上，定义了有关 REST 的配置。 Properties RestClientProvider 获取或设置要用于创建 REST 客户端的 RestClientProvider 委托。 public RestClientProvider RestClientProvider { get; set; } Property Value RestClientProvider"
  },
  "api/QQBot.Rest.RestEntity-1.html": {
    "href": "api/QQBot.Rest.RestEntity-1.html",
    "title": "Class RestEntity<TId> | QQBot.Net 文档",
    "keywords": "Class RestEntity<TId> Namespace QQBot.Rest Assembly QQBot.Net.Rest.dll 表示一个基于 REST 的实体。 public class RestEntity<TId> : IEntity<TId> where TId : IEquatable<TId> Type Parameters TId 唯一标识符的类型。 Inheritance object RestEntity<TId> Implements IEntity<TId> Derived RestUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id 获取此实体的唯一标识符。 public TId Id { get; } Property Value TId"
  },
  "api/QQBot.Rest.RestGuildUser.html": {
    "href": "api/QQBot.Rest.RestGuildUser.html",
    "title": "Class RestGuildUser | QQBot.Net 文档",
    "keywords": "Class RestGuildUser Namespace QQBot.Rest Assembly QQBot.Net.Rest.dll 表示一个基于 REST 的频道用户。 public class RestGuildUser : RestUser, IGuildUser, IUser, IEntity<string>, IMentionable, IEntity<ulong> Inheritance object RestEntity<string> RestUser RestGuildUser Implements IGuildUser IUser IEntity<string> IMentionable IEntity<ulong> Derived RestSelfUser Inherited Members RestUser.Mention object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Avatar 获取此用户的头像图像的 URL。 public string? Avatar { get; } Property Value string Id 获取此用户的唯一标识符。 public ulong Id { get; } Property Value ulong IsBot 获取此用户是否为 Bot。 public bool? IsBot { get; } Property Value bool? UnionOpenId 获取此用户特殊关联应用的 openid。 public string? UnionOpenId { get; } Property Value string Remarks 此字段需要特殊申请并配置后才会返回。如需申请，请联系平台运营人员。 UnionUserAccount 获取此用户机器人关联的互联应用的用户信息。 public string? UnionUserAccount { get; } Property Value string Remarks 此字段与 UnionOpenId 关联的应用是同一个。如需申请，请联系平台运营人员。 Username 获取此用户的用户名。 public string Username { get; } Property Value string"
  },
  "api/QQBot.Rest.RestSelfUser.html": {
    "href": "api/QQBot.Rest.RestSelfUser.html",
    "title": "Class RestSelfUser | QQBot.Net 文档",
    "keywords": "Class RestSelfUser Namespace QQBot.Rest Assembly QQBot.Net.Rest.dll 表示一个基于 REST 的当前用户。 public class RestSelfUser : RestGuildUser, ISelfUser, IGuildUser, IUser, IEntity<string>, IMentionable, IEntity<ulong> Inheritance object RestEntity<string> RestUser RestGuildUser RestSelfUser Implements ISelfUser IGuildUser IUser IEntity<string> IMentionable IEntity<ulong> Inherited Members RestGuildUser.Id RestGuildUser.Username RestGuildUser.Avatar RestGuildUser.IsBot RestGuildUser.UnionOpenId RestGuildUser.UnionUserAccount RestUser.Mention object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/QQBot.Rest.RestUser.html": {
    "href": "api/QQBot.Rest.RestUser.html",
    "title": "Class RestUser | QQBot.Net 文档",
    "keywords": "Class RestUser Namespace QQBot.Rest Assembly QQBot.Net.Rest.dll 表示一个基于 REST 的用户。 public abstract class RestUser : RestEntity<string>, IUser, IEntity<string>, IMentionable Inheritance object RestEntity<string> RestUser Implements IUser IEntity<string> IMentionable Derived RestGuildUser Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RestUser(BaseQQBotClient, string) protected RestUser(BaseQQBotClient client, string id) Parameters client BaseQQBotClient id string Properties Mention 返回一个提及此对象的格式化字符串。 public string Mention { get; } Property Value string"
  },
  "api/QQBot.Rest.html": {
    "href": "api/QQBot.Rest.html",
    "title": "Namespace QQBot.Rest | QQBot.Net 文档",
    "keywords": "Namespace QQBot.Rest Classes Attachment 表示一个消息内的附件。 BaseQQBotClient 表示一个可以连接到 QQ API 的通用的 QQ Bot 客户端。 QQBotRestClient 表示一个基于 REST 的 QQ Bot 客户端。 QQBotRestConfig 定义 QQBot.Net 有关 REST 各种行为的配置类。 RestEntity<TId> 表示一个基于 REST 的实体。 RestGuildUser 表示一个基于 REST 的频道用户。 RestSelfUser 表示一个基于 REST 的当前用户。 RestUser 表示一个基于 REST 的用户。"
  },
  "api/QQBot.RetryMode.html": {
    "href": "api/QQBot.RetryMode.html",
    "title": "Enum RetryMode | QQBot.Net 文档",
    "keywords": "Enum RetryMode Namespace QQBot Assembly QQBot.Net.Core.dll 表示请求在发生错误时应如何处理。 [Flags] public enum RetryMode Fields AlwaysFail = 0 如果请求失败，将立即引发异常。 AlwaysRetry = RetryTimeouts | RetryRatelimit | Retry502 总是重试失败的请求，直到超时、取消令牌被触发或服务器响应非 502 错误。 Retry502 = 8 如果请求因 HTTP 状态码 502 而失败，则重试。 RetryRatelimit = 4 如果请求因速率限制而失败，则重试。 RetryTimeouts = 1 如果请求超时，则重试。"
  },
  "api/QQBot.RoleType.html": {
    "href": "api/QQBot.RoleType.html",
    "title": "Enum RoleType | QQBot.Net 文档",
    "keywords": "Enum RoleType Namespace QQBot Assembly QQBot.Net.Core.dll 表示身份组的类型。 public enum RoleType Fields ChannelManager = 5 身份组是由系统默认创建的子频道管理员。 Everyone = 1 身份组是默认的 @全体成员 全体成员身份组。 Manager = 2 身份组是由系统默认创建的管理员身份组。 Owner = 4 身份组是由系统默认创建的群主或创建者。 UserCreated = 0 身份组是由用户创建的。"
  },
  "api/QQBot.SessionStartLimit.html": {
    "href": "api/QQBot.SessionStartLimit.html",
    "title": "Class SessionStartLimit | QQBot.Net 文档",
    "keywords": "Class SessionStartLimit Namespace QQBot Assembly QQBot.Net.Core.dll Stores the information related to the gateway identify request. public class SessionStartLimit Inheritance object SessionStartLimit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MaxConcurrency Gets the maximum concurrent identify requests in a time window. public int MaxConcurrency { get; } Property Value int The maximum concurrent identify requests in a time window, limited to the same rate limit key. Remaining Gets the remaining number of session starts the current user is allowed. public int Remaining { get; } Property Value int The remaining amount of session starts the current user is allowed. ResetAfter Gets the number of milliseconds after which the limit resets. public int ResetAfter { get; } Property Value int The milliseconds until the limit resets back to the Total. Total Gets the total number of session starts the current user is allowed. public int Total { get; } Property Value int The maximum amount of session starts the current user is allowed."
  },
  "api/QQBot.SpeakPermission.html": {
    "href": "api/QQBot.SpeakPermission.html",
    "title": "Enum SpeakPermission | QQBot.Net 文档",
    "keywords": "Enum SpeakPermission Namespace QQBot Assembly QQBot.Net.Core.dll 表示子频道发言权限。 public enum SpeakPermission Fields Everyone = 1 任何人都可以发言。 SpecifiedMembers = 2 群主、管理员、及指定成员可以发言。"
  },
  "api/QQBot.TokenType.html": {
    "href": "api/QQBot.TokenType.html",
    "title": "Enum TokenType | QQBot.Net 文档",
    "keywords": "Enum TokenType Namespace QQBot Assembly QQBot.Net.Core.dll 表示客户端所使用的令牌类型。 public enum TokenType Fields AppSecret = 2 机器人密钥类型。 BearerToken = 0 OAuth2 令牌类型。 BotToken = 1 机器人令牌类型。"
  },
  "api/QQBot.TokenUtils.html": {
    "href": "api/QQBot.TokenUtils.html",
    "title": "Class TokenUtils | QQBot.Net 文档",
    "keywords": "Class TokenUtils Namespace QQBot Assembly QQBot.Net.Core.dll 提供一组用于处理 QQBot 登录令牌的辅助方法。 public static class TokenUtils Inheritance object TokenUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ValidateToken(TokenType, string) 检查指定类型的令牌的有效性。 public static void ValidateToken(TokenType tokenType, string token) Parameters tokenType TokenType 令牌的类型。 token string 要校验的令牌。 Exceptions ArgumentNullException 当提供的令牌值为 null、空字符串或仅包含空白字符时引发异常。 ArgumentException 当提供的令牌类型或令牌值无效时引发异常。"
  },
  "api/QQBot.WebSocket.BaseSocketClient.html": {
    "href": "api/QQBot.WebSocket.BaseSocketClient.html",
    "title": "Class BaseSocketClient | QQBot.Net 文档",
    "keywords": "Class BaseSocketClient Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的客户端的抽象基类。 public abstract class BaseSocketClient : BaseQQBotClient, IQQBotClient, IDisposable Inheritance object BaseQQBotClient BaseSocketClient Implements IQQBotClient IDisposable Derived QQBotShardedClient QQBotSocketClient Inherited Members BaseQQBotClient.Log BaseQQBotClient.LoggedIn BaseQQBotClient.LoggedOut BaseQQBotClient.SentRequest BaseQQBotClient.LoginState BaseQQBotClient.TokenType BaseQQBotClient.Dispose() BaseQQBotClient.LoginAsync(int, TokenType, string, bool) BaseQQBotClient.LogoutAsync() BaseQQBotClient.ConnectionState BaseQQBotClient.GetBotGatewayAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BaseConfig 获取此客户端使用的配置。 protected readonly QQBotSocketConfig BaseConfig Field Value QQBotSocketConfig Properties CurrentUser 获取登录到此客户端的当前用户；如果未登录，则为 null。 public virtual SocketSelfUser? CurrentUser { get; protected set; } Property Value SocketSelfUser Latency 获取到网关服务器的往返延迟估计值（以毫秒为单位）。 public abstract int Latency { get; protected set; } Property Value int Remarks 此往返估计值源于心跳包的延迟，不代表诸如发送消息等操作的真实延迟。 Rest 获取一个与此客户端共享状态的仅限于 REST 的客户端。 public abstract QQBotSocketRestClient Rest { get; } Property Value QQBotSocketRestClient Methods GetGuild(ulong) 获取一个频道。 public abstract SocketGuild? GetGuild(ulong id) Parameters id ulong 要获取的频道的 ID。 Returns SocketGuild 与指定的 id 关联的频道；如果未找到，则返回 null。 StartAsync() 启动客户端与 QQ 之间的连接。 public abstract Task StartAsync() Returns Task 一个表示异步启动操作的任务。 Remarks 当前方法会初始化客户端与 QQ 之间的连接。 important 此方法会在调用后立即返回，因为它会在另一个线程上初始化连接。 StopAsync() 停止客户端与 QQ 之间的连接。 public abstract Task StopAsync() Returns Task 一个表示异步停止操作的任务。 Events MessageReceived 当接收到新消息时引发。 public event Func<SocketUserMessage, Task> MessageReceived Event Type Func<SocketUserMessage, Task> Remarks 事件参数： SocketMessage 参数是新接收到的消息。"
  },
  "api/QQBot.WebSocket.GatewayReconnectException.html": {
    "href": "api/QQBot.WebSocket.GatewayReconnectException.html",
    "title": "Class GatewayReconnectException | QQBot.Net 文档",
    "keywords": "Class GatewayReconnectException Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 当网关客户端被请求重新连接时引发的异常。 public class GatewayReconnectException : Exception, ISerializable Inheritance object Exception GatewayReconnectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GatewayReconnectException(string) 初始化一个带有重新连接消息的 GatewayReconnectException 类的新实例。 public GatewayReconnectException(string message) Parameters message string 包含要求客户端重新连接原因的消息。"
  },
  "api/QQBot.WebSocket.ISocketMessageChannel.html": {
    "href": "api/QQBot.WebSocket.ISocketMessageChannel.html",
    "title": "Interface ISocketMessageChannel | QQBot.Net 文档",
    "keywords": "Interface ISocketMessageChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的消息频道，可以发送和接收消息。 public interface ISocketMessageChannel : IMessageChannel, IChannel, IEntity<string> Inherited Members IMessageChannel.SendMessageAsync(string, IMarkdownContent, FileAttachment?, Embed, Ark, MessageReference, IUserMessage, RequestOptions) IEntity<string>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CachedMessages 获取此频道缓存的所有消息。 IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> Remarks warning 要想通过此属性获取缓存的消息，需要启用缓存功能，否则此属性将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此属性从本地的内存缓存中获取消息实体，不会向 QQ 服务端发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。"
  },
  "api/QQBot.WebSocket.ISocketPrivateChannel.html": {
    "href": "api/QQBot.WebSocket.ISocketPrivateChannel.html",
    "title": "Interface ISocketPrivateChannel | QQBot.Net 文档",
    "keywords": "Interface ISocketPrivateChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的私有频道。 public interface ISocketPrivateChannel : IPrivateChannel, IChannel, IEntity<string> Inherited Members IEntity<string>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Recipients 获取可以访问此频道的所有用户。 IReadOnlyCollection<SocketUser> Recipients { get; } Property Value IReadOnlyCollection<SocketUser>"
  },
  "api/QQBot.WebSocket.QQBotShardedClient.html": {
    "href": "api/QQBot.WebSocket.QQBotShardedClient.html",
    "title": "Class QQBotShardedClient | QQBot.Net 文档",
    "keywords": "Class QQBotShardedClient Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll Represents a sharded QQBot client. public class QQBotShardedClient : BaseSocketClient, IQQBotClient, IDisposable Inheritance object BaseQQBotClient BaseSocketClient QQBotShardedClient Implements IQQBotClient IDisposable Inherited Members BaseSocketClient.BaseConfig BaseSocketClient.MessageReceived BaseQQBotClient.Log BaseQQBotClient.LoggedIn BaseQQBotClient.LoggedOut BaseQQBotClient.SentRequest BaseQQBotClient.LoginState BaseQQBotClient.TokenType BaseQQBotClient.Dispose() BaseQQBotClient.LoginAsync(int, TokenType, string, bool) BaseQQBotClient.LogoutAsync() BaseQQBotClient.ConnectionState BaseQQBotClient.GetBotGatewayAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QQBotShardedClient() Creates a new REST/WebSocket QQBot client. public QQBotShardedClient() QQBotShardedClient(QQBotSocketConfig) Creates a new REST/WebSocket QQBot client. public QQBotShardedClient(QQBotSocketConfig config) Parameters config QQBotSocketConfig QQBotShardedClient(int[]) Creates a new REST/WebSocket QQBot client. public QQBotShardedClient(int[] ids) Parameters ids int[] QQBotShardedClient(int[]?, QQBotSocketConfig) Creates a new REST/WebSocket QQBot client. public QQBotShardedClient(int[]? ids, QQBotSocketConfig config) Parameters ids int[] config QQBotSocketConfig Properties CurrentUser 获取登录到此客户端的当前用户；如果未登录，则为 null。 public override SocketSelfUser? CurrentUser { get; protected set; } Property Value SocketSelfUser Latency 获取到网关服务器的往返延迟估计值（以毫秒为单位）。 public override int Latency { get; protected set; } Property Value int Remarks 此往返估计值源于心跳包的延迟，不代表诸如发送消息等操作的真实延迟。 Rest Provides access to a REST-only client with a shared state from this client. public override QQBotSocketRestClient Rest { get; } Property Value QQBotSocketRestClient Shards Gets the shards that this client is connected to. public IReadOnlyCollection<QQBotSocketClient> Shards { get; } Property Value IReadOnlyCollection<QQBotSocketClient> Methods GetGuild(ulong) 获取一个频道。 public override SocketGuild? GetGuild(ulong id) Parameters id ulong 要获取的频道的 ID。 Returns SocketGuild 与指定的 id 关联的频道；如果未找到，则返回 null。 GetShard(int) Gets the shard for the provided ID. public QQBotSocketClient? GetShard(int id) Parameters id int The ID of the shard to get. Returns QQBotSocketClient The shard with the provided ID, or null if none is found. GetShardFor(IGuild) Gets the shard for the provided guild. public QQBotSocketClient? GetShardFor(IGuild guild) Parameters guild IGuild The guild to get the shard ID for. Returns QQBotSocketClient The shard for the provided guild. GetShardIdFor(IGuild) Gets the shard ID for the provided guild. public int GetShardIdFor(IGuild guild) Parameters guild IGuild The guild to get the shard ID for. Returns int The shard ID for the provided guild. StartAsync() 启动客户端与 QQ 之间的连接。 public override Task StartAsync() Returns Task 一个表示异步启动操作的任务。 Remarks 当前方法会初始化客户端与 QQ 之间的连接。 important 此方法会在调用后立即返回，因为它会在另一个线程上初始化连接。 StopAsync() 停止客户端与 QQ 之间的连接。 public override Task StopAsync() Returns Task 一个表示异步停止操作的任务。 Events ShardConnected Fired when a shard is connected to the QQBot gateway. public event Func<QQBotSocketClient, Task> ShardConnected Event Type Func<QQBotSocketClient, Task> ShardDisconnected Fired when a shard is disconnected from the QQBot gateway. public event Func<Exception, QQBotSocketClient, Task> ShardDisconnected Event Type Func<Exception, QQBotSocketClient, Task> ShardLatencyUpdated Fired when a shard receives a heartbeat from the QQBot gateway. public event Func<int, int, QQBotSocketClient, Task> ShardLatencyUpdated Event Type Func<int, int, QQBotSocketClient, Task> ShardReady Fired when a guild data for a shard has finished downloading. public event Func<QQBotSocketClient, Task> ShardReady Event Type Func<QQBotSocketClient, Task>"
  },
  "api/QQBot.WebSocket.QQBotSocketClient.html": {
    "href": "api/QQBot.WebSocket.QQBotSocketClient.html",
    "title": "Class QQBotSocketClient | QQBot.Net 文档",
    "keywords": "Class QQBotSocketClient Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的 QQ Bot 客户端。 public class QQBotSocketClient : BaseSocketClient, IQQBotClient, IDisposable Inheritance object BaseQQBotClient BaseSocketClient QQBotSocketClient Implements IQQBotClient IDisposable Inherited Members BaseSocketClient.BaseConfig BaseSocketClient.CurrentUser BaseSocketClient.MessageReceived BaseQQBotClient.Log BaseQQBotClient.LoggedIn BaseQQBotClient.LoggedOut BaseQQBotClient.SentRequest BaseQQBotClient.LoginState BaseQQBotClient.TokenType BaseQQBotClient.Dispose() BaseQQBotClient.LoginAsync(int, TokenType, string, bool) BaseQQBotClient.LogoutAsync() BaseQQBotClient.GetBotGatewayAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QQBotSocketClient() 初始化一个 QQBotSocketClient 类的新实例。 public QQBotSocketClient() QQBotSocketClient(QQBotSocketConfig) 初始化一个 QQBotSocketClient 类的新实例。 public QQBotSocketClient(QQBotSocketConfig config) Parameters config QQBotSocketConfig 用于配置此客户端的配置对象。 Properties ConnectionState 获取当前连接的状态。 public override ConnectionState ConnectionState { get; } Property Value ConnectionState Latency 获取到网关服务器的往返延迟估计值（以毫秒为单位）。 public override int Latency { get; protected set; } Property Value int Remarks 此往返估计值源于心跳包的延迟，不代表诸如发送消息等操作的真实延迟。 Rest 获取一个与此客户端共享状态的仅限于 REST 的客户端。 public override QQBotSocketRestClient Rest { get; } Property Value QQBotSocketRestClient ShardId 获取此客户端的分片 ID。 public int ShardId { get; } Property Value int Methods GetGuild(ulong) 获取一个频道。 public override SocketGuild? GetGuild(ulong id) Parameters id ulong 要获取的频道的 ID。 Returns SocketGuild 与指定的 id 关联的频道；如果未找到，则返回 null。 GetUserChannel(Guid) 获取一个用户单聊频道。 public SocketUserChannel? GetUserChannel(Guid id) Parameters id Guid 参与到单聊频道中另一位用户的用户 ID。 Returns SocketUserChannel 如果找到了指定用户的单聊频道，则返回该单聊频道；否则返回 null。 StartAsync() 启动客户端与 QQ 之间的连接。 public override Task StartAsync() Returns Task 一个表示异步启动操作的任务。 Remarks 当前方法会初始化客户端与 QQ 之间的连接。 important 此方法会在调用后立即返回，因为它会在另一个线程上初始化连接。 StopAsync() 停止客户端与 QQ 之间的连接。 public override Task StopAsync() Returns Task 一个表示异步停止操作的任务。 Events Connected 当连接到 QQ Bot 网关时引发。 public event Func<Task> Connected Event Type Func<Task> Disconnected 当与 QQ Bot 网关断开连接时引发。 public event Func<Exception, Task> Disconnected Event Type Func<Exception, Task> GuildAvailable 当服务器状态变更为可用时引发。 public event Func<SocketGuild, Task> GuildAvailable Event Type Func<SocketGuild, Task> Remarks 服务器状态变更为可用，表示此服务器实体已完整缓存基础数据，并与网关同步。 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。 事件参数： SocketGuild 参数是服务器状态变更为可用的服务器。 GuildUnavailable 当服务器状态变更为不可用时引发。 public event Func<SocketGuild, Task> GuildUnavailable Event Type Func<SocketGuild, Task> Remarks 服务器状态变更为不可用，表示此服务器实体丢失与网关的同步，所缓存的数据不可靠，这通常发生在服务器被删除、当前用户离开服务器、网关连接断开等情况。 事件参数： SocketGuild 参数是服务器状态变更为不可用的服务器。 LatencyUpdated 当网关延迟已更新时引发。 public event Func<int, int, Task> LatencyUpdated Event Type Func<int, int, Task> Remarks 事件参数： int 参数是更新前的延迟（毫秒）。 int 参数是更新后的延迟（毫秒）。 Ready 当此 Bot 准备就绪以供用户代码访问时引发。 public event Func<Task> Ready Event Type Func<Task> Remarks 此事件引发的时机可由 StartupCacheFetchMode 配置指定。"
  },
  "api/QQBot.WebSocket.QQBotSocketConfig.html": {
    "href": "api/QQBot.WebSocket.QQBotSocketConfig.html",
    "title": "Class QQBotSocketConfig | QQBot.Net 文档",
    "keywords": "Class QQBotSocketConfig Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个用于 QQBotSocketClient 的配置类。 public class QQBotSocketConfig : QQBotRestConfig Inheritance object QQBotConfig QQBotRestConfig QQBotSocketConfig Inherited Members QQBotRestConfig.RestClientProvider QQBotConfig.APIVersion QQBotConfig.Version QQBotConfig.UserAgent QQBotConfig.APIUrl QQBotConfig.SandboxAPIUrl QQBotConfig.AccessEnvironment QQBotConfig.DefaultRequestTimeout QQBotConfig.MaxGuildsPerBatch QQBotConfig.MaxMembersPerBatch QQBotConfig.MaxReactionUsersPerBatch QQBotConfig.DefaultRetryMode QQBotConfig.DefaultRatelimitCallback QQBotConfig.LogLevel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples 以下代码启用了消息缓存，并配置客户端在服务器可用时始终下载用户。 var config = new QQBotSocketConfig { AlwaysDownloadUsers = true, MessageCacheSize = 100 }; var client = new QQBotSocketClient(config); Remarks 此配置基于 QQBotRestConfig，在与 REST 有关的配置的基础上，定义了有关网关的配置。 Constructors QQBotSocketConfig() 初始化一个 QQBotSocketConfig 类的新实例。 public QQBotSocketConfig() Fields GatewayEncoding 获取网关使用的数据格式。 public const string GatewayEncoding = \"json\" Field Value string RtcpIntervalMilliseconds 获取语音客户端 RTP 连接中发送 RTCP 数据报的时间间隔（毫秒）。 public const int RtcpIntervalMilliseconds = 5000 Field Value int Properties AlwaysDownloadUsers 获取或设置是否在服务器可用时始终下载所有用户。 public bool AlwaysDownloadUsers { get; set; } Property Value bool ConnectionTimeout 获取或设置连接到网关时的超时时间间隔（毫秒）。 public int ConnectionTimeout { get; set; } Property Value int GatewayHost 获取或设置要连接的网关地址。如果为 null，则客户端将会通过 API 请求获取网关地址。 public string? GatewayHost { get; set; } Property Value string GatewayIntents 获取或设置网关意图以限制从 QQ Bot 网关下发的事件。默认值为 AllPublicDomain。 public GatewayIntents GatewayIntents { get; set; } Property Value GatewayIntents Remarks 更多信息，请参见 QQ Bot API 官方文档上的有关网关意图的说明： v1v2。 HandlerTimeout 获取或设置阻塞网关线程的事件处理程序的超时时间间隔（毫秒），超过此时间间隔的阻塞网关线程的事件处理程序会被日志记录警告。将此属性设置为 null 将禁用此检查。 public int? HandlerTimeout { get; set; } Property Value int? IdentifyMaxConcurrency Gets or sets the maximum identify concurrency. public int IdentifyMaxConcurrency { get; set; } Property Value int Remarks This information is provided by Discord. It is only used when using a QQBotShardedClient and auto-sharding is disabled. LargeNumberOfGuildsThreshold 获取或设置被视为加入大量服务器的阈值数量。 public uint LargeNumberOfGuildsThreshold { get; set; } Property Value uint See Also Auto LogGatewayIntentWarnings 获取或设置是否记录与服务器意图和事件相关的警告。 public bool LogGatewayIntentWarnings { get; set; } Property Value bool MessageCacheSize 获取或设置应在缓存中保留的每个频道的消息数量。将此属性设置为零将完全禁用消息缓存。 public int MessageCacheSize { get; set; } Property Value int MessageQueueProvider 获取或设置用于创建消息队列的委托。 public MessageQueueProvider MessageQueueProvider { get; set; } Property Value MessageQueueProvider ShardId 获取或设置此分片的 ID。必须小于 TotalShards。 public int? ShardId { get; set; } Property Value int? SmallNumberOfGuildsThreshold 获取或设置被视为加入少量服务器的阈值数量。 public uint SmallNumberOfGuildsThreshold { get; set; } Property Value uint See Also Auto StartupCacheFetchMode 获取或设置在启动时缓存获取模式。 public StartupCacheFetchMode StartupCacheFetchMode { get; set; } Property Value StartupCacheFetchMode Remarks 此属性用于指定客户端在启动时如何缓存基础数据，并影响 Ready 事件的引发时机。 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。 SuppressUnknownDispatchWarnings 获取或设置是否应记录未知的网关事件消息。 public bool SuppressUnknownDispatchWarnings { get; set; } Property Value bool TotalShards 获取或设置此应用程序的总分片数。 public int? TotalShards { get; set; } Property Value int? Remarks 如果在分片客户端中将此属性设置为 null，则 Bot 将从 API 获取推荐的分片数量并使用。 WebSocketProvider 获取或设置用于创建 WebSocket 客户端的委托。 public WebSocketProvider WebSocketProvider { get; set; } Property Value WebSocketProvider"
  },
  "api/QQBot.WebSocket.QQBotSocketRestClient.html": {
    "href": "api/QQBot.WebSocket.QQBotSocketRestClient.html",
    "title": "Class QQBotSocketRestClient | QQBot.Net 文档",
    "keywords": "Class QQBotSocketRestClient Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个用于网关客户端内的 REST 客户端。 public class QQBotSocketRestClient : QQBotRestClient, IQQBotClient, IDisposable Inheritance object BaseQQBotClient QQBotRestClient QQBotSocketRestClient Implements IQQBotClient IDisposable Inherited Members QQBotRestClient.CurrentUser BaseQQBotClient.Log BaseQQBotClient.LoggedIn BaseQQBotClient.LoggedOut BaseQQBotClient.SentRequest BaseQQBotClient.LoginState BaseQQBotClient.TokenType BaseQQBotClient.Dispose() BaseQQBotClient.ConnectionState BaseQQBotClient.GetBotGatewayAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LoginAsync(int, TokenType, string, bool) 登录到 QQ API。 public Task LoginAsync(int appId, TokenType tokenType, string token, bool validateToken = true) Parameters appId int 要使用的应用 ID。 tokenType TokenType 要使用的令牌类型。 token string 要使用的令牌。 validateToken bool 是否验证令牌。 Returns Task 一个表示异步登录操作的任务。 Remarks 验证令牌的操作是通过 ValidateToken(TokenType, string) 方法完成的。 此方法用于向当前客户端设置后续 API 请求的身份验证信息，获取并设置当前所登录用户的信息。 Exceptions NotSupportedException 网关客户端内的 REST 客户端无法进行登录或退出登录。 LogoutAsync() 从 QQ API 退出登录。 public Task LogoutAsync() Returns Task 一个表示异步退出登录操作的任务。 Remarks 此方法用于清除当前客户端的身份验证信息及所缓存的当前所登录的用户信息。 Exceptions NotSupportedException 网关客户端内的 REST 客户端无法进行登录或退出登录。"
  },
  "api/QQBot.WebSocket.SocketApplicationChannel.html": {
    "href": "api/QQBot.WebSocket.SocketApplicationChannel.html",
    "title": "Class SocketApplicationChannel | QQBot.Net 文档",
    "keywords": "Class SocketApplicationChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示服务器中的一个基于网关的直播子频道。 public class SocketApplicationChannel : SocketGuildChannel, IApplicationChannel, INestedChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inheritance object SocketEntity<string> SocketChannel SocketGuildChannel SocketApplicationChannel Implements IApplicationChannel INestedChannel IGuildChannel IChannel IEntity<string> IUpdateable IEntity<ulong> Inherited Members SocketGuildChannel.Id SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Type SocketGuildChannel.Position SocketGuildChannel.CreatorId SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties ApplicationType 获取此子频道的应用类型。 public ChannelApplication? ApplicationType { get; } Property Value ChannelApplication? CategoryId 获取此嵌套频道在子频道列表中所属的分组频道的 ID。 public ulong? CategoryId { get; } Property Value ulong? Remarks 如果当前频道不属于任何分组频道，则会返回 null。 Permission 获取当前用户在此频道的权限。 public ChannelPermission? Permission { get; } Property Value ChannelPermission? PrivateType 获取此子频道的私密类型。 public ChannelPrivateType? PrivateType { get; } Property Value ChannelPrivateType? SpeakPermission 获取此子频道的发言权限。 public SpeakPermission? SpeakPermission { get; } Property Value SpeakPermission?"
  },
  "api/QQBot.WebSocket.SocketCategoryChannel.html": {
    "href": "api/QQBot.WebSocket.SocketCategoryChannel.html",
    "title": "Class SocketCategoryChannel | QQBot.Net 文档",
    "keywords": "Class SocketCategoryChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的分组频道。 public class SocketCategoryChannel : SocketGuildChannel, ICategoryChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inheritance object SocketEntity<string> SocketChannel SocketGuildChannel SocketCategoryChannel Implements ICategoryChannel IGuildChannel IChannel IEntity<string> IUpdateable IEntity<ulong> Inherited Members SocketGuildChannel.Id SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Type SocketGuildChannel.Position SocketGuildChannel.CreatorId SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/QQBot.WebSocket.SocketChannel.html": {
    "href": "api/QQBot.WebSocket.SocketChannel.html",
    "title": "Class SocketChannel | QQBot.Net 文档",
    "keywords": "Class SocketChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的频道。 public abstract class SocketChannel : SocketEntity<string>, IChannel, IEntity<string> Inheritance object SocketEntity<string> SocketChannel Implements IChannel IEntity<string> Derived SocketDMChannel SocketGroupChannel SocketGuildChannel SocketUserChannel Inherited Members SocketEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/QQBot.WebSocket.SocketDMChannel.html": {
    "href": "api/QQBot.WebSocket.SocketDMChannel.html",
    "title": "Class SocketDMChannel | QQBot.Net 文档",
    "keywords": "Class SocketDMChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的子频道用户私聊频道。 public class SocketDMChannel : SocketChannel, IDMChannel, ISocketPrivateChannel, IPrivateChannel, ISocketMessageChannel, IMessageChannel, IChannel, IEntity<string> Inheritance object SocketEntity<string> SocketChannel SocketDMChannel Implements IDMChannel ISocketPrivateChannel IPrivateChannel ISocketMessageChannel IMessageChannel IChannel IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CachedMessages 获取此频道缓存的所有消息。 public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> Remarks warning 要想通过此属性获取缓存的消息，需要启用缓存功能，否则此属性将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此属性从本地的内存缓存中获取消息实体，不会向 QQ 服务端发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 Id 获取此子频道内用户私聊频道的唯一标识符。 public ulong Id { get; } Property Value ulong Recipient 获取参与到此私聊频道的另外一位用户。 public SocketUser Recipient { get; } Property Value SocketUser Methods SendMessageAsync(string?, IMarkdownContent?, FileAttachment?, Embed?, Ark?, MessageReference?, IUserMessage?, RequestOptions?) 向此频道发送消息。 public Task<Cacheable<IUserMessage, string>> SendMessageAsync(string? content = null, IMarkdownContent? markdown = null, FileAttachment? attachment = null, Embed? embed = null, Ark? ark = null, MessageReference? messageReference = null, IUserMessage? passiveSource = null, RequestOptions? options = null) Parameters content string 要发送的消息内容。 markdown IMarkdownContent 要发送的 Markdown 消息内容。 attachment FileAttachment? 要发送的文件附件。 embed Embed 要发送的嵌入式消息内容。 ark Ark 要发送的模板消息内容。 messageReference MessageReference 消息引用，用于回复消息。 passiveSource IUserMessage 被动消息来源。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, string>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。"
  },
  "api/QQBot.WebSocket.SocketEntity-1.html": {
    "href": "api/QQBot.WebSocket.SocketEntity-1.html",
    "title": "Class SocketEntity<TId> | QQBot.Net 文档",
    "keywords": "Class SocketEntity<TId> Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的具有唯一标识符的实体。 public abstract class SocketEntity<TId> : IEntity<TId> where TId : IEquatable<TId> Type Parameters TId 唯一标识符的类型。 Inheritance object SocketEntity<TId> Implements IEntity<TId> Derived SocketChannel SocketGuild SocketMessage SocketUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id 获取此实体的唯一标识符。 public TId Id { get; } Property Value TId"
  },
  "api/QQBot.WebSocket.SocketForumChannel.html": {
    "href": "api/QQBot.WebSocket.SocketForumChannel.html",
    "title": "Class SocketForumChannel | QQBot.Net 文档",
    "keywords": "Class SocketForumChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示服务器中的一个基于网关的论坛子频道。 public class SocketForumChannel : SocketGuildChannel, IForumChannel, INestedChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inheritance object SocketEntity<string> SocketChannel SocketGuildChannel SocketForumChannel Implements IForumChannel INestedChannel IGuildChannel IChannel IEntity<string> IUpdateable IEntity<ulong> Inherited Members SocketGuildChannel.Id SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Type SocketGuildChannel.Position SocketGuildChannel.CreatorId SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CategoryId 获取此嵌套频道在子频道列表中所属的分组频道的 ID。 public ulong? CategoryId { get; } Property Value ulong? Remarks 如果当前频道不属于任何分组频道，则会返回 null。 Permission 获取当前用户在此频道的权限。 public ChannelPermission? Permission { get; } Property Value ChannelPermission? PrivateType 获取此子频道的私密类型。 public ChannelPrivateType? PrivateType { get; } Property Value ChannelPrivateType? SpeakPermission 获取此子频道的发言权限。 public SpeakPermission? SpeakPermission { get; } Property Value SpeakPermission?"
  },
  "api/QQBot.WebSocket.SocketGroupChannel.html": {
    "href": "api/QQBot.WebSocket.SocketGroupChannel.html",
    "title": "Class SocketGroupChannel | QQBot.Net 文档",
    "keywords": "Class SocketGroupChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的群组频道。 public class SocketGroupChannel : SocketChannel, IGroupChannel, IEntity<Guid>, ISocketMessageChannel, IMessageChannel, IChannel, IEntity<string> Inheritance object SocketEntity<string> SocketChannel SocketGroupChannel Implements IGroupChannel IEntity<Guid> ISocketMessageChannel IMessageChannel IChannel IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CachedMessages 获取此频道缓存的所有消息。 public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> Remarks warning 要想通过此属性获取缓存的消息，需要启用缓存功能，否则此属性将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此属性从本地的内存缓存中获取消息实体，不会向 QQ 服务端发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 Id 获取此群组频道的唯一标识符。 public Guid Id { get; } Property Value Guid Methods SendMessageAsync(string?, IMarkdownContent?, FileAttachment?, Embed?, Ark?, MessageReference?, IUserMessage?, RequestOptions?) 向此频道发送消息。 public Task<Cacheable<IUserMessage, string>> SendMessageAsync(string? content = null, IMarkdownContent? markdown = null, FileAttachment? attachment = null, Embed? embed = null, Ark? ark = null, MessageReference? messageReference = null, IUserMessage? passiveSource = null, RequestOptions? options = null) Parameters content string 要发送的消息内容。 markdown IMarkdownContent 要发送的 Markdown 消息内容。 attachment FileAttachment? 要发送的文件附件。 embed Embed 要发送的嵌入式消息内容。 ark Ark 要发送的模板消息内容。 messageReference MessageReference 消息引用，用于回复消息。 passiveSource IUserMessage 被动消息来源。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, string>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。"
  },
  "api/QQBot.WebSocket.SocketGuild.html": {
    "href": "api/QQBot.WebSocket.SocketGuild.html",
    "title": "Class SocketGuild | QQBot.Net 文档",
    "keywords": "Class SocketGuild Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的频道。 public class SocketGuild : SocketEntity<ulong>, IGuild, IEntity<ulong>, IUpdateable Inheritance object SocketEntity<ulong> SocketGuild Implements IGuild IEntity<ulong> IUpdateable Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CategoryChannels 获取此服务器中的所有分组频道。 public IReadOnlyCollection<SocketCategoryChannel> CategoryChannels { get; } Property Value IReadOnlyCollection<SocketCategoryChannel> Channels 获取此服务器的所有频道。 public IReadOnlyCollection<SocketGuildChannel> Channels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> CurrentUser 获取当前登录的用户。 public SocketGuildMember? CurrentUser { get; } Property Value SocketGuildMember Description 获取此频道的描述。 public string Description { get; } Property Value string DownloadedMemberCount 获取此服务器内已缓存的成员数量。 public int DownloadedMemberCount { get; } Property Value int IsAvailable 确定此服务器实体是否已准备就绪以供用户代码访问。 public bool IsAvailable { get; } Property Value bool Remarks note 此属性仅对基于网关连接的客户端有意义。 此属性为 true 表示，此服务器实体已完整缓存基础数据，并与网关同步。 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。 IsConnected 获取此服务器是否已连接至网关。 public bool IsConnected { get; } Property Value bool IsOwner 获取当前用户是否是此频道的创建者。 public bool IsOwner { get; } Property Value bool JoinedAt 获取当前用户加入此频道的时间。 public DateTimeOffset JoinedAt { get; } Property Value DateTimeOffset MaxMembers 获取可以加入到此频道的最大成员数量。 public int MaxMembers { get; } Property Value int MemberCount 获取此频道的成员数量。 public int MemberCount { get; } Property Value int Name 获取此频道的名称。 public string Name { get; } Property Value string OwnerId 获取此频道创建者用户的 ID。 public ulong OwnerId { get; } Property Value ulong TextChannels 获取此服务器中所有具有文字聊天能力的频道。 public IReadOnlyCollection<SocketTextChannel> TextChannels { get; } Property Value IReadOnlyCollection<SocketTextChannel> Remarks 语音频道也是一种文字频道，此属性本意用于获取所有具有文字聊天能力的频道，通过此方法获取到的文字频道列表中也包含了语音频道。 如需获取频道的实际类型，请参考 GetChannelType(IChannel)。 VoiceChannels 获取此服务器中所有具有语音聊天能力的频道。 public IReadOnlyCollection<SocketVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection<SocketVoiceChannel> Methods GetChannel(ulong) 获取此服务器内的频道。 public SocketGuildChannel? GetChannel(ulong id) Parameters id ulong 要获取的频道的 ID。 Returns SocketGuildChannel 与指定的 id 关联的频道；如果未找到，则返回 null。 GetTextChannel(ulong) 获取此频道中所有具有文字聊天能力的子频道。 public SocketTextChannel? GetTextChannel(ulong id) Parameters id ulong 要获取的子频道的 ID。 Returns SocketTextChannel 与指定的 id 关联的子频道；如果未找到，则返回 null。 GetUser(ulong) 获取此频道内的用户。 public SocketGuildMember? GetUser(ulong id) Parameters id ulong 要获取的用户的 ID。 Returns SocketGuildMember 与指定的 id 关联的用户；如果未找到，则返回 null。 Remarks 此方法可能返回 null，因为在大型频道中，用户列表的缓存可能不完整。 UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 QQ Bot REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 QQ Bot 服务端的数据。"
  },
  "api/QQBot.WebSocket.SocketGuildChannel.html": {
    "href": "api/QQBot.WebSocket.SocketGuildChannel.html",
    "title": "Class SocketGuildChannel | QQBot.Net 文档",
    "keywords": "Class SocketGuildChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的频道内的子频道。 public class SocketGuildChannel : SocketChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inheritance object SocketEntity<string> SocketChannel SocketGuildChannel Implements IGuildChannel IChannel IEntity<string> IUpdateable IEntity<ulong> Derived SocketApplicationChannel SocketCategoryChannel SocketForumChannel SocketLiveStreamChannel SocketTextChannel SocketVoiceChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CreatorId 获取创建此频道的用户的 ID。 public ulong? CreatorId { get; } Property Value ulong? Guild 获取此频道所属的服务器。 public SocketGuild Guild { get; } Property Value SocketGuild Id 获取此频道的唯一标识符。 public ulong Id { get; } Property Value ulong Name 获取此频道的名称。 public string Name { get; } Property Value string Position 获取此子频道在子频道列表中的位置。 public int Position { get; } Property Value int Remarks 更小的数值表示更靠近列表顶部的位置。 Type 获取此子频道的类型。 public ChannelType Type { get; } Property Value ChannelType Methods ToString() 获取此频道的名称。 public override string ToString() Returns string UpdateAsync(RequestOptions?) 通过 REST API 获取此实体对象的最新状态，并替换当前对象的属性。 public virtual Task UpdateAsync(RequestOptions? options = null) Parameters options RequestOptions 发送请求时要使用的选项。 Returns Task 一个表示异步更新操作的任务。 Remarks warning 此方法将从 QQ Bot REST API 获取最新数据，并替换当前对象的属性，而非使用指定的属性修改 QQ Bot 服务端的数据。"
  },
  "api/QQBot.WebSocket.SocketGuildMember.html": {
    "href": "api/QQBot.WebSocket.SocketGuildMember.html",
    "title": "Class SocketGuildMember | QQBot.Net 文档",
    "keywords": "Class SocketGuildMember Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的频道用户。 public class SocketGuildMember : SocketGuildUser, IGuildMember, IGuildUser, IUser, IEntity<string>, IMentionable, IEntity<ulong> Inheritance object SocketEntity<string> SocketUser SocketGuildUser SocketGuildMember Implements IGuildMember IGuildUser IUser IEntity<string> IMentionable IEntity<ulong> Inherited Members SocketGuildUser.Id SocketUser.Mention object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Avatar 获取此用户的头像图像的 URL。 public override string? Avatar { get; } Property Value string IsBot 获取此用户是否为 Bot。 public override bool? IsBot { get; } Property Value bool? JoinedAt 获取此用户加入该频道的时间。 public DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? Nickname 获取此用户的昵称。 public string? Nickname { get; } Property Value string RoleIds 获取此用户在该频道内拥有的所有身份组的 ID。 public IReadOnlyCollection<uint>? RoleIds { get; } Property Value IReadOnlyCollection<uint> UnionOpenId 获取此用户特殊关联应用的 openid。 public override string? UnionOpenId { get; } Property Value string Remarks 此字段需要特殊申请并配置后才会返回。如需申请，请联系平台运营人员。 UnionUserAccount 获取此用户机器人关联的互联应用的用户信息。 public override string? UnionUserAccount { get; } Property Value string Remarks 此字段与 UnionOpenId 关联的应用是同一个。如需申请，请联系平台运营人员。 Username 获取此用户的用户名。 public override string Username { get; } Property Value string"
  },
  "api/QQBot.WebSocket.SocketGuildUser.html": {
    "href": "api/QQBot.WebSocket.SocketGuildUser.html",
    "title": "Class SocketGuildUser | QQBot.Net 文档",
    "keywords": "Class SocketGuildUser Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的频道用户。 public abstract class SocketGuildUser : SocketUser, IGuildUser, IUser, IEntity<string>, IMentionable, IEntity<ulong> Inheritance object SocketEntity<string> SocketUser SocketGuildUser Implements IGuildUser IUser IEntity<string> IMentionable IEntity<ulong> Derived SocketGuildMember SocketSelfUser Inherited Members SocketUser.Mention object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Avatar 获取此用户的头像图像的 URL。 public abstract string? Avatar { get; } Property Value string Id 获取此用户的唯一标识符。 public ulong Id { get; } Property Value ulong IsBot 获取此用户是否为 Bot。 public abstract bool? IsBot { get; } Property Value bool? UnionOpenId 获取此用户特殊关联应用的 openid。 public abstract string? UnionOpenId { get; } Property Value string Remarks 此字段需要特殊申请并配置后才会返回。如需申请，请联系平台运营人员。 UnionUserAccount 获取此用户机器人关联的互联应用的用户信息。 public abstract string? UnionUserAccount { get; } Property Value string Remarks 此字段与 UnionOpenId 关联的应用是同一个。如需申请，请联系平台运营人员。 Username 获取此用户的用户名。 public abstract string Username { get; } Property Value string"
  },
  "api/QQBot.WebSocket.SocketLiveStreamChannel.html": {
    "href": "api/QQBot.WebSocket.SocketLiveStreamChannel.html",
    "title": "Class SocketLiveStreamChannel | QQBot.Net 文档",
    "keywords": "Class SocketLiveStreamChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示服务器中的一个基于网关的直播子频道。 public class SocketLiveStreamChannel : SocketGuildChannel, ILiveStreamChannel, INestedChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inheritance object SocketEntity<string> SocketChannel SocketGuildChannel SocketLiveStreamChannel Implements ILiveStreamChannel INestedChannel IGuildChannel IChannel IEntity<string> IUpdateable IEntity<ulong> Inherited Members SocketGuildChannel.Id SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Type SocketGuildChannel.Position SocketGuildChannel.CreatorId SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CategoryId 获取此嵌套频道在子频道列表中所属的分组频道的 ID。 public ulong? CategoryId { get; } Property Value ulong? Remarks 如果当前频道不属于任何分组频道，则会返回 null。 Permission 获取当前用户在此频道的权限。 public ChannelPermission? Permission { get; } Property Value ChannelPermission? PrivateType 获取此子频道的私密类型。 public ChannelPrivateType? PrivateType { get; } Property Value ChannelPrivateType? SpeakPermission 获取此子频道的发言权限。 public SpeakPermission? SpeakPermission { get; } Property Value SpeakPermission?"
  },
  "api/QQBot.WebSocket.SocketMessage.html": {
    "href": "api/QQBot.WebSocket.SocketMessage.html",
    "title": "Class SocketMessage | QQBot.Net 文档",
    "keywords": "Class SocketMessage Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的通用消息。 public abstract class SocketMessage : SocketEntity<string>, IMessage, IEntity<string> Inheritance object SocketEntity<string> SocketMessage Implements IMessage IEntity<string> Derived SocketUserMessage Inherited Members SocketEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SocketMessage(QQBotSocketClient, string, ISocketMessageChannel, SocketUser, MessageSource) protected SocketMessage(QQBotSocketClient client, string id, ISocketMessageChannel channel, SocketUser author, MessageSource source) Parameters client QQBotSocketClient id string channel ISocketMessageChannel author SocketUser source MessageSource Properties Attachments 获取此消息中包含的所有附件。 public virtual IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> Author 获取消息的发送者。 public SocketUser Author { get; } Property Value SocketUser Channel 获取消息的来源频道。 public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel Content 获取消息的内容。 public string Content { get; } Property Value string Embeds public IReadOnlyCollection<Embed> Embeds { get; } Property Value IReadOnlyCollection<Embed> MentionedEveryone 获取此消息是否提及了全体成员。 public bool? MentionedEveryone { get; } Property Value bool? Source 获取消息的来源 public MessageSource Source { get; } Property Value MessageSource Timestamp 获取消息的创建时间。 public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset"
  },
  "api/QQBot.WebSocket.SocketSelfUser.html": {
    "href": "api/QQBot.WebSocket.SocketSelfUser.html",
    "title": "Class SocketSelfUser | QQBot.Net 文档",
    "keywords": "Class SocketSelfUser Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的当前用户。 public class SocketSelfUser : SocketGuildUser, ISelfUser, IGuildUser, IUser, IEntity<string>, IMentionable, IEntity<ulong> Inheritance object SocketEntity<string> SocketUser SocketGuildUser SocketSelfUser Implements ISelfUser IGuildUser IUser IEntity<string> IMentionable IEntity<ulong> Inherited Members SocketGuildUser.Id SocketUser.Mention object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Avatar 获取此用户的头像图像的 URL。 public override string? Avatar { get; } Property Value string IsBot 获取此用户是否为 Bot。 public override bool? IsBot { get; } Property Value bool? UnionOpenId 获取此用户特殊关联应用的 openid。 public override string? UnionOpenId { get; } Property Value string Remarks 此字段需要特殊申请并配置后才会返回。如需申请，请联系平台运营人员。 UnionUserAccount 获取此用户机器人关联的互联应用的用户信息。 public override string? UnionUserAccount { get; } Property Value string Remarks 此字段与 UnionOpenId 关联的应用是同一个。如需申请，请联系平台运营人员。 Username 获取此用户的用户名。 public override string Username { get; } Property Value string"
  },
  "api/QQBot.WebSocket.SocketTextChannel.html": {
    "href": "api/QQBot.WebSocket.SocketTextChannel.html",
    "title": "Class SocketTextChannel | QQBot.Net 文档",
    "keywords": "Class SocketTextChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示服务器中一个基于网关的具有文字聊天能力的频道，可以发送和接收消息。 public class SocketTextChannel : SocketGuildChannel, ITextChannel, INestedChannel, IGuildChannel, IUpdateable, IEntity<ulong>, IMentionable, ISocketMessageChannel, IMessageChannel, IChannel, IEntity<string> Inheritance object SocketEntity<string> SocketChannel SocketGuildChannel SocketTextChannel Implements ITextChannel INestedChannel IGuildChannel IUpdateable IEntity<ulong> IMentionable ISocketMessageChannel IMessageChannel IChannel IEntity<string> Inherited Members SocketGuildChannel.Id SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Type SocketGuildChannel.Position SocketGuildChannel.CreatorId SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CachedMessages 获取此频道缓存的所有消息。 public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> Remarks warning 要想通过此属性获取缓存的消息，需要启用缓存功能，否则此属性将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此属性从本地的内存缓存中获取消息实体，不会向 QQ 服务端发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 CategoryId 获取此嵌套频道在子频道列表中所属的分组频道的 ID。 public ulong? CategoryId { get; } Property Value ulong? Remarks 如果当前频道不属于任何分组频道，则会返回 null。 Mention 返回一个提及此对象的格式化字符串。 public string Mention { get; } Property Value string Permission 获取当前用户在此频道的权限。 public ChannelPermission? Permission { get; } Property Value ChannelPermission? PrivateType 获取此子频道的私密类型。 public ChannelPrivateType? PrivateType { get; } Property Value ChannelPrivateType? SpeakPermission 获取此子频道的发言权限。 public SpeakPermission? SpeakPermission { get; } Property Value SpeakPermission? SubType 获取此子频道的二级分类。 public ChannelSubType? SubType { get; } Property Value ChannelSubType? Methods SendMessageAsync(string?, IMarkdownContent?, FileAttachment?, Embed?, Ark?, MessageReference?, IUserMessage?, RequestOptions?) 向此频道发送消息。 public Task<Cacheable<IUserMessage, string>> SendMessageAsync(string? content = null, IMarkdownContent? markdown = null, FileAttachment? attachment = null, Embed? embed = null, Ark? ark = null, MessageReference? messageReference = null, IUserMessage? passiveSource = null, RequestOptions? options = null) Parameters content string 要发送的消息内容。 markdown IMarkdownContent 要发送的 Markdown 消息内容。 attachment FileAttachment? 要发送的文件附件。 embed Embed 要发送的嵌入式消息内容。 ark Ark 要发送的模板消息内容。 messageReference MessageReference 消息引用，用于回复消息。 passiveSource IUserMessage 被动消息来源。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, string>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。"
  },
  "api/QQBot.WebSocket.SocketUser.html": {
    "href": "api/QQBot.WebSocket.SocketUser.html",
    "title": "Class SocketUser | QQBot.Net 文档",
    "keywords": "Class SocketUser Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的用户 public abstract class SocketUser : SocketEntity<string>, IUser, IEntity<string>, IMentionable Inheritance object SocketEntity<string> SocketUser Implements IUser IEntity<string> IMentionable Derived SocketGuildUser Inherited Members SocketEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SocketUser(QQBotSocketClient, string) protected SocketUser(QQBotSocketClient client, string id) Parameters client QQBotSocketClient id string Properties Mention 返回一个提及此对象的格式化字符串。 public string Mention { get; } Property Value string"
  },
  "api/QQBot.WebSocket.SocketUserChannel.html": {
    "href": "api/QQBot.WebSocket.SocketUserChannel.html",
    "title": "Class SocketUserChannel | QQBot.Net 文档",
    "keywords": "Class SocketUserChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个基于网关的群组频道。 public class SocketUserChannel : SocketChannel, IUserChannel, IEntity<Guid>, ISocketPrivateChannel, IPrivateChannel, ISocketMessageChannel, IMessageChannel, IChannel, IEntity<string> Inheritance object SocketEntity<string> SocketChannel SocketUserChannel Implements IUserChannel IEntity<Guid> ISocketPrivateChannel IPrivateChannel ISocketMessageChannel IMessageChannel IChannel IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CachedMessages 获取此频道缓存的所有消息。 public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> Remarks warning 要想通过此属性获取缓存的消息，需要启用缓存功能，否则此属性将始终返回空集合。缓存功能是默认禁用的，要想启用缓存，请参考 MessageCacheSize。 此属性从本地的内存缓存中获取消息实体，不会向 QQ 服务端发送额外的 API 请求。所获取的消息也可能是已经被删除的消息。 Id 获取此用户单聊频道的唯一标识符。 public Guid Id { get; } Property Value Guid Recipient 获取参与到此私聊频道的另外一位用户。 public SocketUser Recipient { get; } Property Value SocketUser Methods SendMessageAsync(string?, IMarkdownContent?, FileAttachment?, Embed?, Ark?, MessageReference?, IUserMessage?, RequestOptions?) 向此频道发送消息。 public Task<Cacheable<IUserMessage, string>> SendMessageAsync(string? content = null, IMarkdownContent? markdown = null, FileAttachment? attachment = null, Embed? embed = null, Ark? ark = null, MessageReference? messageReference = null, IUserMessage? passiveSource = null, RequestOptions? options = null) Parameters content string 要发送的消息内容。 markdown IMarkdownContent 要发送的 Markdown 消息内容。 attachment FileAttachment? 要发送的文件附件。 embed Embed 要发送的嵌入式消息内容。 ark Ark 要发送的模板消息内容。 messageReference MessageReference 消息引用，用于回复消息。 passiveSource IUserMessage 被动消息来源。 options RequestOptions 发送请求时要使用的选项。 Returns Task<Cacheable<IUserMessage, string>> 一个表示异步发送操作的任务。任务的结果包含所发送消息的可延迟加载的消息对象。"
  },
  "api/QQBot.WebSocket.SocketUserMessage.html": {
    "href": "api/QQBot.WebSocket.SocketUserMessage.html",
    "title": "Class SocketUserMessage | QQBot.Net 文档",
    "keywords": "Class SocketUserMessage Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示一个由用户发送的消息。 public class SocketUserMessage : SocketMessage, IUserMessage, IMessage, IEntity<string> Inheritance object SocketEntity<string> SocketMessage SocketUserMessage Implements IUserMessage IMessage IEntity<string> Inherited Members SocketMessage.Channel SocketMessage.Author SocketMessage.Source SocketMessage.Content SocketMessage.Timestamp SocketMessage.Attachments SocketMessage.MentionedEveryone SocketMessage.Embeds SocketEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods MessageExtensions.ReplyAsync(IUserMessage, string?, IMarkdownContent?, FileAttachment?, Embed?, Ark?, MessageReference?, RequestOptions?)"
  },
  "api/QQBot.WebSocket.SocketVoiceChannel.html": {
    "href": "api/QQBot.WebSocket.SocketVoiceChannel.html",
    "title": "Class SocketVoiceChannel | QQBot.Net 文档",
    "keywords": "Class SocketVoiceChannel Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示服务器中的一个基于网关的具有语音聊天能力的频道。 public class SocketVoiceChannel : SocketGuildChannel, IVoiceChannel, INestedChannel, IGuildChannel, IChannel, IEntity<string>, IUpdateable, IEntity<ulong> Inheritance object SocketEntity<string> SocketChannel SocketGuildChannel SocketVoiceChannel Implements IVoiceChannel INestedChannel IGuildChannel IChannel IEntity<string> IUpdateable IEntity<ulong> Inherited Members SocketGuildChannel.Id SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Type SocketGuildChannel.Position SocketGuildChannel.CreatorId SocketGuildChannel.UpdateAsync(RequestOptions) SocketGuildChannel.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CategoryId 获取此嵌套频道在子频道列表中所属的分组频道的 ID。 public ulong? CategoryId { get; } Property Value ulong? Remarks 如果当前频道不属于任何分组频道，则会返回 null。 Permission 获取当前用户在此频道的权限。 public ChannelPermission? Permission { get; } Property Value ChannelPermission? PrivateType 获取此子频道的私密类型。 public ChannelPrivateType? PrivateType { get; } Property Value ChannelPrivateType? SpeakPermission 获取此子频道的发言权限。 public SpeakPermission? SpeakPermission { get; } Property Value SpeakPermission?"
  },
  "api/QQBot.WebSocket.StartupCacheFetchMode.html": {
    "href": "api/QQBot.WebSocket.StartupCacheFetchMode.html",
    "title": "Enum StartupCacheFetchMode | QQBot.Net 文档",
    "keywords": "Enum StartupCacheFetchMode Namespace QQBot.WebSocket Assembly QQBot.Net.WebSocket.dll 表示基于网关的客户端在启动时缓存基础数据的模式。 public enum StartupCacheFetchMode Fields Asynchronous = 2 异步主动获取。 Auto = 0 根据服务器数量自动选择最佳模式。 Lazy = 3 被动获取。 Synchronous = 1 同步主动获取。 Remarks 缓存基础数据包括服务器基本信息、频道、角色、频道权限重写、当前用户在服务器内的昵称。"
  },
  "api/QQBot.WebSocket.html": {
    "href": "api/QQBot.WebSocket.html",
    "title": "Namespace QQBot.WebSocket | QQBot.Net 文档",
    "keywords": "Namespace QQBot.WebSocket Classes BaseSocketClient 表示一个基于网关的客户端的抽象基类。 GatewayReconnectException 当网关客户端被请求重新连接时引发的异常。 QQBotShardedClient Represents a sharded QQBot client. QQBotSocketClient 表示一个基于网关的 QQ Bot 客户端。 QQBotSocketConfig 表示一个用于 QQBotSocketClient 的配置类。 QQBotSocketRestClient 表示一个用于网关客户端内的 REST 客户端。 SocketApplicationChannel 表示服务器中的一个基于网关的直播子频道。 SocketCategoryChannel 表示一个基于网关的分组频道。 SocketChannel 表示一个基于网关的频道。 SocketDMChannel 表示一个基于网关的子频道用户私聊频道。 SocketEntity<TId> 表示一个基于网关的具有唯一标识符的实体。 SocketForumChannel 表示服务器中的一个基于网关的论坛子频道。 SocketGroupChannel 表示一个基于网关的群组频道。 SocketGuild 表示一个基于网关的频道。 SocketGuildChannel 表示一个基于网关的频道内的子频道。 SocketGuildMember 表示一个基于网关的频道用户。 SocketGuildUser 表示一个基于网关的频道用户。 SocketLiveStreamChannel 表示服务器中的一个基于网关的直播子频道。 SocketMessage 表示一个基于网关的通用消息。 SocketSelfUser 表示一个基于网关的当前用户。 SocketTextChannel 表示服务器中一个基于网关的具有文字聊天能力的频道，可以发送和接收消息。 SocketUser 表示一个基于网关的用户 SocketUserChannel 表示一个基于网关的群组频道。 SocketUserMessage 表示一个由用户发送的消息。 SocketVoiceChannel 表示服务器中的一个基于网关的具有语音聊天能力的频道。 Interfaces ISocketMessageChannel 表示一个基于网关的消息频道，可以发送和接收消息。 ISocketPrivateChannel 表示一个基于网关的私有频道。 Enums StartupCacheFetchMode 表示基于网关的客户端在启动时缓存基础数据的模式。"
  },
  "api/QQBot.html": {
    "href": "api/QQBot.html",
    "title": "Namespace QQBot | QQBot.Net 文档",
    "keywords": "Namespace QQBot Classes Ark 表示一个模板。 ArkBuilder 表示一个模板构建器。 ArkMultiDictionaryParameterBuilder 用于构建 ArkMultiDictionaryParameter 的构建器。 ArkSingleParameterBuilder 用于构建 ArkSingleParameter 的构建器。 AsyncEnumerableExtensions 提供用于展开其异步可枚举成员是嵌套的 IEnumerable<T> 可枚举对象的 IAsyncEnumerable<T> 的扩展方法。 BotGateway Stores the gateway information related to the current bot. ChannelExtensions 提供用于各种频道实体的扩展方法。 Embed 表示一个嵌入式消息。 EmbedBuilder 表示一个用于构建 Embed 的构建器类。 EmbedFieldBuilder 表示一个用于构建 EmbedField 的构建器类。 Format 提供有关格式化的方法。 MarkdownTemplateContent 表示一个 Markdown 模板。 MarkdownTemplateContentBuilder 表示一个用于创建 MarkdownTemplateContent 实例的构建器。 MarkdownTextContent 表示一个 Markdown 文本内容。 MarkdownTextContentBuilder 表示一个用于创建 MarkdownTextContent 实例的构建器。 MentionUtils 提供一组用于生成与解析提及标签的辅助方法。 MessageExtensions 提供用于各种消息实体的扩展方法。 MessageReference 表示一个消息引用。 QQBotConfig 定义 QQBot.Net 各种基础行为的配置项。 RequestOptions 表示发送请求时要使用的选项。 SessionStartLimit Stores the information related to the gateway identify request. TokenUtils 提供一组用于处理 QQBot 登录令牌的辅助方法。 Structs AlphaColor 表示 QQBot 中使用的带有不透明度通道的颜色。 ArkMultiDictionaryParameter 表示模板中的一个多字典列表参数。 ArkSingleParameter 表示模板中的一个单值参数。 Cacheable<TEntity, TId> 表示一个可延迟加载的缓存实体。 Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> 表示一个可延迟加载的缓存实体。 ChannelPermissions 表示一个频道的权限集。 Color 表示 QQBot 中使用的颜色。 EmbedField 表示一个 IEmbed 的字段。 EmbedThumbnail 表示一个 IEmbed 的缩略图。 FileAttachment 表示一个文件附件。 GuildPermissions 表示一个服务器的权限集。 LogMessage 表示一个用于记录日志的消息对象。 MediaFileInfo 表示一个富媒体文件信息。 QQBotError 表示一个 QQBot 返回的错误。 QQBotJsonError 表示一个在执行 API 请求后从 QQBot 接收到的 JSON 数据中解析出的错误。 Interfaces IApplicationChannel 表示一个应用子频道。 IArk 表示一个通用的模板。 IArkParameter 表示一个 Ark 模板参数。 IArkParameterBuilder 表示一个通用的用于构建 IArkParameter 实例的构建器。 IAttachment 表示一个消息内的附件。 ICategoryChannel 表示一个分组子频道。 IChannel 表示一个频道。 IDMChannel 表示一个子频道内用户的私聊频道。 IEmbed 表示一个通用的嵌入式消息。 IEntity<TId> 表示一个通用的具有唯一标识符的实体。 IForumChannel 表示一个论坛子频道。 IGroupChannel 表示一个群组频道，即 QQ 群。 IGuild 表示一个频道. IGuildChannel 表示一个频道内的子频道。 IGuildMember 表示一个频道内用户 IGuildUser 表示一个通用的频道内用户。 ILiveStreamChannel 表示一个直播子频道。 IMarkdownContent 表示一个通用的 Markdown 内容。 IMarkdownContentBuilder 表示一个通用的 Markdown 内容构建器 IMentionable 表示一个可以被提及的实体对象。 IMessage 表示一个通用的消息。 IMessageChannel 表示一个消息频道，可以发送和接收消息。 INestedChannel 表示一个通用的嵌套子频道，即可以嵌套在分组频道中的服务器子频道。 IPrivateChannel 表示一个私有频道。 IQQBotClient 表示一个通用的 QQ Bot 客户端。 IRateLimitInfo 表示一个通用的限速信息。 IRole 表示一个频道身份组。 ISelfUser 表示一个通用的当前登录的用户信息。 ITextChannel 表示一个文字子频道。 IUpdateable 表示一个可以被更新的实体对象。 IUser 表示一个通用的用户。 IUserChannel 表示一个用户单聊频道。 IUserMessage 表示一个通用的由用户发送的消息。 IVoiceChannel 表示一个语音子频道。 Enums AccessEnvironment 表示接入 QQ API 的环境。 AnnouncementType 表示公告类型。 AttachmentType 表示附件的类型。 AudioStatus 表示音频状态。 ChannelApplication 表示一个应用子频道的应用类型。 ChannelPermission 表示可以为角色或用户设置的频道级别的权限。 ChannelPrivateType 表示一个子频道的私密类型。 ChannelSubType 表示文字子频道的二级分类。 ChannelType 表示子频道类型。 ConnectionState 指定客户端的连接状态。 CreateAttachmentMode 指示 FileAttachment 如何创建附件。 Direction 表示获取数据的方向。 EmojiType 表示一个表情方式的类型。 GatewayIntents 表示网关意图 GuildPermission 表示可以为角色或用户设置的频道级别的服务器权限。 KeyboardActionAnchor 表示键盘按钮的特殊操作。 KeyboardActionType 表示键盘按钮的动作类型。 KeyboardButtonStyle 表示键盘按钮的样式。 KeyboardPermissionType 表示键盘按钮的权限类型。 LogSeverity 表示日志消息的严重性。 LoginState 表示客户端的登录状态。 MessageSource 表示一个消息的来源。 MessageType 表示消息的类型。 PermValue 表示一个权限的重写配置的值。 QQBotErrorCode 表示从 QQBot 接收到的错误代码。 RemindType 表示提醒类型。 RetryMode 表示请求在发生错误时应如何处理。 RoleType 表示身份组的类型。 SpeakPermission 表示子频道发言权限。 TokenType 表示客户端所使用的令牌类型。"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API 文档 | QQBot.Net 文档",
    "keywords": "API 文档 用于浏览 QQBot.Net 的全部公开 API 信息。"
  },
  "changelog/changelog.html": {
    "href": "changelog/changelog.html",
    "title": "变更日志 | QQBot.Net 文档",
    "keywords": "变更日志 测试版本迭代中，暂无变更日志。"
  },
  "demos/demos-community.html": {
    "href": "demos/demos-community.html",
    "title": "社区示例项目 | QQBot.Net 文档",
    "keywords": "社区示例项目"
  },
  "demos/demos.html": {
    "href": "demos/demos.html",
    "title": "示例项目 | QQBot.Net 文档",
    "keywords": "示例项目 基础 QQBot.Net.Samples.SimpleBot 该项目演示了创建并启动 Bot 的基本方法，并通过交互框架实现了一个简单的回声机器人。"
  },
  "guides/introduction/intro.html": {
    "href": "guides/introduction/intro.html",
    "title": "QQBot.Net 简介 | QQBot.Net 文档",
    "keywords": "简介 要准备使用 QQBot.Net？ 欢迎！在开始使用本类库前，请先确认您应了解如何开发 .NET 应用程序， 并对 C# 语言有一定的了解，包括 异步编程、多态、接口 等关键内容。 如果想与使用本类库的开发者交流、获取帮助、反馈问题，请访问我们的 QQ 频道 QQBot.Net 社区。 Note 请注意，本文档中的代码片段仅为示例，请不要盲目地直接复制使用。 Tip 本文档仍在编写中，除了参考实例代码与求助于社区外，由于本项目与 Kook.Net 都是移植自 Discord.Net，您还可以参考 Kook.Net 与 Discord.Net 的文档。 还不熟悉 .NET 与 C#？ 本类库的样例、代码片段、文档都是以 .NET 和 C# 开发的，如有需要，可参考以下文档： C# 编程指南 C# 文档 C# 语言参考 .NET API"
  },
  "index.html": {
    "href": "index.html",
    "title": "首页 | QQBot.Net 文档",
    "keywords": "QQBot.Net 本文档是 QQBot.Net 的官方文档，包含了 QQBot.Net 的使用指南、API 文档以及其他相关信息。文档的源码托管在 GitHub 上，欢迎您为文档做出贡献。 什么是 QQBot.Net？ QQBot.Net 是一个对 QQ 机器人 API v1 及 v2 进行功能封装的类库，以 C# 编写，编译所采用的目标框架包括 .NET 8.0 .NET 6.0 Tip 除 .NET 8.0 外的其他目标框架未经完全测试。 我应该从哪里开始？ 如果您是初次使用 QQBot.Net，请参考 用户指南。 如果您想浏览完整的 QQBot.Net API，请参考 API 文档。 寻求帮助？ 如果您在开发中遇到无法解决的问题，请访问我们的 QQ 机器人 QQBot.Net 社区 寻求帮助。"
  }
}